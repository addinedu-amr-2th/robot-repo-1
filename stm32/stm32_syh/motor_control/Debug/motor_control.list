
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fdc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080041fc  080041fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041fc  080041fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000070  08004274  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004274  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f62  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001805  00000000  00000000  00028ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002b1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019711  00000000  00000000  0002ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a767  00000000  00000000  000451a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ab9  00000000  00000000  0004f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e63c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b4c  00000000  00000000  000e641c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080041a8 	.word	0x080041a8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080041a8 	.word	0x080041a8

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	; 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	3c01      	subs	r4, #1
 8000360:	bf28      	it	cs
 8000362:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000366:	d2e9      	bcs.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_dmul>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005aa:	bf1d      	ittte	ne
 80005ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b0:	ea94 0f0c 	teqne	r4, ip
 80005b4:	ea95 0f0c 	teqne	r5, ip
 80005b8:	f000 f8de 	bleq	8000778 <__aeabi_dmul+0x1dc>
 80005bc:	442c      	add	r4, r5
 80005be:	ea81 0603 	eor.w	r6, r1, r3
 80005c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ce:	bf18      	it	ne
 80005d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005dc:	d038      	beq.n	8000650 <__aeabi_dmul+0xb4>
 80005de:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f2:	f04f 0600 	mov.w	r6, #0
 80005f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fa:	f09c 0f00 	teq	ip, #0
 80005fe:	bf18      	it	ne
 8000600:	f04e 0e01 	orrne.w	lr, lr, #1
 8000604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800060c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000610:	d204      	bcs.n	800061c <__aeabi_dmul+0x80>
 8000612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000616:	416d      	adcs	r5, r5
 8000618:	eb46 0606 	adc.w	r6, r6, r6
 800061c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800062c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000634:	bf88      	it	hi
 8000636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063a:	d81e      	bhi.n	800067a <__aeabi_dmul+0xde>
 800063c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000654:	ea46 0101 	orr.w	r1, r6, r1
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	ea81 0103 	eor.w	r1, r1, r3
 8000660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000664:	bfc2      	ittt	gt
 8000666:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066e:	bd70      	popgt	{r4, r5, r6, pc}
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f04f 0e00 	mov.w	lr, #0
 8000678:	3c01      	subs	r4, #1
 800067a:	f300 80ab 	bgt.w	80007d4 <__aeabi_dmul+0x238>
 800067e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000682:	bfde      	ittt	le
 8000684:	2000      	movle	r0, #0
 8000686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd70      	pople	{r4, r5, r6, pc}
 800068c:	f1c4 0400 	rsb	r4, r4, #0
 8000690:	3c20      	subs	r4, #32
 8000692:	da35      	bge.n	8000700 <__aeabi_dmul+0x164>
 8000694:	340c      	adds	r4, #12
 8000696:	dc1b      	bgt.n	80006d0 <__aeabi_dmul+0x134>
 8000698:	f104 0414 	add.w	r4, r4, #20
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f305 	lsl.w	r3, r0, r5
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	fa21 f604 	lsr.w	r6, r1, r4
 80006c0:	eb42 0106 	adc.w	r1, r2, r6
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 040c 	rsb	r4, r4, #12
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f304 	lsl.w	r3, r0, r4
 80006dc:	fa20 f005 	lsr.w	r0, r0, r5
 80006e0:	fa01 f204 	lsl.w	r2, r1, r4
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f0:	f141 0100 	adc.w	r1, r1, #0
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f205 	lsl.w	r2, r0, r5
 8000708:	ea4e 0e02 	orr.w	lr, lr, r2
 800070c:	fa20 f304 	lsr.w	r3, r0, r4
 8000710:	fa01 f205 	lsl.w	r2, r1, r5
 8000714:	ea43 0302 	orr.w	r3, r3, r2
 8000718:	fa21 f004 	lsr.w	r0, r1, r4
 800071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000720:	fa21 f204 	lsr.w	r2, r1, r4
 8000724:	ea20 0002 	bic.w	r0, r0, r2
 8000728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000730:	bf08      	it	eq
 8000732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f094 0f00 	teq	r4, #0
 800073c:	d10f      	bne.n	800075e <__aeabi_dmul+0x1c2>
 800073e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000742:	0040      	lsls	r0, r0, #1
 8000744:	eb41 0101 	adc.w	r1, r1, r1
 8000748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3c01      	subeq	r4, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1a6>
 8000752:	ea41 0106 	orr.w	r1, r1, r6
 8000756:	f095 0f00 	teq	r5, #0
 800075a:	bf18      	it	ne
 800075c:	4770      	bxne	lr
 800075e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	eb43 0303 	adc.w	r3, r3, r3
 8000768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3d01      	subeq	r5, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1c6>
 8000772:	ea43 0306 	orr.w	r3, r3, r6
 8000776:	4770      	bx	lr
 8000778:	ea94 0f0c 	teq	r4, ip
 800077c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000780:	bf18      	it	ne
 8000782:	ea95 0f0c 	teqne	r5, ip
 8000786:	d00c      	beq.n	80007a2 <__aeabi_dmul+0x206>
 8000788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078c:	bf18      	it	ne
 800078e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000792:	d1d1      	bne.n	8000738 <__aeabi_dmul+0x19c>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a6:	bf06      	itte	eq
 80007a8:	4610      	moveq	r0, r2
 80007aa:	4619      	moveq	r1, r3
 80007ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b0:	d019      	beq.n	80007e6 <__aeabi_dmul+0x24a>
 80007b2:	ea94 0f0c 	teq	r4, ip
 80007b6:	d102      	bne.n	80007be <__aeabi_dmul+0x222>
 80007b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007bc:	d113      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007be:	ea95 0f0c 	teq	r5, ip
 80007c2:	d105      	bne.n	80007d0 <__aeabi_dmul+0x234>
 80007c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c8:	bf1c      	itt	ne
 80007ca:	4610      	movne	r0, r2
 80007cc:	4619      	movne	r1, r3
 80007ce:	d10a      	bne.n	80007e6 <__aeabi_dmul+0x24a>
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ee:	bd70      	pop	{r4, r5, r6, pc}

080007f0 <__aeabi_ddiv>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fe:	bf1d      	ittte	ne
 8000800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000804:	ea94 0f0c 	teqne	r4, ip
 8000808:	ea95 0f0c 	teqne	r5, ip
 800080c:	f000 f8a7 	bleq	800095e <__aeabi_ddiv+0x16e>
 8000810:	eba4 0405 	sub.w	r4, r4, r5
 8000814:	ea81 0e03 	eor.w	lr, r1, r3
 8000818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800081c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000820:	f000 8088 	beq.w	8000934 <__aeabi_ddiv+0x144>
 8000824:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800082c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000834:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800083c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000840:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000848:	429d      	cmp	r5, r3
 800084a:	bf08      	it	eq
 800084c:	4296      	cmpeq	r6, r2
 800084e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000852:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000856:	d202      	bcs.n	800085e <__aeabi_ddiv+0x6e>
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	1ab6      	subs	r6, r6, r2
 8000860:	eb65 0503 	sbc.w	r5, r5, r3
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 000c 	orrcs.w	r0, r0, ip
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d0:	d018      	beq.n	8000904 <__aeabi_ddiv+0x114>
 80008d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ee:	d1c0      	bne.n	8000872 <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	d10b      	bne.n	800090e <__aeabi_ddiv+0x11e>
 80008f6:	ea41 0100 	orr.w	r1, r1, r0
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000902:	e7b6      	b.n	8000872 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	bf04      	itt	eq
 800090a:	4301      	orreq	r1, r0
 800090c:	2000      	moveq	r0, #0
 800090e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000912:	bf88      	it	hi
 8000914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000918:	f63f aeaf 	bhi.w	800067a <__aeabi_dmul+0xde>
 800091c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000920:	bf04      	itt	eq
 8000922:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092a:	f150 0000 	adcs.w	r0, r0, #0
 800092e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800093c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000940:	bfc2      	ittt	gt
 8000942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094a:	bd70      	popgt	{r4, r5, r6, pc}
 800094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000950:	f04f 0e00 	mov.w	lr, #0
 8000954:	3c01      	subs	r4, #1
 8000956:	e690      	b.n	800067a <__aeabi_dmul+0xde>
 8000958:	ea45 0e06 	orr.w	lr, r5, r6
 800095c:	e68d      	b.n	800067a <__aeabi_dmul+0xde>
 800095e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000962:	ea94 0f0c 	teq	r4, ip
 8000966:	bf08      	it	eq
 8000968:	ea95 0f0c 	teqeq	r5, ip
 800096c:	f43f af3b 	beq.w	80007e6 <__aeabi_dmul+0x24a>
 8000970:	ea94 0f0c 	teq	r4, ip
 8000974:	d10a      	bne.n	800098c <__aeabi_ddiv+0x19c>
 8000976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097a:	f47f af34 	bne.w	80007e6 <__aeabi_dmul+0x24a>
 800097e:	ea95 0f0c 	teq	r5, ip
 8000982:	f47f af25 	bne.w	80007d0 <__aeabi_dmul+0x234>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e72c      	b.n	80007e6 <__aeabi_dmul+0x24a>
 800098c:	ea95 0f0c 	teq	r5, ip
 8000990:	d106      	bne.n	80009a0 <__aeabi_ddiv+0x1b0>
 8000992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000996:	f43f aefd 	beq.w	8000794 <__aeabi_dmul+0x1f8>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e722      	b.n	80007e6 <__aeabi_dmul+0x24a>
 80009a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009aa:	f47f aec5 	bne.w	8000738 <__aeabi_dmul+0x19c>
 80009ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b2:	f47f af0d 	bne.w	80007d0 <__aeabi_dmul+0x234>
 80009b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ba:	f47f aeeb 	bne.w	8000794 <__aeabi_dmul+0x1f8>
 80009be:	e712      	b.n	80007e6 <__aeabi_dmul+0x24a>

080009c0 <__aeabi_d2f>:
 80009c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c8:	bf24      	itt	cs
 80009ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d2:	d90d      	bls.n	80009f0 <__aeabi_d2f+0x30>
 80009d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e8:	bf08      	it	eq
 80009ea:	f020 0001 	biceq.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f4:	d121      	bne.n	8000a3a <__aeabi_d2f+0x7a>
 80009f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fa:	bfbc      	itt	lt
 80009fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	4770      	bxlt	lr
 8000a02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0a:	f1c2 0218 	rsb	r2, r2, #24
 8000a0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a16:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1a:	bf18      	it	ne
 8000a1c:	f040 0001 	orrne.w	r0, r0, #1
 8000a20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a2c:	ea40 000c 	orr.w	r0, r0, ip
 8000a30:	fa23 f302 	lsr.w	r3, r3, r2
 8000a34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a38:	e7cc      	b.n	80009d4 <__aeabi_d2f+0x14>
 8000a3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3e:	d107      	bne.n	8000a50 <__aeabi_d2f+0x90>
 8000a40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a44:	bf1e      	ittt	ne
 8000a46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4e:	4770      	bxne	lr
 8000a50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_frsub>:
 8000a60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a64:	e002      	b.n	8000a6c <__addsf3>
 8000a66:	bf00      	nop

08000a68 <__aeabi_fsub>:
 8000a68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a6c <__addsf3>:
 8000a6c:	0042      	lsls	r2, r0, #1
 8000a6e:	bf1f      	itttt	ne
 8000a70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a74:	ea92 0f03 	teqne	r2, r3
 8000a78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a80:	d06a      	beq.n	8000b58 <__addsf3+0xec>
 8000a82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a8a:	bfc1      	itttt	gt
 8000a8c:	18d2      	addgt	r2, r2, r3
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	4048      	eorgt	r0, r1
 8000a92:	4041      	eorgt	r1, r0
 8000a94:	bfb8      	it	lt
 8000a96:	425b      	neglt	r3, r3
 8000a98:	2b19      	cmp	r3, #25
 8000a9a:	bf88      	it	hi
 8000a9c:	4770      	bxhi	lr
 8000a9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aaa:	bf18      	it	ne
 8000aac:	4240      	negne	r0, r0
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aba:	bf18      	it	ne
 8000abc:	4249      	negne	r1, r1
 8000abe:	ea92 0f03 	teq	r2, r3
 8000ac2:	d03f      	beq.n	8000b44 <__addsf3+0xd8>
 8000ac4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac8:	fa41 fc03 	asr.w	ip, r1, r3
 8000acc:	eb10 000c 	adds.w	r0, r0, ip
 8000ad0:	f1c3 0320 	rsb	r3, r3, #32
 8000ad4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000adc:	d502      	bpl.n	8000ae4 <__addsf3+0x78>
 8000ade:	4249      	negs	r1, r1
 8000ae0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae8:	d313      	bcc.n	8000b12 <__addsf3+0xa6>
 8000aea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aee:	d306      	bcc.n	8000afe <__addsf3+0x92>
 8000af0:	0840      	lsrs	r0, r0, #1
 8000af2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af6:	f102 0201 	add.w	r2, r2, #1
 8000afa:	2afe      	cmp	r2, #254	; 0xfe
 8000afc:	d251      	bcs.n	8000ba2 <__addsf3+0x136>
 8000afe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b06:	bf08      	it	eq
 8000b08:	f020 0001 	biceq.w	r0, r0, #1
 8000b0c:	ea40 0003 	orr.w	r0, r0, r3
 8000b10:	4770      	bx	lr
 8000b12:	0049      	lsls	r1, r1, #1
 8000b14:	eb40 0000 	adc.w	r0, r0, r0
 8000b18:	3a01      	subs	r2, #1
 8000b1a:	bf28      	it	cs
 8000b1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b20:	d2ed      	bcs.n	8000afe <__addsf3+0x92>
 8000b22:	fab0 fc80 	clz	ip, r0
 8000b26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b32:	bfaa      	itet	ge
 8000b34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b38:	4252      	neglt	r2, r2
 8000b3a:	4318      	orrge	r0, r3
 8000b3c:	bfbc      	itt	lt
 8000b3e:	40d0      	lsrlt	r0, r2
 8000b40:	4318      	orrlt	r0, r3
 8000b42:	4770      	bx	lr
 8000b44:	f092 0f00 	teq	r2, #0
 8000b48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b4c:	bf06      	itte	eq
 8000b4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b52:	3201      	addeq	r2, #1
 8000b54:	3b01      	subne	r3, #1
 8000b56:	e7b5      	b.n	8000ac4 <__addsf3+0x58>
 8000b58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b66:	d021      	beq.n	8000bac <__addsf3+0x140>
 8000b68:	ea92 0f03 	teq	r2, r3
 8000b6c:	d004      	beq.n	8000b78 <__addsf3+0x10c>
 8000b6e:	f092 0f00 	teq	r2, #0
 8000b72:	bf08      	it	eq
 8000b74:	4608      	moveq	r0, r1
 8000b76:	4770      	bx	lr
 8000b78:	ea90 0f01 	teq	r0, r1
 8000b7c:	bf1c      	itt	ne
 8000b7e:	2000      	movne	r0, #0
 8000b80:	4770      	bxne	lr
 8000b82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b86:	d104      	bne.n	8000b92 <__addsf3+0x126>
 8000b88:	0040      	lsls	r0, r0, #1
 8000b8a:	bf28      	it	cs
 8000b8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b90:	4770      	bx	lr
 8000b92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b96:	bf3c      	itt	cc
 8000b98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bxcc	lr
 8000b9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	4770      	bx	lr
 8000bac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb0:	bf16      	itet	ne
 8000bb2:	4608      	movne	r0, r1
 8000bb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb8:	4601      	movne	r1, r0
 8000bba:	0242      	lsls	r2, r0, #9
 8000bbc:	bf06      	itte	eq
 8000bbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bc2:	ea90 0f01 	teqeq	r0, r1
 8000bc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_ui2f>:
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	e004      	b.n	8000bdc <__aeabi_i2f+0x8>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_i2f>:
 8000bd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd8:	bf48      	it	mi
 8000bda:	4240      	negmi	r0, r0
 8000bdc:	ea5f 0c00 	movs.w	ip, r0
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be8:	4601      	mov	r1, r0
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	e01c      	b.n	8000c2a <__aeabi_l2f+0x2a>

08000bf0 <__aeabi_ul2f>:
 8000bf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf4:	bf08      	it	eq
 8000bf6:	4770      	bxeq	lr
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	e00a      	b.n	8000c14 <__aeabi_l2f+0x14>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_l2f>:
 8000c00:	ea50 0201 	orrs.w	r2, r0, r1
 8000c04:	bf08      	it	eq
 8000c06:	4770      	bxeq	lr
 8000c08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__aeabi_l2f+0x14>
 8000c0e:	4240      	negs	r0, r0
 8000c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c14:	ea5f 0c01 	movs.w	ip, r1
 8000c18:	bf02      	ittt	eq
 8000c1a:	4684      	moveq	ip, r0
 8000c1c:	4601      	moveq	r1, r0
 8000c1e:	2000      	moveq	r0, #0
 8000c20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c24:	bf08      	it	eq
 8000c26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2e:	fabc f28c 	clz	r2, ip
 8000c32:	3a08      	subs	r2, #8
 8000c34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c38:	db10      	blt.n	8000c5c <__aeabi_l2f+0x5c>
 8000c3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3e:	4463      	add	r3, ip
 8000c40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c44:	f1c2 0220 	rsb	r2, r2, #32
 8000c48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c50:	eb43 0002 	adc.w	r0, r3, r2
 8000c54:	bf08      	it	eq
 8000c56:	f020 0001 	biceq.w	r0, r0, #1
 8000c5a:	4770      	bx	lr
 8000c5c:	f102 0220 	add.w	r2, r2, #32
 8000c60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c64:	f1c2 0220 	rsb	r2, r2, #32
 8000c68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000c70:	eb43 0002 	adc.w	r0, r3, r2
 8000c74:	bf08      	it	eq
 8000c76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_fmul>:
 8000c7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c84:	bf1e      	ittt	ne
 8000c86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c8a:	ea92 0f0c 	teqne	r2, ip
 8000c8e:	ea93 0f0c 	teqne	r3, ip
 8000c92:	d06f      	beq.n	8000d74 <__aeabi_fmul+0xf8>
 8000c94:	441a      	add	r2, r3
 8000c96:	ea80 0c01 	eor.w	ip, r0, r1
 8000c9a:	0240      	lsls	r0, r0, #9
 8000c9c:	bf18      	it	ne
 8000c9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ca2:	d01e      	beq.n	8000ce2 <__aeabi_fmul+0x66>
 8000ca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ca8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb0:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cb8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cbc:	bf3e      	ittt	cc
 8000cbe:	0049      	lslcc	r1, r1, #1
 8000cc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc4:	005b      	lslcc	r3, r3, #1
 8000cc6:	ea40 0001 	orr.w	r0, r0, r1
 8000cca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cce:	2afd      	cmp	r2, #253	; 0xfd
 8000cd0:	d81d      	bhi.n	8000d0e <__aeabi_fmul+0x92>
 8000cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cda:	bf08      	it	eq
 8000cdc:	f020 0001 	biceq.w	r0, r0, #1
 8000ce0:	4770      	bx	lr
 8000ce2:	f090 0f00 	teq	r0, #0
 8000ce6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cea:	bf08      	it	eq
 8000cec:	0249      	lsleq	r1, r1, #9
 8000cee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cf6:	3a7f      	subs	r2, #127	; 0x7f
 8000cf8:	bfc2      	ittt	gt
 8000cfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d02:	4770      	bxgt	lr
 8000d04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	dc5d      	bgt.n	8000dcc <__aeabi_fmul+0x150>
 8000d10:	f112 0f19 	cmn.w	r2, #25
 8000d14:	bfdc      	itt	le
 8000d16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d1a:	4770      	bxle	lr
 8000d1c:	f1c2 0200 	rsb	r2, r2, #0
 8000d20:	0041      	lsls	r1, r0, #1
 8000d22:	fa21 f102 	lsr.w	r1, r1, r2
 8000d26:	f1c2 0220 	rsb	r2, r2, #32
 8000d2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d32:	f140 0000 	adc.w	r0, r0, #0
 8000d36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d3a:	bf08      	it	eq
 8000d3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d40:	4770      	bx	lr
 8000d42:	f092 0f00 	teq	r2, #0
 8000d46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d4a:	bf02      	ittt	eq
 8000d4c:	0040      	lsleq	r0, r0, #1
 8000d4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d52:	3a01      	subeq	r2, #1
 8000d54:	d0f9      	beq.n	8000d4a <__aeabi_fmul+0xce>
 8000d56:	ea40 000c 	orr.w	r0, r0, ip
 8000d5a:	f093 0f00 	teq	r3, #0
 8000d5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0049      	lsleq	r1, r1, #1
 8000d66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d6a:	3b01      	subeq	r3, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fmul+0xe6>
 8000d6e:	ea41 010c 	orr.w	r1, r1, ip
 8000d72:	e78f      	b.n	8000c94 <__aeabi_fmul+0x18>
 8000d74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	bf18      	it	ne
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d00a      	beq.n	8000d9a <__aeabi_fmul+0x11e>
 8000d84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d88:	bf18      	it	ne
 8000d8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d8e:	d1d8      	bne.n	8000d42 <__aeabi_fmul+0xc6>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	bf17      	itett	ne
 8000da0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000da4:	4608      	moveq	r0, r1
 8000da6:	f091 0f00 	teqne	r1, #0
 8000daa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dae:	d014      	beq.n	8000dda <__aeabi_fmul+0x15e>
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	d101      	bne.n	8000dba <__aeabi_fmul+0x13e>
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	d10f      	bne.n	8000dda <__aeabi_fmul+0x15e>
 8000dba:	ea93 0f0c 	teq	r3, ip
 8000dbe:	d103      	bne.n	8000dc8 <__aeabi_fmul+0x14c>
 8000dc0:	024b      	lsls	r3, r1, #9
 8000dc2:	bf18      	it	ne
 8000dc4:	4608      	movne	r0, r1
 8000dc6:	d108      	bne.n	8000dda <__aeabi_fmul+0x15e>
 8000dc8:	ea80 0001 	eor.w	r0, r0, r1
 8000dcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd8:	4770      	bx	lr
 8000dda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dde:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_fdiv>:
 8000de4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dec:	bf1e      	ittt	ne
 8000dee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df2:	ea92 0f0c 	teqne	r2, ip
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d069      	beq.n	8000ed0 <__aeabi_fdiv+0xec>
 8000dfc:	eba2 0203 	sub.w	r2, r2, r3
 8000e00:	ea80 0c01 	eor.w	ip, r0, r1
 8000e04:	0249      	lsls	r1, r1, #9
 8000e06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e0a:	d037      	beq.n	8000e7c <__aeabi_fdiv+0x98>
 8000e0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	bf38      	it	cc
 8000e20:	005b      	lslcc	r3, r3, #1
 8000e22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	bf24      	itt	cs
 8000e2e:	1a5b      	subcs	r3, r3, r1
 8000e30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e38:	bf24      	itt	cs
 8000e3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e46:	bf24      	itt	cs
 8000e48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e54:	bf24      	itt	cs
 8000e56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	bf18      	it	ne
 8000e62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e66:	d1e0      	bne.n	8000e2a <__aeabi_fdiv+0x46>
 8000e68:	2afd      	cmp	r2, #253	; 0xfd
 8000e6a:	f63f af50 	bhi.w	8000d0e <__aeabi_fmul+0x92>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e74:	bf08      	it	eq
 8000e76:	f020 0001 	biceq.w	r0, r0, #1
 8000e7a:	4770      	bx	lr
 8000e7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e84:	327f      	adds	r2, #127	; 0x7f
 8000e86:	bfc2      	ittt	gt
 8000e88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e90:	4770      	bxgt	lr
 8000e92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	3a01      	subs	r2, #1
 8000e9c:	e737      	b.n	8000d0e <__aeabi_fmul+0x92>
 8000e9e:	f092 0f00 	teq	r2, #0
 8000ea2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ea6:	bf02      	ittt	eq
 8000ea8:	0040      	lsleq	r0, r0, #1
 8000eaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eae:	3a01      	subeq	r2, #1
 8000eb0:	d0f9      	beq.n	8000ea6 <__aeabi_fdiv+0xc2>
 8000eb2:	ea40 000c 	orr.w	r0, r0, ip
 8000eb6:	f093 0f00 	teq	r3, #0
 8000eba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0049      	lsleq	r1, r1, #1
 8000ec2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ec6:	3b01      	subeq	r3, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fdiv+0xda>
 8000eca:	ea41 010c 	orr.w	r1, r1, ip
 8000ece:	e795      	b.n	8000dfc <__aeabi_fdiv+0x18>
 8000ed0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed4:	ea92 0f0c 	teq	r2, ip
 8000ed8:	d108      	bne.n	8000eec <__aeabi_fdiv+0x108>
 8000eda:	0242      	lsls	r2, r0, #9
 8000edc:	f47f af7d 	bne.w	8000dda <__aeabi_fmul+0x15e>
 8000ee0:	ea93 0f0c 	teq	r3, ip
 8000ee4:	f47f af70 	bne.w	8000dc8 <__aeabi_fmul+0x14c>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e776      	b.n	8000dda <__aeabi_fmul+0x15e>
 8000eec:	ea93 0f0c 	teq	r3, ip
 8000ef0:	d104      	bne.n	8000efc <__aeabi_fdiv+0x118>
 8000ef2:	024b      	lsls	r3, r1, #9
 8000ef4:	f43f af4c 	beq.w	8000d90 <__aeabi_fmul+0x114>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e76e      	b.n	8000dda <__aeabi_fmul+0x15e>
 8000efc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f00:	bf18      	it	ne
 8000f02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	d1ca      	bne.n	8000e9e <__aeabi_fdiv+0xba>
 8000f08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f0c:	f47f af5c 	bne.w	8000dc8 <__aeabi_fmul+0x14c>
 8000f10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f14:	f47f af3c 	bne.w	8000d90 <__aeabi_fmul+0x114>
 8000f18:	e75f      	b.n	8000dda <__aeabi_fmul+0x15e>
 8000f1a:	bf00      	nop

08000f1c <__gesf2>:
 8000f1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f20:	e006      	b.n	8000f30 <__cmpsf2+0x4>
 8000f22:	bf00      	nop

08000f24 <__lesf2>:
 8000f24:	f04f 0c01 	mov.w	ip, #1
 8000f28:	e002      	b.n	8000f30 <__cmpsf2+0x4>
 8000f2a:	bf00      	nop

08000f2c <__cmpsf2>:
 8000f2c:	f04f 0c01 	mov.w	ip, #1
 8000f30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	bf18      	it	ne
 8000f42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f46:	d011      	beq.n	8000f6c <__cmpsf2+0x40>
 8000f48:	b001      	add	sp, #4
 8000f4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f4e:	bf18      	it	ne
 8000f50:	ea90 0f01 	teqne	r0, r1
 8000f54:	bf58      	it	pl
 8000f56:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f5a:	bf88      	it	hi
 8000f5c:	17c8      	asrhi	r0, r1, #31
 8000f5e:	bf38      	it	cc
 8000f60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f64:	bf18      	it	ne
 8000f66:	f040 0001 	orrne.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f70:	d102      	bne.n	8000f78 <__cmpsf2+0x4c>
 8000f72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f76:	d105      	bne.n	8000f84 <__cmpsf2+0x58>
 8000f78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f7c:	d1e4      	bne.n	8000f48 <__cmpsf2+0x1c>
 8000f7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f82:	d0e1      	beq.n	8000f48 <__cmpsf2+0x1c>
 8000f84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__aeabi_cfrcmple>:
 8000f8c:	4684      	mov	ip, r0
 8000f8e:	4608      	mov	r0, r1
 8000f90:	4661      	mov	r1, ip
 8000f92:	e7ff      	b.n	8000f94 <__aeabi_cfcmpeq>

08000f94 <__aeabi_cfcmpeq>:
 8000f94:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f96:	f7ff ffc9 	bl	8000f2c <__cmpsf2>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	bf48      	it	mi
 8000f9e:	f110 0f00 	cmnmi.w	r0, #0
 8000fa2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa4 <__aeabi_fcmpeq>:
 8000fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa8:	f7ff fff4 	bl	8000f94 <__aeabi_cfcmpeq>
 8000fac:	bf0c      	ite	eq
 8000fae:	2001      	moveq	r0, #1
 8000fb0:	2000      	movne	r0, #0
 8000fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_fcmplt>:
 8000fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fbc:	f7ff ffea 	bl	8000f94 <__aeabi_cfcmpeq>
 8000fc0:	bf34      	ite	cc
 8000fc2:	2001      	movcc	r0, #1
 8000fc4:	2000      	movcs	r0, #0
 8000fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fca:	bf00      	nop

08000fcc <__aeabi_fcmple>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff ffe0 	bl	8000f94 <__aeabi_cfcmpeq>
 8000fd4:	bf94      	ite	ls
 8000fd6:	2001      	movls	r0, #1
 8000fd8:	2000      	movhi	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmpge>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffd2 	bl	8000f8c <__aeabi_cfrcmple>
 8000fe8:	bf94      	ite	ls
 8000fea:	2001      	movls	r0, #1
 8000fec:	2000      	movhi	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmpgt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffc8 	bl	8000f8c <__aeabi_cfrcmple>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_f2iz>:
 8001008:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800100c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001010:	d30f      	bcc.n	8001032 <__aeabi_f2iz+0x2a>
 8001012:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001016:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101a:	d90d      	bls.n	8001038 <__aeabi_f2iz+0x30>
 800101c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001024:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001028:	fa23 f002 	lsr.w	r0, r3, r2
 800102c:	bf18      	it	ne
 800102e:	4240      	negne	r0, r0
 8001030:	4770      	bx	lr
 8001032:	f04f 0000 	mov.w	r0, #0
 8001036:	4770      	bx	lr
 8001038:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800103c:	d101      	bne.n	8001042 <__aeabi_f2iz+0x3a>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	d105      	bne.n	800104e <__aeabi_f2iz+0x46>
 8001042:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001046:	bf08      	it	eq
 8001048:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr

08001054 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001068:	4b37      	ldr	r3, [pc, #220]	; (8001148 <MX_GPIO_Init+0xf4>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a36      	ldr	r2, [pc, #216]	; (8001148 <MX_GPIO_Init+0xf4>)
 800106e:	f043 0320 	orr.w	r3, r3, #32
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b34      	ldr	r3, [pc, #208]	; (8001148 <MX_GPIO_Init+0xf4>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b31      	ldr	r3, [pc, #196]	; (8001148 <MX_GPIO_Init+0xf4>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a30      	ldr	r2, [pc, #192]	; (8001148 <MX_GPIO_Init+0xf4>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <MX_GPIO_Init+0xf4>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MX_GPIO_Init+0xf4>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <MX_GPIO_Init+0xf4>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_GPIO_Init+0xf4>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_GPIO_Init+0xf4>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a24      	ldr	r2, [pc, #144]	; (8001148 <MX_GPIO_Init+0xf4>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_GPIO_Init+0xf4>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f241 0130 	movw	r1, #4144	; 0x1030
 80010ce:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_GPIO_Init+0xf8>)
 80010d0:	f001 f9e8 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2133      	movs	r1, #51	; 0x33
 80010d8:	481d      	ldr	r0, [pc, #116]	; (8001150 <MX_GPIO_Init+0xfc>)
 80010da:	f001 f9e3 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2104      	movs	r1, #4
 80010e2:	481c      	ldr	r0, [pc, #112]	; (8001154 <MX_GPIO_Init+0x100>)
 80010e4:	f001 f9de 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 80010e8:	f241 0330 	movw	r3, #4144	; 0x1030
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	4619      	mov	r1, r3
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <MX_GPIO_Init+0xf8>)
 8001102:	f001 f83b 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001106:	2333      	movs	r3, #51	; 0x33
 8001108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_GPIO_Init+0xfc>)
 800111e:	f001 f82d 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001122:	2304      	movs	r3, #4
 8001124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2302      	movs	r3, #2
 8001130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4619      	mov	r1, r3
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_GPIO_Init+0x100>)
 800113a:	f001 f81f 	bl	800217c <HAL_GPIO_Init>

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40011000 	.word	0x40011000
 8001150:	40010c00 	.word	0x40010c00
 8001154:	40011400 	.word	0x40011400

08001158 <HAL_TIM_PeriodElapsedCallback>:
//	encoder_position = enc_instance.position;
//	encoder_velocity = enc_instance.velocity;
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	counterA = __HAL_TIM_GET_COUNTER(&htim2);
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800116a:	801a      	strh	r2, [r3, #0]
	counterB = __HAL_TIM_GET_COUNTER(&htim3);
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001176:	801a      	strh	r2, [r3, #0]
	counterC = __HAL_TIM_GET_COUNTER(&htim4);
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001182:	801a      	strh	r2, [r3, #0]
	counterD = __HAL_TIM_GET_COUNTER(&htim5);
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800118e:	801a      	strh	r2, [r3, #0]

	directionA = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b10      	cmp	r3, #16
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80011a8:	801a      	strh	r2, [r3, #0]
	directionB = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	2b10      	cmp	r3, #16
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80011c2:	801a      	strh	r2, [r3, #0]
	directionC = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	2b10      	cmp	r3, #16
 80011d0:	bf0c      	ite	eq
 80011d2:	2301      	moveq	r3, #1
 80011d4:	2300      	movne	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80011dc:	801a      	strh	r2, [r3, #0]
	directionD = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim5);
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b10      	cmp	r3, #16
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80011f6:	801a      	strh	r2, [r3, #0]
//	counter = __HAL_TIM_GET_COUNTER(&htim4);
//
//	update_encoder(&enc_instance, &htim4);
//	encoder_position = enc_instance.position;
//	encoder_velocity = enc_instance.velocity;
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2000009c 	.word	0x2000009c
 8001208:	2000008c 	.word	0x2000008c
 800120c:	200000e4 	.word	0x200000e4
 8001210:	2000008e 	.word	0x2000008e
 8001214:	2000012c 	.word	0x2000012c
 8001218:	20000090 	.word	0x20000090
 800121c:	20000174 	.word	0x20000174
 8001220:	20000092 	.word	0x20000092
 8001224:	20000094 	.word	0x20000094
 8001228:	20000096 	.word	0x20000096
 800122c:	20000098 	.word	0x20000098
 8001230:	2000009a 	.word	0x2000009a

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	f2ad 7dfc 	subw	sp, sp, #2044	; 0x7fc
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123c:	f000 fe0a 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001240:	f000 f998 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f7ff ff06 	bl	8001054 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001248:	f000 fa66 	bl	8001718 <MX_TIM2_Init>
  MX_TIM3_Init();
 800124c:	f000 fab8 	bl	80017c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001250:	f000 fb0a 	bl	8001868 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001254:	f000 fb5c 	bl	8001910 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001258:	f000 fbae 	bl	80019b8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800125c:	213c      	movs	r1, #60	; 0x3c
 800125e:	48ba      	ldr	r0, [pc, #744]	; (8001548 <main+0x314>)
 8001260:	f001 ff1a 	bl	8003098 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001264:	213c      	movs	r1, #60	; 0x3c
 8001266:	48b9      	ldr	r0, [pc, #740]	; (800154c <main+0x318>)
 8001268:	f001 ff16 	bl	8003098 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800126c:	213c      	movs	r1, #60	; 0x3c
 800126e:	48b8      	ldr	r0, [pc, #736]	; (8001550 <main+0x31c>)
 8001270:	f001 ff12 	bl	8003098 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8001274:	213c      	movs	r1, #60	; 0x3c
 8001276:	48b7      	ldr	r0, [pc, #732]	; (8001554 <main+0x320>)
 8001278:	f001 ff0e 	bl	8003098 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);  // start the pwm md
 800127c:	2100      	movs	r1, #0
 800127e:	48b6      	ldr	r0, [pc, #728]	; (8001558 <main+0x324>)
 8001280:	f001 fdae 	bl	8002de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);  // start the pwm mc
 8001284:	2104      	movs	r1, #4
 8001286:	48b4      	ldr	r0, [pc, #720]	; (8001558 <main+0x324>)
 8001288:	f001 fdaa 	bl	8002de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);  // start the pwm mb
 800128c:	2108      	movs	r1, #8
 800128e:	48b2      	ldr	r0, [pc, #712]	; (8001558 <main+0x324>)
 8001290:	f001 fda6 	bl	8002de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);  // start the pwm ma
 8001294:	210c      	movs	r1, #12
 8001296:	48b0      	ldr	r0, [pc, #704]	; (8001558 <main+0x324>)
 8001298:	f001 fda2 	bl	8002de0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  float_t fre[500];
  // uint16_t period[500];
  float_t len = 500.0;
 800129c:	4baf      	ldr	r3, [pc, #700]	; (800155c <main+0x328>)
 800129e:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
  float_t fre_max = 500.0;
 80012a2:	4bae      	ldr	r3, [pc, #696]	; (800155c <main+0x328>)
 80012a4:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
  float_t fre_min = 0.0;
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
  float_t flexible = 4;
 80012b0:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80012b4:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0

  float_t deno;
  float_t melo;
  float_t delt = fre_max - fre_min;
 80012b8:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 80012bc:	f8d7 07e8 	ldr.w	r0, [r7, #2024]	; 0x7e8
 80012c0:	f7ff fbd2 	bl	8000a68 <__aeabi_fsub>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc

  float_t timer_freq = 1000000.0;
 80012ca:	4ba5      	ldr	r3, [pc, #660]	; (8001560 <main+0x32c>)
 80012cc:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8

  while (1)
  {
	  	// MD - 방향
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2101      	movs	r1, #1
 80012d4:	48a3      	ldr	r0, [pc, #652]	; (8001564 <main+0x330>)
 80012d6:	f001 f8e5 	bl	80024a4 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2102      	movs	r1, #2
 80012de:	48a1      	ldr	r0, [pc, #644]	; (8001564 <main+0x330>)
 80012e0:	f001 f8e0 	bl	80024a4 <HAL_GPIO_WritePin>
	  	// MC + 방향
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2120      	movs	r1, #32
 80012e8:	489f      	ldr	r0, [pc, #636]	; (8001568 <main+0x334>)
 80012ea:	f001 f8db 	bl	80024a4 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2110      	movs	r1, #16
 80012f2:	489d      	ldr	r0, [pc, #628]	; (8001568 <main+0x334>)
 80012f4:	f001 f8d6 	bl	80024a4 <HAL_GPIO_WritePin>
	  	// MB - 방향
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2110      	movs	r1, #16
 80012fc:	4899      	ldr	r0, [pc, #612]	; (8001564 <main+0x330>)
 80012fe:	f001 f8d1 	bl	80024a4 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2120      	movs	r1, #32
 8001306:	4897      	ldr	r0, [pc, #604]	; (8001564 <main+0x330>)
 8001308:	f001 f8cc 	bl	80024a4 <HAL_GPIO_WritePin>
	  	// MA + 방향
	  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2104      	movs	r1, #4
 8001310:	4896      	ldr	r0, [pc, #600]	; (800156c <main+0x338>)
 8001312:	f001 f8c7 	bl	80024a4 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131c:	4892      	ldr	r0, [pc, #584]	; (8001568 <main+0x334>)
 800131e:	f001 f8c1 	bl	80024a4 <HAL_GPIO_WritePin>

	  	for(int i=0; i<len; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8001328:	e0a0      	b.n	800146c <main+0x238>
	  	{
	  		melo = flexible * (i - len/2) / (len/2);
 800132a:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	; 0x7f4
 800132e:	f7ff fc51 	bl	8000bd4 <__aeabi_i2f>
 8001332:	4604      	mov	r4, r0
 8001334:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001338:	f8d7 07ec 	ldr.w	r0, [r7, #2028]	; 0x7ec
 800133c:	f7ff fd52 	bl	8000de4 <__aeabi_fdiv>
 8001340:	4603      	mov	r3, r0
 8001342:	4619      	mov	r1, r3
 8001344:	4620      	mov	r0, r4
 8001346:	f7ff fb8f 	bl	8000a68 <__aeabi_fsub>
 800134a:	4603      	mov	r3, r0
 800134c:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fc93 	bl	8000c7c <__aeabi_fmul>
 8001356:	4603      	mov	r3, r0
 8001358:	461c      	mov	r4, r3
 800135a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800135e:	f8d7 07ec 	ldr.w	r0, [r7, #2028]	; 0x7ec
 8001362:	f7ff fd3f 	bl	8000de4 <__aeabi_fdiv>
 8001366:	4603      	mov	r3, r0
 8001368:	4619      	mov	r1, r3
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff fd3a 	bl	8000de4 <__aeabi_fdiv>
 8001370:	4603      	mov	r3, r0
 8001372:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
	  		deno = 1.0 / (1+expf(-melo));
 8001376:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 800137a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fdd0 	bl	8003f24 <expf>
 8001384:	4603      	mov	r3, r0
 8001386:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fb6e 	bl	8000a6c <__addsf3>
 8001390:	4603      	mov	r3, r0
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8aa 	bl	80004ec <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	f04f 0000 	mov.w	r0, #0
 80013a0:	4973      	ldr	r1, [pc, #460]	; (8001570 <main+0x33c>)
 80013a2:	f7ff fa25 	bl	80007f0 <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fb07 	bl	80009c0 <__aeabi_d2f>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
	  		fre[i] = delt * deno + fre_min;
 80013b8:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	; 0x7d0
 80013bc:	f8d7 07dc 	ldr.w	r0, [r7, #2012]	; 0x7dc
 80013c0:	f7ff fc5c 	bl	8000c7c <__aeabi_fmul>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fb4e 	bl	8000a6c <__addsf3>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4619      	mov	r1, r3
 80013d4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80013d8:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80013dc:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  		// period[i] = (uint16_t)(timer_freq/fre[i]);

	  		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (int)fre[i]);
 80013e4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80013e8:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80013ec:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fe07 	bl	8001008 <__aeabi_f2iz>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b56      	ldr	r3, [pc, #344]	; (8001558 <main+0x324>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
	  		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (int)fre[i]);
 8001402:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001406:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 800140a:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 800140e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fdf8 	bl	8001008 <__aeabi_f2iz>
 8001418:	4602      	mov	r2, r0
 800141a:	4b4f      	ldr	r3, [pc, #316]	; (8001558 <main+0x324>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
	  		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (int)fre[i]);
 8001420:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001424:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8001428:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fde9 	bl	8001008 <__aeabi_f2iz>
 8001436:	4602      	mov	r2, r0
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <main+0x324>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	63da      	str	r2, [r3, #60]	; 0x3c
	  		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (int)fre[i]);
 800143e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001442:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8001446:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 800144a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fdda 	bl	8001008 <__aeabi_f2iz>
 8001454:	4602      	mov	r2, r0
 8001456:	4b40      	ldr	r3, [pc, #256]	; (8001558 <main+0x324>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	641a      	str	r2, [r3, #64]	; 0x40
	  		HAL_Delay(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f000 fd5b 	bl	8001f18 <HAL_Delay>
	  	for(int i=0; i<len; i++)
 8001462:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	; 0x7f4
 8001466:	3301      	adds	r3, #1
 8001468:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 800146c:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	; 0x7f4
 8001470:	f7ff fbb0 	bl	8000bd4 <__aeabi_i2f>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	f8d7 07ec 	ldr.w	r0, [r7, #2028]	; 0x7ec
 800147c:	f7ff fdba 	bl	8000ff4 <__aeabi_fcmpgt>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f af51 	bne.w	800132a <main+0xf6>
	  	}

	  	HAL_Delay(1000-1);
 8001488:	f240 30e7 	movw	r0, #999	; 0x3e7
 800148c:	f000 fd44 	bl	8001f18 <HAL_Delay>

	  	for(int i=len-1; i>=0; i--)
 8001490:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001494:	f8d7 07ec 	ldr.w	r0, [r7, #2028]	; 0x7ec
 8001498:	f7ff fae6 	bl	8000a68 <__aeabi_fsub>
 800149c:	4603      	mov	r3, r0
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fdb2 	bl	8001008 <__aeabi_f2iz>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
 80014aa:	e043      	b.n	8001534 <main+0x300>
	  	{
	  		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (int)fre[i]);
 80014ac:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80014b0:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80014b4:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	; 0x7f0
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fda3 	bl	8001008 <__aeabi_f2iz>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <main+0x324>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	635a      	str	r2, [r3, #52]	; 0x34
	  		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (int)fre[i]);
 80014ca:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80014ce:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80014d2:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	; 0x7f0
 80014d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fd94 	bl	8001008 <__aeabi_f2iz>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <main+0x324>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
	  		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (int)fre[i]);
 80014e8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80014ec:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80014f0:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	; 0x7f0
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd85 	bl	8001008 <__aeabi_f2iz>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <main+0x324>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c
	  		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (int)fre[i]);
 8001506:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800150a:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 800150e:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	; 0x7f0
 8001512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd76 	bl	8001008 <__aeabi_f2iz>
 800151c:	4602      	mov	r2, r0
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <main+0x324>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
	  		HAL_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f000 fcf7 	bl	8001f18 <HAL_Delay>
	  	for(int i=len-1; i>=0; i--)
 800152a:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800152e:	3b01      	subs	r3, #1
 8001530:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
 8001534:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8001538:	2b00      	cmp	r3, #0
 800153a:	dab7      	bge.n	80014ac <main+0x278>
	  	}

	  	HAL_Delay(1000-1);
 800153c:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001540:	f000 fcea 	bl	8001f18 <HAL_Delay>
	  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001544:	e6c4      	b.n	80012d0 <main+0x9c>
 8001546:	bf00      	nop
 8001548:	2000009c 	.word	0x2000009c
 800154c:	200000e4 	.word	0x200000e4
 8001550:	2000012c 	.word	0x2000012c
 8001554:	20000174 	.word	0x20000174
 8001558:	200001bc 	.word	0x200001bc
 800155c:	43fa0000 	.word	0x43fa0000
 8001560:	49742400 	.word	0x49742400
 8001564:	40010c00 	.word	0x40010c00
 8001568:	40011000 	.word	0x40011000
 800156c:	40011400 	.word	0x40011400
 8001570:	3ff00000 	.word	0x3ff00000

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b090      	sub	sp, #64	; 0x40
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	2228      	movs	r2, #40	; 0x28
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fcc6 	bl	8003f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a8:	2302      	movs	r3, #2
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0318 	add.w	r3, r7, #24
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 ff89 	bl	80024d4 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015c8:	f000 f819 	bl	80015fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2302      	movs	r3, #2
 80015d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2102      	movs	r1, #2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 f9f6 	bl	80029d8 <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015f2:	f000 f804 	bl	80015fe <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3740      	adds	r7, #64	; 0x40
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001602:	b672      	cpsid	i
}
 8001604:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001606:	e7fe      	b.n	8001606 <Error_Handler+0x8>

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_MspInit+0x5c>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <HAL_MspInit+0x5c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6193      	str	r3, [r2, #24]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x5c>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_MspInit+0x5c>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x60>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_MspInit+0x60>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <NMI_Handler+0x4>

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b2:	f000 fc15 	bl	8001ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <TIM2_IRQHandler+0x10>)
 80016c2:	f001 fd97 	bl	80031f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000009c 	.word	0x2000009c

080016d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <TIM3_IRQHandler+0x10>)
 80016d6:	f001 fd8d 	bl	80031f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200000e4 	.word	0x200000e4

080016e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM4_IRQHandler+0x10>)
 80016ea:	f001 fd83 	bl	80031f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000012c 	.word	0x2000012c

080016f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM5_IRQHandler+0x10>)
 80016fe:	f001 fd79 	bl	80031f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000174 	.word	0x20000174

0800170c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f002 fbf4 	bl	8003f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_TIM2_Init+0xa4>)
 8001736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_TIM2_Init+0xa4>)
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_TIM2_Init+0xa4>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_TIM2_Init+0xa4>)
 800174a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_TIM2_Init+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_TIM2_Init+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800175c:	2303      	movs	r3, #3
 800175e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001764:	2301      	movs	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001774:	2301      	movs	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	4619      	mov	r1, r3
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_TIM2_Init+0xa4>)
 8001788:	f001 fbe4 	bl	8002f54 <HAL_TIM_Encoder_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001792:	f7ff ff34 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_TIM2_Init+0xa4>)
 80017a4:	f002 fabc 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80017ae:	f7ff ff26 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3730      	adds	r7, #48	; 0x30
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000009c 	.word	0x2000009c

080017c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2224      	movs	r2, #36	; 0x24
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 fba0 	bl	8003f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017de:	4a21      	ldr	r2, [pc, #132]	; (8001864 <MX_TIM3_Init+0xa4>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_TIM3_Init+0xa0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001802:	2303      	movs	r3, #3
 8001804:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800180a:	2301      	movs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800181a:	2301      	movs	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_TIM3_Init+0xa0>)
 800182e:	f001 fb91 	bl	8002f54 <HAL_TIM_Encoder_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001838:	f7ff fee1 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM3_Init+0xa0>)
 800184a:	f002 fa69 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001854:	f7ff fed3 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3730      	adds	r7, #48	; 0x30
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200000e4 	.word	0x200000e4
 8001864:	40000400 	.word	0x40000400

08001868 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2224      	movs	r2, #36	; 0x24
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fb4c 	bl	8003f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <MX_TIM4_Init+0xa0>)
 8001886:	4a21      	ldr	r2, [pc, #132]	; (800190c <MX_TIM4_Init+0xa4>)
 8001888:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <MX_TIM4_Init+0xa0>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_TIM4_Init+0xa0>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <MX_TIM4_Init+0xa0>)
 8001898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_TIM4_Init+0xa0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <MX_TIM4_Init+0xa0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018aa:	2303      	movs	r3, #3
 80018ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018b2:	2301      	movs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018c2:	2301      	movs	r3, #1
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4619      	mov	r1, r3
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <MX_TIM4_Init+0xa0>)
 80018d6:	f001 fb3d 	bl	8002f54 <HAL_TIM_Encoder_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80018e0:	f7ff fe8d 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_TIM4_Init+0xa0>)
 80018f2:	f002 fa15 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80018fc:	f7ff fe7f 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000012c 	.word	0x2000012c
 800190c:	40000800 	.word	0x40000800

08001910 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f002 faf8 	bl	8003f14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <MX_TIM5_Init+0xa0>)
 800192e:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <MX_TIM5_Init+0xa4>)
 8001930:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_TIM5_Init+0xa0>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_TIM5_Init+0xa0>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_TIM5_Init+0xa0>)
 8001940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001944:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_TIM5_Init+0xa0>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_TIM5_Init+0xa0>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001952:	2303      	movs	r3, #3
 8001954:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800195a:	2301      	movs	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800196a:	2301      	movs	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_TIM5_Init+0xa0>)
 800197e:	f001 fae9 	bl	8002f54 <HAL_TIM_Encoder_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001988:	f7ff fe39 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM5_Init+0xa0>)
 800199a:	f002 f9c1 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80019a4:	f7ff fe2b 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3730      	adds	r7, #48	; 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000174 	.word	0x20000174
 80019b4:	40000c00 	.word	0x40000c00

080019b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b096      	sub	sp, #88	; 0x58
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2220      	movs	r2, #32
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fa8f 	bl	8003f14 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019f6:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <MX_TIM8_Init+0x184>)
 80019f8:	4a51      	ldr	r2, [pc, #324]	; (8001b40 <MX_TIM8_Init+0x188>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 80019fc:	4b4f      	ldr	r3, [pc, #316]	; (8001b3c <MX_TIM8_Init+0x184>)
 80019fe:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001a02:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a10:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a18:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a24:	4845      	ldr	r0, [pc, #276]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001a26:	f001 f933 	bl	8002c90 <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001a30:	f7ff fde5 	bl	80015fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a3e:	4619      	mov	r1, r3
 8001a40:	483e      	ldr	r0, [pc, #248]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001a42:	f001 fda1 	bl	8003588 <HAL_TIM_ConfigClockSource>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001a4c:	f7ff fdd7 	bl	80015fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a50:	483a      	ldr	r0, [pc, #232]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001a52:	f001 f96c 	bl	8002d2e <HAL_TIM_PWM_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001a5c:	f7ff fdcf 	bl	80015fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4833      	ldr	r0, [pc, #204]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001a70:	f002 f956 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8001a7a:	f7ff fdc0 	bl	80015fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7e:	2360      	movs	r3, #96	; 0x60
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4826      	ldr	r0, [pc, #152]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001aa4:	f001 fcae 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001aae:	f7ff fda6 	bl	80015fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4820      	ldr	r0, [pc, #128]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001abc:	f001 fca2 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001ac6:	f7ff fd9a 	bl	80015fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	2208      	movs	r2, #8
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481a      	ldr	r0, [pc, #104]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001ad4:	f001 fc96 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001ade:	f7ff fd8e 	bl	80015fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4814      	ldr	r0, [pc, #80]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001aec:	f001 fc8a 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001af6:	f7ff fd82 	bl	80015fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4807      	ldr	r0, [pc, #28]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001b1e:	f002 f96b 	bl	8003df8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM8_Init+0x174>
  {
    Error_Handler();
 8001b28:	f7ff fd69 	bl	80015fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b2c:	4803      	ldr	r0, [pc, #12]	; (8001b3c <MX_TIM8_Init+0x184>)
 8001b2e:	f000 f937 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001b32:	bf00      	nop
 8001b34:	3758      	adds	r7, #88	; 0x58
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200001bc 	.word	0x200001bc
 8001b40:	40013400 	.word	0x40013400

08001b44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b090      	sub	sp, #64	; 0x40
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b62:	d157      	bne.n	8001c14 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b64:	4b78      	ldr	r3, [pc, #480]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	4a77      	ldr	r2, [pc, #476]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	61d3      	str	r3, [r2, #28]
 8001b70:	4b75      	ldr	r3, [pc, #468]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b72      	ldr	r3, [pc, #456]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a71      	ldr	r2, [pc, #452]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a6b      	ldr	r2, [pc, #428]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b69      	ldr	r3, [pc, #420]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	623b      	str	r3, [r7, #32]
 8001baa:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4862      	ldr	r0, [pc, #392]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x208>)
 8001bc2:	f000 fadb 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	485d      	ldr	r0, [pc, #372]	; (8001d50 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001bda:	f000 facf 	bl	800217c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_TIM_Encoder_MspInit+0x210>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_TIM_Encoder_MspInit+0x210>)
 8001bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c00:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	201c      	movs	r0, #28
 8001c08:	f000 fa81 	bl	800210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c0c:	201c      	movs	r0, #28
 8001c0e:	f000 fa9a 	bl	8002146 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001c12:	e094      	b.n	8001d3e <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(tim_encoderHandle->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	; (8001d58 <HAL_TIM_Encoder_MspInit+0x214>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12c      	bne.n	8001c78 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a49      	ldr	r2, [pc, #292]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	4a43      	ldr	r2, [pc, #268]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6193      	str	r3, [r2, #24]
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c4e:	23c0      	movs	r3, #192	; 0xc0
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	483a      	ldr	r0, [pc, #232]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x208>)
 8001c62:	f000 fa8b 	bl	800217c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	201d      	movs	r0, #29
 8001c6c:	f000 fa4f 	bl	800210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c70:	201d      	movs	r0, #29
 8001c72:	f000 fa68 	bl	8002146 <HAL_NVIC_EnableIRQ>
}
 8001c76:	e062      	b.n	8001d3e <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a37      	ldr	r2, [pc, #220]	; (8001d5c <HAL_TIM_Encoder_MspInit+0x218>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12c      	bne.n	8001cdc <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c82:	4b31      	ldr	r3, [pc, #196]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a30      	ldr	r2, [pc, #192]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	4a2a      	ldr	r2, [pc, #168]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6193      	str	r3, [r2, #24]
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb2:	23c0      	movs	r3, #192	; 0xc0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4822      	ldr	r0, [pc, #136]	; (8001d50 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001cc6:	f000 fa59 	bl	800217c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	201e      	movs	r0, #30
 8001cd0:	f000 fa1d 	bl	800210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cd4:	201e      	movs	r0, #30
 8001cd6:	f000 fa36 	bl	8002146 <HAL_NVIC_EnableIRQ>
}
 8001cda:	e030      	b.n	8001d3e <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(tim_encoderHandle->Instance==TIM5)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_TIM_Encoder_MspInit+0x21c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d12b      	bne.n	8001d3e <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d16:	2303      	movs	r3, #3
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	4808      	ldr	r0, [pc, #32]	; (8001d4c <HAL_TIM_Encoder_MspInit+0x208>)
 8001d2a:	f000 fa27 	bl	800217c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2032      	movs	r0, #50	; 0x32
 8001d34:	f000 f9eb 	bl	800210e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d38:	2032      	movs	r0, #50	; 0x32
 8001d3a:	f000 fa04 	bl	8002146 <HAL_NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3740      	adds	r7, #64	; 0x40
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	40010c00 	.word	0x40010c00
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40000800 	.word	0x40000800
 8001d60:	40000c00 	.word	0x40000c00

08001d64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_TIM_Base_MspInit+0x34>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d10b      	bne.n	8001d8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_TIM_Base_MspInit+0x38>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_TIM_Base_MspInit+0x38>)
 8001d7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d80:	6193      	str	r3, [r2, #24]
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_TIM_Base_MspInit+0x38>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40013400 	.word	0x40013400
 8001d9c:	40021000 	.word	0x40021000

08001da0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM8)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_TIM_MspPostInit+0x5c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d118      	bne.n	8001df2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_TIM_MspPostInit+0x60>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_TIM_MspPostInit+0x60>)
 8001dc6:	f043 0310 	orr.w	r3, r3, #16
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_TIM_MspPostInit+0x60>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001dd8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <HAL_TIM_MspPostInit+0x64>)
 8001dee:	f000 f9c5 	bl	800217c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40013400 	.word	0x40013400
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40011000 	.word	0x40011000

08001e08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e08:	f7ff fc80 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e0c:	480b      	ldr	r0, [pc, #44]	; (8001e3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e0e:	490c      	ldr	r1, [pc, #48]	; (8001e40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e10:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e24:	4c09      	ldr	r4, [pc, #36]	; (8001e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e32:	f002 f84b 	bl	8003ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e36:	f7ff f9fd 	bl	8001234 <main>
  bx lr
 8001e3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e44:	08004204 	.word	0x08004204
  ldr r2, =_sbss
 8001e48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e4c:	20000208 	.word	0x20000208

08001e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_2_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_Init+0x28>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_Init+0x28>)
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f947 	bl	80020f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	f000 f808 	bl	8001e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff fbca 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x54>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f95f 	bl	8002162 <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00e      	b.n	8001ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d80a      	bhi.n	8001eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ebc:	f000 f927 	bl	800210e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_InitTick+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_IncTick+0x1c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_IncTick+0x20>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a03      	ldr	r2, [pc, #12]	; (8001f00 <HAL_IncTick+0x20>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20000204 	.word	0x20000204

08001f04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <HAL_GetTick+0x10>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000204 	.word	0x20000204

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fff0 	bl	8001f04 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f30:	d005      	beq.n	8001f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_Delay+0x44>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3e:	bf00      	nop
 8001f40:	f7ff ffe0 	bl	8001f04 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f7      	bhi.n	8001f40 <HAL_Delay+0x28>
  {
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000008 	.word	0x20000008

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4906      	ldr	r1, [pc, #24]	; (8001ff8 <__NVIC_EnableIRQ+0x34>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d301      	bcc.n	80020ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00f      	b.n	80020ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <SysTick_Config+0x40>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d2:	210f      	movs	r1, #15
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020d8:	f7ff ff90 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SysTick_Config+0x40>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <SysTick_Config+0x40>)
 80020e4:	2207      	movs	r2, #7
 80020e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	e000e010 	.word	0xe000e010

080020f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff2d 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210e:	b580      	push	{r7, lr}
 8002110:	b086      	sub	sp, #24
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002120:	f7ff ff42 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 8002124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	6978      	ldr	r0, [r7, #20]
 800212c:	f7ff ff90 	bl	8002050 <NVIC_EncodePriority>
 8002130:	4602      	mov	r2, r0
 8002132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff5f 	bl	8001ffc <__NVIC_SetPriority>
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff35 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffa2 	bl	80020b4 <SysTick_Config>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b08b      	sub	sp, #44	; 0x2c
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218e:	e179      	b.n	8002484 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002190:	2201      	movs	r2, #1
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f040 8168 	bne.w	800247e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a96      	ldr	r2, [pc, #600]	; (800240c <HAL_GPIO_Init+0x290>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d05e      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021b8:	4a94      	ldr	r2, [pc, #592]	; (800240c <HAL_GPIO_Init+0x290>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d875      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021be:	4a94      	ldr	r2, [pc, #592]	; (8002410 <HAL_GPIO_Init+0x294>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d058      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021c4:	4a92      	ldr	r2, [pc, #584]	; (8002410 <HAL_GPIO_Init+0x294>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d86f      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021ca:	4a92      	ldr	r2, [pc, #584]	; (8002414 <HAL_GPIO_Init+0x298>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d052      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021d0:	4a90      	ldr	r2, [pc, #576]	; (8002414 <HAL_GPIO_Init+0x298>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d869      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021d6:	4a90      	ldr	r2, [pc, #576]	; (8002418 <HAL_GPIO_Init+0x29c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d04c      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021dc:	4a8e      	ldr	r2, [pc, #568]	; (8002418 <HAL_GPIO_Init+0x29c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d863      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021e2:	4a8e      	ldr	r2, [pc, #568]	; (800241c <HAL_GPIO_Init+0x2a0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d046      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021e8:	4a8c      	ldr	r2, [pc, #560]	; (800241c <HAL_GPIO_Init+0x2a0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d85d      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021ee:	2b12      	cmp	r3, #18
 80021f0:	d82a      	bhi.n	8002248 <HAL_GPIO_Init+0xcc>
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d859      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <HAL_GPIO_Init+0x80>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	08002277 	.word	0x08002277
 8002200:	08002251 	.word	0x08002251
 8002204:	08002263 	.word	0x08002263
 8002208:	080022a5 	.word	0x080022a5
 800220c:	080022ab 	.word	0x080022ab
 8002210:	080022ab 	.word	0x080022ab
 8002214:	080022ab 	.word	0x080022ab
 8002218:	080022ab 	.word	0x080022ab
 800221c:	080022ab 	.word	0x080022ab
 8002220:	080022ab 	.word	0x080022ab
 8002224:	080022ab 	.word	0x080022ab
 8002228:	080022ab 	.word	0x080022ab
 800222c:	080022ab 	.word	0x080022ab
 8002230:	080022ab 	.word	0x080022ab
 8002234:	080022ab 	.word	0x080022ab
 8002238:	080022ab 	.word	0x080022ab
 800223c:	080022ab 	.word	0x080022ab
 8002240:	08002259 	.word	0x08002259
 8002244:	0800226d 	.word	0x0800226d
 8002248:	4a75      	ldr	r2, [pc, #468]	; (8002420 <HAL_GPIO_Init+0x2a4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800224e:	e02c      	b.n	80022aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e029      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	3304      	adds	r3, #4
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e024      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	3308      	adds	r3, #8
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e01f      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	330c      	adds	r3, #12
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e01a      	b.n	80022ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800227e:	2304      	movs	r3, #4
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e013      	b.n	80022ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800228c:	2308      	movs	r3, #8
 800228e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	611a      	str	r2, [r3, #16]
          break;
 8002296:	e009      	b.n	80022ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002298:	2308      	movs	r3, #8
 800229a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	615a      	str	r2, [r3, #20]
          break;
 80022a2:	e003      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
          break;
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x130>
          break;
 80022aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d801      	bhi.n	80022b6 <HAL_GPIO_Init+0x13a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	e001      	b.n	80022ba <HAL_GPIO_Init+0x13e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2bff      	cmp	r3, #255	; 0xff
 80022c0:	d802      	bhi.n	80022c8 <HAL_GPIO_Init+0x14c>
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_Init+0x152>
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	3b08      	subs	r3, #8
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	210f      	movs	r1, #15
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	6a39      	ldr	r1, [r7, #32]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	431a      	orrs	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80c1 	beq.w	800247e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022fc:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_GPIO_Init+0x2a8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a48      	ldr	r2, [pc, #288]	; (8002424 <HAL_GPIO_Init+0x2a8>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_GPIO_Init+0x2a8>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002314:	4a44      	ldr	r2, [pc, #272]	; (8002428 <HAL_GPIO_Init+0x2ac>)
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3c      	ldr	r2, [pc, #240]	; (800242c <HAL_GPIO_Init+0x2b0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d01f      	beq.n	8002380 <HAL_GPIO_Init+0x204>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <HAL_GPIO_Init+0x2b4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d019      	beq.n	800237c <HAL_GPIO_Init+0x200>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3a      	ldr	r2, [pc, #232]	; (8002434 <HAL_GPIO_Init+0x2b8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_GPIO_Init+0x1fc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a39      	ldr	r2, [pc, #228]	; (8002438 <HAL_GPIO_Init+0x2bc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00d      	beq.n	8002374 <HAL_GPIO_Init+0x1f8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a38      	ldr	r2, [pc, #224]	; (800243c <HAL_GPIO_Init+0x2c0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <HAL_GPIO_Init+0x1f4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a37      	ldr	r2, [pc, #220]	; (8002440 <HAL_GPIO_Init+0x2c4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_GPIO_Init+0x1f0>
 8002368:	2305      	movs	r3, #5
 800236a:	e00a      	b.n	8002382 <HAL_GPIO_Init+0x206>
 800236c:	2306      	movs	r3, #6
 800236e:	e008      	b.n	8002382 <HAL_GPIO_Init+0x206>
 8002370:	2304      	movs	r3, #4
 8002372:	e006      	b.n	8002382 <HAL_GPIO_Init+0x206>
 8002374:	2303      	movs	r3, #3
 8002376:	e004      	b.n	8002382 <HAL_GPIO_Init+0x206>
 8002378:	2302      	movs	r3, #2
 800237a:	e002      	b.n	8002382 <HAL_GPIO_Init+0x206>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_GPIO_Init+0x206>
 8002380:	2300      	movs	r3, #0
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	f002 0203 	and.w	r2, r2, #3
 8002388:	0092      	lsls	r2, r2, #2
 800238a:	4093      	lsls	r3, r2
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002392:	4925      	ldr	r1, [pc, #148]	; (8002428 <HAL_GPIO_Init+0x2ac>)
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	4924      	ldr	r1, [pc, #144]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4920      	ldr	r1, [pc, #128]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	491a      	ldr	r1, [pc, #104]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60cb      	str	r3, [r1, #12]
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	4916      	ldr	r1, [pc, #88]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d025      	beq.n	8002448 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4910      	ldr	r1, [pc, #64]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
 8002408:	e025      	b.n	8002456 <HAL_GPIO_Init+0x2da>
 800240a:	bf00      	nop
 800240c:	10320000 	.word	0x10320000
 8002410:	10310000 	.word	0x10310000
 8002414:	10220000 	.word	0x10220000
 8002418:	10210000 	.word	0x10210000
 800241c:	10120000 	.word	0x10120000
 8002420:	10110000 	.word	0x10110000
 8002424:	40021000 	.word	0x40021000
 8002428:	40010000 	.word	0x40010000
 800242c:	40010800 	.word	0x40010800
 8002430:	40010c00 	.word	0x40010c00
 8002434:	40011000 	.word	0x40011000
 8002438:	40011400 	.word	0x40011400
 800243c:	40011800 	.word	0x40011800
 8002440:	40011c00 	.word	0x40011c00
 8002444:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_GPIO_Init+0x324>)
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	43db      	mvns	r3, r3
 8002450:	4913      	ldr	r1, [pc, #76]	; (80024a0 <HAL_GPIO_Init+0x324>)
 8002452:	4013      	ands	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_GPIO_Init+0x324>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	490e      	ldr	r1, [pc, #56]	; (80024a0 <HAL_GPIO_Init+0x324>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
 800246e:	e006      	b.n	800247e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_GPIO_Init+0x324>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	43db      	mvns	r3, r3
 8002478:	4909      	ldr	r1, [pc, #36]	; (80024a0 <HAL_GPIO_Init+0x324>)
 800247a:	4013      	ands	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	3301      	adds	r3, #1
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	f47f ae7e 	bne.w	8002190 <HAL_GPIO_Init+0x14>
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	372c      	adds	r7, #44	; 0x2c
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40010400 	.word	0x40010400

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	611a      	str	r2, [r3, #16]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e272      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8087 	beq.w	8002602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f4:	4b92      	ldr	r3, [pc, #584]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d00c      	beq.n	800251a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002500:	4b8f      	ldr	r3, [pc, #572]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d112      	bne.n	8002532 <HAL_RCC_OscConfig+0x5e>
 800250c:	4b8c      	ldr	r3, [pc, #560]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d10b      	bne.n	8002532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251a:	4b89      	ldr	r3, [pc, #548]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d06c      	beq.n	8002600 <HAL_RCC_OscConfig+0x12c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d168      	bne.n	8002600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e24c      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x76>
 800253c:	4b80      	ldr	r3, [pc, #512]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a7f      	ldr	r2, [pc, #508]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e02e      	b.n	80025a8 <HAL_RCC_OscConfig+0xd4>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x98>
 8002552:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a7a      	ldr	r2, [pc, #488]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b78      	ldr	r3, [pc, #480]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a77      	ldr	r2, [pc, #476]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e01d      	b.n	80025a8 <HAL_RCC_OscConfig+0xd4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0xbc>
 8002576:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a71      	ldr	r2, [pc, #452]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6e      	ldr	r2, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0xd4>
 8002590:	4b6b      	ldr	r3, [pc, #428]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b68      	ldr	r3, [pc, #416]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a67      	ldr	r2, [pc, #412]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fca8 	bl	8001f04 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff fca4 	bl	8001f04 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e200      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe4>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fc94 	bl	8001f04 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff fc90 	bl	8001f04 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1ec      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x10c>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d063      	beq.n	80026d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260e:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	d11c      	bne.n	8002660 <HAL_RCC_OscConfig+0x18c>
 8002626:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d116      	bne.n	8002660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_RCC_OscConfig+0x176>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e1c0      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4939      	ldr	r1, [pc, #228]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	e03a      	b.n	80026d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCC_OscConfig+0x270>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7ff fc49 	bl	8001f04 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002676:	f7ff fc45 	bl	8001f04 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1a1      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4927      	ldr	r1, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
 80026a8:	e015      	b.n	80026d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026aa:	4b26      	ldr	r3, [pc, #152]	; (8002744 <HAL_RCC_OscConfig+0x270>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fc28 	bl	8001f04 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b8:	f7ff fc24 	bl	8001f04 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e180      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d03a      	beq.n	8002758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d019      	beq.n	800271e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_RCC_OscConfig+0x274>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f0:	f7ff fc08 	bl	8001f04 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7ff fc04 	bl	8001f04 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e160      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_RCC_OscConfig+0x26c>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002716:	2001      	movs	r0, #1
 8002718:	f000 fa9c 	bl	8002c54 <RCC_Delay>
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_RCC_OscConfig+0x274>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7ff fbee 	bl	8001f04 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272a:	e00f      	b.n	800274c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272c:	f7ff fbea 	bl	8001f04 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d908      	bls.n	800274c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e146      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	42420000 	.word	0x42420000
 8002748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	4b92      	ldr	r3, [pc, #584]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e9      	bne.n	800272c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a6 	beq.w	80028b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a87      	ldr	r2, [pc, #540]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	61d3      	str	r3, [r2, #28]
 8002782:	4b85      	ldr	r3, [pc, #532]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x4c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x4c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7e      	ldr	r2, [pc, #504]	; (800299c <HAL_RCC_OscConfig+0x4c8>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7ff fbab 	bl	8001f04 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7ff fba7 	bl	8001f04 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e103      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x4c8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x312>
 80027d8:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a6e      	ldr	r2, [pc, #440]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	e02d      	b.n	8002842 <HAL_RCC_OscConfig+0x36e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x334>
 80027ee:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a69      	ldr	r2, [pc, #420]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a66      	ldr	r2, [pc, #408]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	e01c      	b.n	8002842 <HAL_RCC_OscConfig+0x36e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x356>
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a60      	ldr	r2, [pc, #384]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a5d      	ldr	r2, [pc, #372]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x36e>
 800282a:	4b5b      	ldr	r3, [pc, #364]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a5a      	ldr	r2, [pc, #360]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6213      	str	r3, [r2, #32]
 8002836:	4b58      	ldr	r3, [pc, #352]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a57      	ldr	r2, [pc, #348]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d015      	beq.n	8002876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7ff fb5b 	bl	8001f04 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7ff fb57 	bl	8001f04 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0b1      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	4b4b      	ldr	r3, [pc, #300]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ee      	beq.n	8002852 <HAL_RCC_OscConfig+0x37e>
 8002874:	e014      	b.n	80028a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7ff fb45 	bl	8001f04 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7ff fb41 	bl	8001f04 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e09b      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8087 	beq.w	80029ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028bc:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d061      	beq.n	800298c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d146      	bne.n	800295e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7ff fb15 	bl	8001f04 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff fb11 	bl	8001f04 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e06d      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f0:	4b29      	ldr	r3, [pc, #164]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002904:	d108      	bne.n	8002918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4921      	ldr	r1, [pc, #132]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002918:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a19      	ldr	r1, [r3, #32]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	430b      	orrs	r3, r1
 800292a:	491b      	ldr	r1, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x4cc>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7ff fae5 	bl	8001f04 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7ff fae1 	bl	8001f04 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e03d      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x46a>
 800295c:	e035      	b.n	80029ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_RCC_OscConfig+0x4cc>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7ff face 	bl	8001f04 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7ff faca 	bl	8001f04 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e026      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x498>
 800298a:	e01e      	b.n	80029ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e019      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
 8002998:	40021000 	.word	0x40021000
 800299c:	40007000 	.word	0x40007000
 80029a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_OscConfig+0x500>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0d0      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b6a      	ldr	r3, [pc, #424]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4965      	ldr	r1, [pc, #404]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b63      	ldr	r3, [pc, #396]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b8      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	494d      	ldr	r1, [pc, #308]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d040      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d115      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a96:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e073      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e06b      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4936      	ldr	r1, [pc, #216]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7ff fa1c 	bl	8001f04 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7ff fa18 	bl	8001f04 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e053      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 020c 	and.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1eb      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d210      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 0207 	bic.w	r2, r3, #7
 8002b0e:	4922      	ldr	r1, [pc, #136]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e032      	b.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4916      	ldr	r1, [pc, #88]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b66:	f000 f821 	bl	8002bac <HAL_RCC_GetSysClockFreq>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	490a      	ldr	r1, [pc, #40]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b78:	5ccb      	ldrb	r3, [r1, r3]
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f97a 	bl	8001e80 <HAL_InitTick>

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	080041c0 	.word	0x080041c0
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	20000004 	.word	0x20000004

08002bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x30>
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bda:	e027      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bde:	613b      	str	r3, [r7, #16]
      break;
 8002be0:	e027      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	0c9b      	lsrs	r3, r3, #18
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bec:	5cd3      	ldrb	r3, [r2, r3]
 8002bee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	0c5b      	lsrs	r3, r3, #17
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0e:	fb03 f202 	mul.w	r2, r3, r2
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e004      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	613b      	str	r3, [r7, #16]
      break;
 8002c2a:	e002      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2e:	613b      	str	r3, [r7, #16]
      break;
 8002c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c32:	693b      	ldr	r3, [r7, #16]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	007a1200 	.word	0x007a1200
 8002c48:	080041d0 	.word	0x080041d0
 8002c4c:	080041e0 	.word	0x080041e0
 8002c50:	003d0900 	.word	0x003d0900

08002c54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <RCC_Delay+0x34>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <RCC_Delay+0x38>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0a5b      	lsrs	r3, r3, #9
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c70:	bf00      	nop
  }
  while (Delay --);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1e5a      	subs	r2, r3, #1
 8002c76:	60fa      	str	r2, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f9      	bne.n	8002c70 <RCC_Delay+0x1c>
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	10624dd3 	.word	0x10624dd3

08002c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e041      	b.n	8002d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff f854 	bl	8001d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	f000 fd46 	bl	8003760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e041      	b.n	8002dc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f839 	bl	8002dcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f000 fcf7 	bl	8003760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_TIM_PWM_Start+0x24>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e022      	b.n	8002e4a <HAL_TIM_PWM_Start+0x6a>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d109      	bne.n	8002e1e <HAL_TIM_PWM_Start+0x3e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	bf14      	ite	ne
 8002e16:	2301      	movne	r3, #1
 8002e18:	2300      	moveq	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	e015      	b.n	8002e4a <HAL_TIM_PWM_Start+0x6a>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d109      	bne.n	8002e38 <HAL_TIM_PWM_Start+0x58>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e008      	b.n	8002e4a <HAL_TIM_PWM_Start+0x6a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e072      	b.n	8002f38 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Start+0x82>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e60:	e013      	b.n	8002e8a <HAL_TIM_PWM_Start+0xaa>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x92>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	e00b      	b.n	8002e8a <HAL_TIM_PWM_Start+0xaa>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d104      	bne.n	8002e82 <HAL_TIM_PWM_Start+0xa2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e80:	e003      	b.n	8002e8a <HAL_TIM_PWM_Start+0xaa>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 ff20 	bl	8003cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_TIM_PWM_Start+0x160>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_TIM_PWM_Start+0xcc>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_TIM_PWM_Start+0x164>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIM_PWM_Start+0xd0>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_TIM_PWM_Start+0xd2>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_TIM_PWM_Start+0x160>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d018      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x122>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_TIM_PWM_Start+0x164>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x122>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d00e      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x122>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_TIM_PWM_Start+0x168>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x122>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <HAL_TIM_PWM_Start+0x16c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_TIM_PWM_Start+0x122>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_TIM_PWM_Start+0x170>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d111      	bne.n	8002f26 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b06      	cmp	r3, #6
 8002f12:	d010      	beq.n	8002f36 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f24:	e007      	b.n	8002f36 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40013400 	.word	0x40013400
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800
 8002f50:	40000c00 	.word	0x40000c00

08002f54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e093      	b.n	8003090 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fe fde1 	bl	8001b44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f98:	f023 0307 	bic.w	r3, r3, #7
 8002f9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f000 fbd9 	bl	8003760 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ff4:	f023 030c 	bic.w	r3, r3, #12
 8002ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	4313      	orrs	r3, r2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	011a      	lsls	r2, r3, #4
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	031b      	lsls	r3, r3, #12
 8003024:	4313      	orrs	r3, r2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003032:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	4313      	orrs	r3, r2
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d110      	bne.n	80030ea <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d102      	bne.n	80030d4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80030ce:	7b7b      	ldrb	r3, [r7, #13]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e089      	b.n	80031ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e8:	e031      	b.n	800314e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d110      	bne.n	8003112 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030f0:	7bbb      	ldrb	r3, [r7, #14]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d102      	bne.n	80030fc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030f6:	7b3b      	ldrb	r3, [r7, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d001      	beq.n	8003100 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e075      	b.n	80031ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003110:	e01d      	b.n	800314e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d108      	bne.n	800312a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003118:	7bbb      	ldrb	r3, [r7, #14]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800311e:	7b7b      	ldrb	r3, [r7, #13]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d102      	bne.n	800312a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003124:	7b3b      	ldrb	r3, [r7, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e05e      	b.n	80031ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b04      	cmp	r3, #4
 8003158:	d010      	beq.n	800317c <HAL_TIM_Encoder_Start_IT+0xe4>
 800315a:	e01f      	b.n	800319c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fdb7 	bl	8003cd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0202 	orr.w	r2, r2, #2
 8003178:	60da      	str	r2, [r3, #12]
      break;
 800317a:	e02e      	b.n	80031da <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2201      	movs	r2, #1
 8003182:	2104      	movs	r1, #4
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fda7 	bl	8003cd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0204 	orr.w	r2, r2, #4
 8003198:	60da      	str	r2, [r3, #12]
      break;
 800319a:	e01e      	b.n	80031da <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2201      	movs	r2, #1
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fd97 	bl	8003cd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	2104      	movs	r1, #4
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fd90 	bl	8003cd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0202 	orr.w	r2, r2, #2
 80031c6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0204 	orr.w	r2, r2, #4
 80031d6:	60da      	str	r2, [r3, #12]
      break;
 80031d8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b02      	cmp	r3, #2
 8003208:	d122      	bne.n	8003250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	d11b      	bne.n	8003250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0202 	mvn.w	r2, #2
 8003220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa76 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fa69 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa78 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b04      	cmp	r3, #4
 800325c:	d122      	bne.n	80032a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b04      	cmp	r3, #4
 800326a:	d11b      	bne.n	80032a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0204 	mvn.w	r2, #4
 8003274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fa4c 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 8003290:	e005      	b.n	800329e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa3f 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fa4e 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d122      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d11b      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0208 	mvn.w	r2, #8
 80032c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2204      	movs	r2, #4
 80032ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fa22 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 80032e4:	e005      	b.n	80032f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fa15 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fa24 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b10      	cmp	r3, #16
 8003304:	d122      	bne.n	800334c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b10      	cmp	r3, #16
 8003312:	d11b      	bne.n	800334c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0210 	mvn.w	r2, #16
 800331c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2208      	movs	r2, #8
 8003322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f9f8 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f9eb 	bl	8003716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f9fa 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0201 	mvn.w	r2, #1
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fef0 	bl	8001158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fd84 	bl	8003eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9be 	bl	800374c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0220 	mvn.w	r2, #32
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fd4f 	bl	8003e9a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800341e:	2302      	movs	r3, #2
 8003420:	e0ae      	b.n	8003580 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b0c      	cmp	r3, #12
 800342e:	f200 809f 	bhi.w	8003570 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	0800346d 	.word	0x0800346d
 800343c:	08003571 	.word	0x08003571
 8003440:	08003571 	.word	0x08003571
 8003444:	08003571 	.word	0x08003571
 8003448:	080034ad 	.word	0x080034ad
 800344c:	08003571 	.word	0x08003571
 8003450:	08003571 	.word	0x08003571
 8003454:	08003571 	.word	0x08003571
 8003458:	080034ef 	.word	0x080034ef
 800345c:	08003571 	.word	0x08003571
 8003460:	08003571 	.word	0x08003571
 8003464:	08003571 	.word	0x08003571
 8003468:	0800352f 	.word	0x0800352f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f9ee 	bl	8003854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0208 	orr.w	r2, r2, #8
 8003486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6999      	ldr	r1, [r3, #24]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	619a      	str	r2, [r3, #24]
      break;
 80034aa:	e064      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fa3e 	bl	8003934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6999      	ldr	r1, [r3, #24]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	619a      	str	r2, [r3, #24]
      break;
 80034ec:	e043      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fa91 	bl	8003a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0208 	orr.w	r2, r2, #8
 8003508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0204 	bic.w	r2, r2, #4
 8003518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69d9      	ldr	r1, [r3, #28]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	61da      	str	r2, [r3, #28]
      break;
 800352c:	e023      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fae5 	bl	8003b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69d9      	ldr	r1, [r3, #28]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	021a      	lsls	r2, r3, #8
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	61da      	str	r2, [r3, #28]
      break;
 800356e:	e002      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
      break;
 8003574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800357e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0b4      	b.n	800370e <HAL_TIM_ConfigClockSource+0x186>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035dc:	d03e      	beq.n	800365c <HAL_TIM_ConfigClockSource+0xd4>
 80035de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e2:	f200 8087 	bhi.w	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	f000 8086 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x172>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	d87f      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035f4:	2b70      	cmp	r3, #112	; 0x70
 80035f6:	d01a      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xa6>
 80035f8:	2b70      	cmp	r3, #112	; 0x70
 80035fa:	d87b      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b60      	cmp	r3, #96	; 0x60
 80035fe:	d050      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003600:	2b60      	cmp	r3, #96	; 0x60
 8003602:	d877      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b50      	cmp	r3, #80	; 0x50
 8003606:	d03c      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0xfa>
 8003608:	2b50      	cmp	r3, #80	; 0x50
 800360a:	d873      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d058      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d86f      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b30      	cmp	r3, #48	; 0x30
 8003616:	d064      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003618:	2b30      	cmp	r3, #48	; 0x30
 800361a:	d86b      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b20      	cmp	r3, #32
 800361e:	d060      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003620:	2b20      	cmp	r3, #32
 8003622:	d867      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d05c      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	2b10      	cmp	r3, #16
 800362a:	d05a      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 800362c:	e062      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f000 fb2c 	bl	8003c9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	609a      	str	r2, [r3, #8]
      break;
 800365a:	e04f      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f000 fb15 	bl	8003c9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800367e:	609a      	str	r2, [r3, #8]
      break;
 8003680:	e03c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	461a      	mov	r2, r3
 8003690:	f000 fa8c 	bl	8003bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2150      	movs	r1, #80	; 0x50
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fae3 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80036a0:	e02c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f000 faaa 	bl	8003c08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2160      	movs	r1, #96	; 0x60
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fad3 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80036c0:	e01c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f000 fa6c 	bl	8003bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2140      	movs	r1, #64	; 0x40
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fac3 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80036e0:	e00c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f000 faba 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80036f2:	e003      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e000      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
	...

08003760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a33      	ldr	r2, [pc, #204]	; (8003840 <TIM_Base_SetConfig+0xe0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a32      	ldr	r2, [pc, #200]	; (8003844 <TIM_Base_SetConfig+0xe4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00f      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d00b      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a2f      	ldr	r2, [pc, #188]	; (8003848 <TIM_Base_SetConfig+0xe8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a2e      	ldr	r2, [pc, #184]	; (800384c <TIM_Base_SetConfig+0xec>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a2d      	ldr	r2, [pc, #180]	; (8003850 <TIM_Base_SetConfig+0xf0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d108      	bne.n	80037b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a22      	ldr	r2, [pc, #136]	; (8003840 <TIM_Base_SetConfig+0xe0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <TIM_Base_SetConfig+0x82>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a21      	ldr	r2, [pc, #132]	; (8003844 <TIM_Base_SetConfig+0xe4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00f      	beq.n	80037e2 <TIM_Base_SetConfig+0x82>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d00b      	beq.n	80037e2 <TIM_Base_SetConfig+0x82>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <TIM_Base_SetConfig+0xe8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <TIM_Base_SetConfig+0x82>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <TIM_Base_SetConfig+0xec>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_Base_SetConfig+0x82>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <TIM_Base_SetConfig+0xf0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a09      	ldr	r2, [pc, #36]	; (8003840 <TIM_Base_SetConfig+0xe0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_Base_SetConfig+0xc8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <TIM_Base_SetConfig+0xe4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d103      	bne.n	8003830 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	615a      	str	r2, [r3, #20]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40013400 	.word	0x40013400
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00

08003854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f023 0201 	bic.w	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 0302 	bic.w	r3, r3, #2
 800389c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a20      	ldr	r2, [pc, #128]	; (800392c <TIM_OC1_SetConfig+0xd8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_OC1_SetConfig+0x64>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <TIM_OC1_SetConfig+0xdc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10c      	bne.n	80038d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0308 	bic.w	r3, r3, #8
 80038be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 0304 	bic.w	r3, r3, #4
 80038d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a15      	ldr	r2, [pc, #84]	; (800392c <TIM_OC1_SetConfig+0xd8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_OC1_SetConfig+0x8e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <TIM_OC1_SetConfig+0xdc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d111      	bne.n	8003906 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	621a      	str	r2, [r3, #32]
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40013400 	.word	0x40013400

08003934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f023 0210 	bic.w	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f023 0320 	bic.w	r3, r3, #32
 800397e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a21      	ldr	r2, [pc, #132]	; (8003a14 <TIM_OC2_SetConfig+0xe0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_OC2_SetConfig+0x68>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a20      	ldr	r2, [pc, #128]	; (8003a18 <TIM_OC2_SetConfig+0xe4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d10d      	bne.n	80039b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a16      	ldr	r2, [pc, #88]	; (8003a14 <TIM_OC2_SetConfig+0xe0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_OC2_SetConfig+0x94>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <TIM_OC2_SetConfig+0xe4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d113      	bne.n	80039f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40013400 	.word	0x40013400

08003a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a21      	ldr	r2, [pc, #132]	; (8003afc <TIM_OC3_SetConfig+0xe0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_OC3_SetConfig+0x66>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a20      	ldr	r2, [pc, #128]	; (8003b00 <TIM_OC3_SetConfig+0xe4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10d      	bne.n	8003a9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <TIM_OC3_SetConfig+0xe0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_OC3_SetConfig+0x92>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <TIM_OC3_SetConfig+0xe4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d113      	bne.n	8003ad6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	621a      	str	r2, [r3, #32]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40013400 	.word	0x40013400

08003b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	031b      	lsls	r3, r3, #12
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <TIM_OC4_SetConfig+0xa0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_OC4_SetConfig+0x68>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <TIM_OC4_SetConfig+0xa4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d109      	bne.n	8003b80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40013400 	.word	0x40013400

08003bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0201 	bic.w	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 030a 	bic.w	r3, r3, #10
 8003be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0210 	bic.w	r2, r3, #16
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	031b      	lsls	r3, r3, #12
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	621a      	str	r2, [r3, #32]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f043 0307 	orr.w	r3, r3, #7
 8003c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b087      	sub	sp, #28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	021a      	lsls	r2, r3, #8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	609a      	str	r2, [r3, #8]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2201      	movs	r2, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e050      	b.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d018      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a19      	ldr	r2, [pc, #100]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d00e      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a15      	ldr	r2, [pc, #84]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10c      	bne.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40013400 	.word	0x40013400
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800
 8003df4:	40000c00 	.word	0x40000c00

08003df8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e03d      	b.n	8003e90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr

08003e9a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
	...

08003ec0 <__errno>:
 8003ec0:	4b01      	ldr	r3, [pc, #4]	; (8003ec8 <__errno+0x8>)
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	2000000c 	.word	0x2000000c

08003ecc <__libc_init_array>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	2600      	movs	r6, #0
 8003ed0:	4d0c      	ldr	r5, [pc, #48]	; (8003f04 <__libc_init_array+0x38>)
 8003ed2:	4c0d      	ldr	r4, [pc, #52]	; (8003f08 <__libc_init_array+0x3c>)
 8003ed4:	1b64      	subs	r4, r4, r5
 8003ed6:	10a4      	asrs	r4, r4, #2
 8003ed8:	42a6      	cmp	r6, r4
 8003eda:	d109      	bne.n	8003ef0 <__libc_init_array+0x24>
 8003edc:	f000 f964 	bl	80041a8 <_init>
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	4d0a      	ldr	r5, [pc, #40]	; (8003f0c <__libc_init_array+0x40>)
 8003ee4:	4c0a      	ldr	r4, [pc, #40]	; (8003f10 <__libc_init_array+0x44>)
 8003ee6:	1b64      	subs	r4, r4, r5
 8003ee8:	10a4      	asrs	r4, r4, #2
 8003eea:	42a6      	cmp	r6, r4
 8003eec:	d105      	bne.n	8003efa <__libc_init_array+0x2e>
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef4:	4798      	blx	r3
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	e7ee      	b.n	8003ed8 <__libc_init_array+0xc>
 8003efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efe:	4798      	blx	r3
 8003f00:	3601      	adds	r6, #1
 8003f02:	e7f2      	b.n	8003eea <__libc_init_array+0x1e>
 8003f04:	080041fc 	.word	0x080041fc
 8003f08:	080041fc 	.word	0x080041fc
 8003f0c:	080041fc 	.word	0x080041fc
 8003f10:	08004200 	.word	0x08004200

08003f14 <memset>:
 8003f14:	4603      	mov	r3, r0
 8003f16:	4402      	add	r2, r0
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d100      	bne.n	8003f1e <memset+0xa>
 8003f1c:	4770      	bx	lr
 8003f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f22:	e7f9      	b.n	8003f18 <memset+0x4>

08003f24 <expf>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4605      	mov	r5, r0
 8003f28:	f000 f822 	bl	8003f70 <__ieee754_expf>
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f000 f931 	bl	8004196 <finitef>
 8003f34:	b150      	cbz	r0, 8003f4c <expf+0x28>
 8003f36:	4628      	mov	r0, r5
 8003f38:	490b      	ldr	r1, [pc, #44]	; (8003f68 <expf+0x44>)
 8003f3a:	f7fd f85b 	bl	8000ff4 <__aeabi_fcmpgt>
 8003f3e:	b138      	cbz	r0, 8003f50 <expf+0x2c>
 8003f40:	f7ff ffbe 	bl	8003ec0 <__errno>
 8003f44:	2322      	movs	r3, #34	; 0x22
 8003f46:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 8003f4a:	6003      	str	r3, [r0, #0]
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	4628      	mov	r0, r5
 8003f52:	4906      	ldr	r1, [pc, #24]	; (8003f6c <expf+0x48>)
 8003f54:	f7fd f830 	bl	8000fb8 <__aeabi_fcmplt>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d0f7      	beq.n	8003f4c <expf+0x28>
 8003f5c:	f7ff ffb0 	bl	8003ec0 <__errno>
 8003f60:	2322      	movs	r3, #34	; 0x22
 8003f62:	2400      	movs	r4, #0
 8003f64:	6003      	str	r3, [r0, #0]
 8003f66:	e7f1      	b.n	8003f4c <expf+0x28>
 8003f68:	42b17180 	.word	0x42b17180
 8003f6c:	c2cff1b5 	.word	0xc2cff1b5

08003f70 <__ieee754_expf>:
 8003f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f74:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003f78:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	d904      	bls.n	8003f8a <__ieee754_expf+0x1a>
 8003f80:	4601      	mov	r1, r0
 8003f82:	f7fc fd73 	bl	8000a6c <__addsf3>
 8003f86:	4604      	mov	r4, r0
 8003f88:	e004      	b.n	8003f94 <__ieee754_expf+0x24>
 8003f8a:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 8003f8e:	d104      	bne.n	8003f9a <__ieee754_expf+0x2a>
 8003f90:	b106      	cbz	r6, 8003f94 <__ieee754_expf+0x24>
 8003f92:	2400      	movs	r4, #0
 8003f94:	4620      	mov	r0, r4
 8003f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f9a:	4960      	ldr	r1, [pc, #384]	; (800411c <__ieee754_expf+0x1ac>)
 8003f9c:	4288      	cmp	r0, r1
 8003f9e:	dd04      	ble.n	8003faa <__ieee754_expf+0x3a>
 8003fa0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f000 b8f2 	b.w	800418e <__math_oflowf>
 8003faa:	2800      	cmp	r0, #0
 8003fac:	da07      	bge.n	8003fbe <__ieee754_expf+0x4e>
 8003fae:	4a5c      	ldr	r2, [pc, #368]	; (8004120 <__ieee754_expf+0x1b0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d904      	bls.n	8003fbe <__ieee754_expf+0x4e>
 8003fb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f000 b8e4 	b.w	8004186 <__math_uflowf>
 8003fbe:	4a59      	ldr	r2, [pc, #356]	; (8004124 <__ieee754_expf+0x1b4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d971      	bls.n	80040a8 <__ieee754_expf+0x138>
 8003fc4:	4a58      	ldr	r2, [pc, #352]	; (8004128 <__ieee754_expf+0x1b8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d851      	bhi.n	800406e <__ieee754_expf+0xfe>
 8003fca:	4b58      	ldr	r3, [pc, #352]	; (800412c <__ieee754_expf+0x1bc>)
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8003fd2:	f7fc fd49 	bl	8000a68 <__aeabi_fsub>
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	4b55      	ldr	r3, [pc, #340]	; (8004130 <__ieee754_expf+0x1c0>)
 8003fda:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8003fde:	f1c6 0301 	rsb	r3, r6, #1
 8003fe2:	eba3 0906 	sub.w	r9, r3, r6
 8003fe6:	4639      	mov	r1, r7
 8003fe8:	4628      	mov	r0, r5
 8003fea:	f7fc fd3d 	bl	8000a68 <__aeabi_fsub>
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7fc fe42 	bl	8000c7c <__aeabi_fmul>
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	494e      	ldr	r1, [pc, #312]	; (8004134 <__ieee754_expf+0x1c4>)
 8003ffc:	f7fc fe3e 	bl	8000c7c <__aeabi_fmul>
 8004000:	494d      	ldr	r1, [pc, #308]	; (8004138 <__ieee754_expf+0x1c8>)
 8004002:	f7fc fd31 	bl	8000a68 <__aeabi_fsub>
 8004006:	4631      	mov	r1, r6
 8004008:	f7fc fe38 	bl	8000c7c <__aeabi_fmul>
 800400c:	494b      	ldr	r1, [pc, #300]	; (800413c <__ieee754_expf+0x1cc>)
 800400e:	f7fc fd2d 	bl	8000a6c <__addsf3>
 8004012:	4631      	mov	r1, r6
 8004014:	f7fc fe32 	bl	8000c7c <__aeabi_fmul>
 8004018:	4949      	ldr	r1, [pc, #292]	; (8004140 <__ieee754_expf+0x1d0>)
 800401a:	f7fc fd25 	bl	8000a68 <__aeabi_fsub>
 800401e:	4631      	mov	r1, r6
 8004020:	f7fc fe2c 	bl	8000c7c <__aeabi_fmul>
 8004024:	4947      	ldr	r1, [pc, #284]	; (8004144 <__ieee754_expf+0x1d4>)
 8004026:	f7fc fd21 	bl	8000a6c <__addsf3>
 800402a:	4631      	mov	r1, r6
 800402c:	f7fc fe26 	bl	8000c7c <__aeabi_fmul>
 8004030:	4601      	mov	r1, r0
 8004032:	4620      	mov	r0, r4
 8004034:	f7fc fd18 	bl	8000a68 <__aeabi_fsub>
 8004038:	4601      	mov	r1, r0
 800403a:	4680      	mov	r8, r0
 800403c:	4620      	mov	r0, r4
 800403e:	f7fc fe1d 	bl	8000c7c <__aeabi_fmul>
 8004042:	4606      	mov	r6, r0
 8004044:	f1b9 0f00 	cmp.w	r9, #0
 8004048:	d143      	bne.n	80040d2 <__ieee754_expf+0x162>
 800404a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800404e:	4640      	mov	r0, r8
 8004050:	f7fc fd0a 	bl	8000a68 <__aeabi_fsub>
 8004054:	4601      	mov	r1, r0
 8004056:	4630      	mov	r0, r6
 8004058:	f7fc fec4 	bl	8000de4 <__aeabi_fdiv>
 800405c:	4621      	mov	r1, r4
 800405e:	f7fc fd03 	bl	8000a68 <__aeabi_fsub>
 8004062:	4601      	mov	r1, r0
 8004064:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004068:	f7fc fcfe 	bl	8000a68 <__aeabi_fsub>
 800406c:	e78b      	b.n	8003f86 <__ieee754_expf+0x16>
 800406e:	4936      	ldr	r1, [pc, #216]	; (8004148 <__ieee754_expf+0x1d8>)
 8004070:	4620      	mov	r0, r4
 8004072:	f7fc fe03 	bl	8000c7c <__aeabi_fmul>
 8004076:	4b35      	ldr	r3, [pc, #212]	; (800414c <__ieee754_expf+0x1dc>)
 8004078:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800407c:	f7fc fcf6 	bl	8000a6c <__addsf3>
 8004080:	f7fc ffc2 	bl	8001008 <__aeabi_f2iz>
 8004084:	4681      	mov	r9, r0
 8004086:	f7fc fda5 	bl	8000bd4 <__aeabi_i2f>
 800408a:	4931      	ldr	r1, [pc, #196]	; (8004150 <__ieee754_expf+0x1e0>)
 800408c:	4606      	mov	r6, r0
 800408e:	f7fc fdf5 	bl	8000c7c <__aeabi_fmul>
 8004092:	4601      	mov	r1, r0
 8004094:	4620      	mov	r0, r4
 8004096:	f7fc fce7 	bl	8000a68 <__aeabi_fsub>
 800409a:	492e      	ldr	r1, [pc, #184]	; (8004154 <__ieee754_expf+0x1e4>)
 800409c:	4605      	mov	r5, r0
 800409e:	4630      	mov	r0, r6
 80040a0:	f7fc fdec 	bl	8000c7c <__aeabi_fmul>
 80040a4:	4607      	mov	r7, r0
 80040a6:	e79e      	b.n	8003fe6 <__ieee754_expf+0x76>
 80040a8:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80040ac:	d20c      	bcs.n	80040c8 <__ieee754_expf+0x158>
 80040ae:	492a      	ldr	r1, [pc, #168]	; (8004158 <__ieee754_expf+0x1e8>)
 80040b0:	4620      	mov	r0, r4
 80040b2:	f7fc fcdb 	bl	8000a6c <__addsf3>
 80040b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80040ba:	f7fc ff9b 	bl	8000ff4 <__aeabi_fcmpgt>
 80040be:	b130      	cbz	r0, 80040ce <__ieee754_expf+0x15e>
 80040c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80040c4:	4620      	mov	r0, r4
 80040c6:	e75c      	b.n	8003f82 <__ieee754_expf+0x12>
 80040c8:	f04f 0900 	mov.w	r9, #0
 80040cc:	e790      	b.n	8003ff0 <__ieee754_expf+0x80>
 80040ce:	4681      	mov	r9, r0
 80040d0:	e78e      	b.n	8003ff0 <__ieee754_expf+0x80>
 80040d2:	4641      	mov	r1, r8
 80040d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80040d8:	f7fc fcc6 	bl	8000a68 <__aeabi_fsub>
 80040dc:	4601      	mov	r1, r0
 80040de:	4630      	mov	r0, r6
 80040e0:	f7fc fe80 	bl	8000de4 <__aeabi_fdiv>
 80040e4:	4601      	mov	r1, r0
 80040e6:	4638      	mov	r0, r7
 80040e8:	f7fc fcbe 	bl	8000a68 <__aeabi_fsub>
 80040ec:	4629      	mov	r1, r5
 80040ee:	f7fc fcbb 	bl	8000a68 <__aeabi_fsub>
 80040f2:	4601      	mov	r1, r0
 80040f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80040f8:	f7fc fcb6 	bl	8000a68 <__aeabi_fsub>
 80040fc:	f119 0f7d 	cmn.w	r9, #125	; 0x7d
 8004100:	db02      	blt.n	8004108 <__ieee754_expf+0x198>
 8004102:	eb00 54c9 	add.w	r4, r0, r9, lsl #23
 8004106:	e745      	b.n	8003f94 <__ieee754_expf+0x24>
 8004108:	f109 0964 	add.w	r9, r9, #100	; 0x64
 800410c:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
 8004110:	eb00 50c9 	add.w	r0, r0, r9, lsl #23
 8004114:	f7fc fdb2 	bl	8000c7c <__aeabi_fmul>
 8004118:	e735      	b.n	8003f86 <__ieee754_expf+0x16>
 800411a:	bf00      	nop
 800411c:	42b17217 	.word	0x42b17217
 8004120:	42cff1b5 	.word	0x42cff1b5
 8004124:	3eb17218 	.word	0x3eb17218
 8004128:	3f851591 	.word	0x3f851591
 800412c:	080041ec 	.word	0x080041ec
 8004130:	080041f4 	.word	0x080041f4
 8004134:	3331bb4c 	.word	0x3331bb4c
 8004138:	35ddea0e 	.word	0x35ddea0e
 800413c:	388ab355 	.word	0x388ab355
 8004140:	3b360b61 	.word	0x3b360b61
 8004144:	3e2aaaab 	.word	0x3e2aaaab
 8004148:	3fb8aa3b 	.word	0x3fb8aa3b
 800414c:	080041e4 	.word	0x080041e4
 8004150:	3f317180 	.word	0x3f317180
 8004154:	3717f7d1 	.word	0x3717f7d1
 8004158:	7149f2ca 	.word	0x7149f2ca

0800415c <with_errnof>:
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	4604      	mov	r4, r0
 8004160:	460d      	mov	r5, r1
 8004162:	f7ff fead 	bl	8003ec0 <__errno>
 8004166:	6005      	str	r5, [r0, #0]
 8004168:	4620      	mov	r0, r4
 800416a:	bd38      	pop	{r3, r4, r5, pc}

0800416c <xflowf>:
 800416c:	b508      	push	{r3, lr}
 800416e:	b140      	cbz	r0, 8004182 <xflowf+0x16>
 8004170:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8004174:	f7fc fd82 	bl	8000c7c <__aeabi_fmul>
 8004178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800417c:	2122      	movs	r1, #34	; 0x22
 800417e:	f7ff bfed 	b.w	800415c <with_errnof>
 8004182:	4608      	mov	r0, r1
 8004184:	e7f6      	b.n	8004174 <xflowf+0x8>

08004186 <__math_uflowf>:
 8004186:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800418a:	f7ff bfef 	b.w	800416c <xflowf>

0800418e <__math_oflowf>:
 800418e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8004192:	f7ff bfeb 	b.w	800416c <xflowf>

08004196 <finitef>:
 8004196:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800419a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800419e:	bfac      	ite	ge
 80041a0:	2000      	movge	r0, #0
 80041a2:	2001      	movlt	r0, #1
 80041a4:	4770      	bx	lr
	...

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr
