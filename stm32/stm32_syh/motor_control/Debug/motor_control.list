
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f60  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004170  08004170  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004170  08004170  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004170  08004170  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004174  08004174  00014174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  2000000c  08004184  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08004184  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d964  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3c  00000000  00000000  0002d999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00030570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f8b  00000000  00000000  00031140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb32  00000000  00000000  0004b0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099281  00000000  00000000  00059bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2e7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033cc  00000000  00000000  000f2ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800412c 	.word	0x0800412c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	0800412c 	.word	0x0800412c

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000238:	4b37      	ldr	r3, [pc, #220]	; (8000318 <MX_GPIO_Init+0xf4>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a36      	ldr	r2, [pc, #216]	; (8000318 <MX_GPIO_Init+0xf4>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b34      	ldr	r3, [pc, #208]	; (8000318 <MX_GPIO_Init+0xf4>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0320 	and.w	r3, r3, #32
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000250:	4b31      	ldr	r3, [pc, #196]	; (8000318 <MX_GPIO_Init+0xf4>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a30      	ldr	r2, [pc, #192]	; (8000318 <MX_GPIO_Init+0xf4>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b2e      	ldr	r3, [pc, #184]	; (8000318 <MX_GPIO_Init+0xf4>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b2b      	ldr	r3, [pc, #172]	; (8000318 <MX_GPIO_Init+0xf4>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a2a      	ldr	r2, [pc, #168]	; (8000318 <MX_GPIO_Init+0xf4>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b28      	ldr	r3, [pc, #160]	; (8000318 <MX_GPIO_Init+0xf4>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000280:	4b25      	ldr	r3, [pc, #148]	; (8000318 <MX_GPIO_Init+0xf4>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a24      	ldr	r2, [pc, #144]	; (8000318 <MX_GPIO_Init+0xf4>)
 8000286:	f043 0308 	orr.w	r3, r3, #8
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b22      	ldr	r3, [pc, #136]	; (8000318 <MX_GPIO_Init+0xf4>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0308 	and.w	r3, r3, #8
 8000294:	603b      	str	r3, [r7, #0]
 8000296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	f241 0130 	movw	r1, #4144	; 0x1030
 800029e:	481f      	ldr	r0, [pc, #124]	; (800031c <MX_GPIO_Init+0xf8>)
 80002a0:	f001 fbf2 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2133      	movs	r1, #51	; 0x33
 80002a8:	481d      	ldr	r0, [pc, #116]	; (8000320 <MX_GPIO_Init+0xfc>)
 80002aa:	f001 fbed 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	2104      	movs	r1, #4
 80002b2:	481c      	ldr	r0, [pc, #112]	; (8000324 <MX_GPIO_Init+0x100>)
 80002b4:	f001 fbe8 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 80002b8:	f241 0330 	movw	r3, #4144	; 0x1030
 80002bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	2301      	movs	r3, #1
 80002c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c2:	2300      	movs	r3, #0
 80002c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c6:	2302      	movs	r3, #2
 80002c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	4619      	mov	r1, r3
 80002d0:	4812      	ldr	r0, [pc, #72]	; (800031c <MX_GPIO_Init+0xf8>)
 80002d2:	f001 fa45 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80002d6:	2333      	movs	r3, #51	; 0x33
 80002d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002da:	2301      	movs	r3, #1
 80002dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	4619      	mov	r1, r3
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <MX_GPIO_Init+0xfc>)
 80002ee:	f001 fa37 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80002f2:	2304      	movs	r3, #4
 80002f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f6:	2301      	movs	r3, #1
 80002f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fa:	2300      	movs	r3, #0
 80002fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fe:	2302      	movs	r3, #2
 8000300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	4619      	mov	r1, r3
 8000308:	4806      	ldr	r0, [pc, #24]	; (8000324 <MX_GPIO_Init+0x100>)
 800030a:	f001 fa29 	bl	8001760 <HAL_GPIO_Init>

}
 800030e:	bf00      	nop
 8000310:	3720      	adds	r7, #32
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000
 800031c:	40011000 	.word	0x40011000
 8000320:	40010c00 	.word	0x40010c00
 8000324:	40011400 	.word	0x40011400

08000328 <HAL_UART_RxCpltCallback>:
//		g_rx_index++;
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a26      	ldr	r2, [pc, #152]	; (80003cc <HAL_UART_RxCpltCallback+0xa4>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d144      	bne.n	80003c2 <HAL_UART_RxCpltCallback+0x9a>
	{
		uint8_t len = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	73fb      	strb	r3, [r7, #15]
		len = process_protocol();
 800033c:	f000 f9b0 	bl	80006a0 <process_protocol>
 8000340:	4603      	mov	r3, r0
 8000342:	73fb      	strb	r3, [r7, #15]

		if(len != 0)
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d031      	beq.n	80003ae <HAL_UART_RxCpltCallback+0x86>
		{
			// response for command
			uint8_t cmd = g_recv_data[0];
 800034a:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <HAL_UART_RxCpltCallback+0xa8>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	73bb      	strb	r3, [r7, #14]
			// uint8_t need_res = g_recv_data[len - 1];

			if(cmd == 0x01)
 8000350:	7bbb      	ldrb	r3, [r7, #14]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d12b      	bne.n	80003ae <HAL_UART_RxCpltCallback+0x86>
			{
				g_mc_motor_speed = (int16_t)((g_recv_data[1] << 8) | g_recv_data[2]);
 8000356:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <HAL_UART_RxCpltCallback+0xa8>)
 8000358:	785b      	ldrb	r3, [r3, #1]
 800035a:	021b      	lsls	r3, r3, #8
 800035c:	b21a      	sxth	r2, r3
 800035e:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <HAL_UART_RxCpltCallback+0xa8>)
 8000360:	789b      	ldrb	r3, [r3, #2]
 8000362:	b21b      	sxth	r3, r3
 8000364:	4313      	orrs	r3, r2
 8000366:	b21a      	sxth	r2, r3
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <HAL_UART_RxCpltCallback+0xac>)
 800036a:	801a      	strh	r2, [r3, #0]
				g_md_motor_speed = (int16_t)((g_recv_data[3] << 8) | g_recv_data[4]);
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <HAL_UART_RxCpltCallback+0xa8>)
 800036e:	78db      	ldrb	r3, [r3, #3]
 8000370:	021b      	lsls	r3, r3, #8
 8000372:	b21a      	sxth	r2, r3
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <HAL_UART_RxCpltCallback+0xa8>)
 8000376:	791b      	ldrb	r3, [r3, #4]
 8000378:	b21b      	sxth	r3, r3
 800037a:	4313      	orrs	r3, r2
 800037c:	b21a      	sxth	r2, r3
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <HAL_UART_RxCpltCallback+0xb0>)
 8000380:	801a      	strh	r2, [r3, #0]
				g_ma_motor_speed = (int16_t)((g_recv_data[5] << 8) | g_recv_data[6]);
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <HAL_UART_RxCpltCallback+0xa8>)
 8000384:	795b      	ldrb	r3, [r3, #5]
 8000386:	021b      	lsls	r3, r3, #8
 8000388:	b21a      	sxth	r2, r3
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <HAL_UART_RxCpltCallback+0xa8>)
 800038c:	799b      	ldrb	r3, [r3, #6]
 800038e:	b21b      	sxth	r3, r3
 8000390:	4313      	orrs	r3, r2
 8000392:	b21a      	sxth	r2, r3
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <HAL_UART_RxCpltCallback+0xb4>)
 8000396:	801a      	strh	r2, [r3, #0]
				g_mb_motor_speed = (int16_t)((g_recv_data[7] << 8) | g_recv_data[8]);
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <HAL_UART_RxCpltCallback+0xa8>)
 800039a:	79db      	ldrb	r3, [r3, #7]
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	b21a      	sxth	r2, r3
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <HAL_UART_RxCpltCallback+0xa8>)
 80003a2:	7a1b      	ldrb	r3, [r3, #8]
 80003a4:	b21b      	sxth	r3, r3
 80003a6:	4313      	orrs	r3, r2
 80003a8:	b21a      	sxth	r2, r3
 80003aa:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <HAL_UART_RxCpltCallback+0xb8>)
 80003ac:	801a      	strh	r2, [r3, #0]
//				{
//					send_resonse_protocol(len);
//				}
			}
		}
		HAL_UART_Receive_IT(&huart1, &g_rx_buf[g_rx_index], 1);
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <HAL_UART_RxCpltCallback+0xbc>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_UART_RxCpltCallback+0xc0>)
 80003b6:	4413      	add	r3, r2
 80003b8:	2201      	movs	r2, #1
 80003ba:	4619      	mov	r1, r3
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <HAL_UART_RxCpltCallback+0xa4>)
 80003be:	f003 f952 	bl	8003666 <HAL_UART_Receive_IT>
	}
}
 80003c2:	bf00      	nop
 80003c4:	3710      	adds	r7, #16
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200003e4 	.word	0x200003e4
 80003d0:	20000128 	.word	0x20000128
 80003d4:	2000022e 	.word	0x2000022e
 80003d8:	20000230 	.word	0x20000230
 80003dc:	2000022a 	.word	0x2000022a
 80003e0:	2000022c 	.word	0x2000022c
 80003e4:	20000228 	.word	0x20000228
 80003e8:	20000028 	.word	0x20000028

080003ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a52      	ldr	r2, [pc, #328]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	f040 809e 	bne.w	800053c <HAL_TIM_PeriodElapsedCallback+0x150>

		if(g_ma_motor_speed >= 0)
 8000400:	4b51      	ldr	r3, [pc, #324]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000406:	2b00      	cmp	r3, #0
 8000408:	db11      	blt.n	800042e <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2104      	movs	r1, #4
 800040e:	484f      	ldr	r0, [pc, #316]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000410:	f001 fb3a 	bl	8001a88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041a:	484d      	ldr	r0, [pc, #308]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800041c:	f001 fb34 	bl	8001a88 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, g_ma_motor_speed);
 8000420:	4b49      	ldr	r3, [pc, #292]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000422:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000426:	4b4b      	ldr	r3, [pc, #300]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	641a      	str	r2, [r3, #64]	; 0x40
 800042c:	e011      	b.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x66>
		}
		else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 800042e:	2201      	movs	r2, #1
 8000430:	2104      	movs	r1, #4
 8000432:	4846      	ldr	r0, [pc, #280]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000434:	f001 fb28 	bl	8001a88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800043e:	4844      	ldr	r0, [pc, #272]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000440:	f001 fb22 	bl	8001a88 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, -1 * g_ma_motor_speed);
 8000444:	4b40      	ldr	r3, [pc, #256]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800044a:	425a      	negs	r2, r3
 800044c:	4b41      	ldr	r3, [pc, #260]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	641a      	str	r2, [r3, #64]	; 0x40
		}

		if(g_mb_motor_speed >= 0)
 8000452:	4b41      	ldr	r3, [pc, #260]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000458:	2b00      	cmp	r3, #0
 800045a:	db10      	blt.n	800047e <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	2110      	movs	r1, #16
 8000460:	483e      	ldr	r0, [pc, #248]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000462:	f001 fb11 	bl	8001a88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	2120      	movs	r1, #32
 800046a:	483c      	ldr	r0, [pc, #240]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800046c:	f001 fb0c 	bl	8001a88 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, g_mb_motor_speed);
 8000470:	4b39      	ldr	r3, [pc, #228]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000472:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000476:	4b37      	ldr	r3, [pc, #220]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	63da      	str	r2, [r3, #60]	; 0x3c
 800047c:	e010      	b.n	80004a0 <HAL_TIM_PeriodElapsedCallback+0xb4>
		}
		else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800047e:	2201      	movs	r2, #1
 8000480:	2110      	movs	r1, #16
 8000482:	4836      	ldr	r0, [pc, #216]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000484:	f001 fb00 	bl	8001a88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	2120      	movs	r1, #32
 800048c:	4833      	ldr	r0, [pc, #204]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800048e:	f001 fafb 	bl	8001a88 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, -1 * g_mb_motor_speed);
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000498:	425a      	negs	r2, r3
 800049a:	4b2e      	ldr	r3, [pc, #184]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(g_mc_motor_speed >= 0)
 80004a0:	4b2f      	ldr	r3, [pc, #188]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80004a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	db10      	blt.n	80004cc <HAL_TIM_PeriodElapsedCallback+0xe0>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2120      	movs	r1, #32
 80004ae:	4828      	ldr	r0, [pc, #160]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80004b0:	f001 faea 	bl	8001a88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2110      	movs	r1, #16
 80004b8:	4825      	ldr	r0, [pc, #148]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80004ba:	f001 fae5 	bl	8001a88 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, g_mc_motor_speed);
 80004be:	4b28      	ldr	r3, [pc, #160]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80004c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80004c4:	4b23      	ldr	r3, [pc, #140]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	639a      	str	r2, [r3, #56]	; 0x38
 80004ca:	e010      	b.n	80004ee <HAL_TIM_PeriodElapsedCallback+0x102>
		}
		else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2120      	movs	r1, #32
 80004d0:	481f      	ldr	r0, [pc, #124]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80004d2:	f001 fad9 	bl	8001a88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	481d      	ldr	r0, [pc, #116]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80004dc:	f001 fad4 	bl	8001a88 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -1 * g_mc_motor_speed);
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80004e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004e6:	425a      	negs	r2, r3
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	639a      	str	r2, [r3, #56]	; 0x38
		}

		if(g_md_motor_speed >= 0)
 80004ee:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80004f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	db10      	blt.n	800051a <HAL_TIM_PeriodElapsedCallback+0x12e>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	4817      	ldr	r0, [pc, #92]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80004fe:	f001 fac3 	bl	8001a88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000502:	2201      	movs	r2, #1
 8000504:	2102      	movs	r1, #2
 8000506:	4815      	ldr	r0, [pc, #84]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000508:	f001 fabe 	bl	8001a88 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, g_md_motor_speed);
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800050e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
//
//		update_encoder(&enc_instanceC, &htim4);
//		encoder_positionC = enc_instanceC.position;
//		encoder_velocityC = enc_instanceC.velocity;
	}
}
 8000518:	e010      	b.n	800053c <HAL_TIM_PeriodElapsedCallback+0x150>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800051a:	2201      	movs	r2, #1
 800051c:	2101      	movs	r1, #1
 800051e:	480f      	ldr	r0, [pc, #60]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000520:	f001 fab2 	bl	8001a88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2102      	movs	r1, #2
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800052a:	f001 faad 	bl	8001a88 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, -1 * g_md_motor_speed);
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000534:	425a      	negs	r2, r3
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40001000 	.word	0x40001000
 8000548:	2000022a 	.word	0x2000022a
 800054c:	40011400 	.word	0x40011400
 8000550:	40011000 	.word	0x40011000
 8000554:	2000039c 	.word	0x2000039c
 8000558:	2000022c 	.word	0x2000022c
 800055c:	40010c00 	.word	0x40010c00
 8000560:	2000022e 	.word	0x2000022e
 8000564:	20000230 	.word	0x20000230

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fe46 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f850 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f7ff fe56 	bl	8000224 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000578:	f000 f9d2 	bl	8000920 <MX_TIM2_Init>
  MX_TIM3_Init();
 800057c:	f000 fa24 	bl	80009c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000580:	f000 fa76 	bl	8000a70 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000584:	f000 fac8 	bl	8000b18 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000588:	f000 fb50 	bl	8000c2c <MX_TIM8_Init>
  MX_TIM6_Init();
 800058c:	f000 fb18 	bl	8000bc0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000590:	f000 fd90 	bl	80010b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000594:	213c      	movs	r1, #60	; 0x3c
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <main+0x88>)
 8000598:	f002 f902 	bl	80027a0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800059c:	213c      	movs	r1, #60	; 0x3c
 800059e:	4815      	ldr	r0, [pc, #84]	; (80005f4 <main+0x8c>)
 80005a0:	f002 f8fe 	bl	80027a0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80005a4:	213c      	movs	r1, #60	; 0x3c
 80005a6:	4814      	ldr	r0, [pc, #80]	; (80005f8 <main+0x90>)
 80005a8:	f002 f8fa 	bl	80027a0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80005ac:	213c      	movs	r1, #60	; 0x3c
 80005ae:	4813      	ldr	r0, [pc, #76]	; (80005fc <main+0x94>)
 80005b0:	f002 f8f6 	bl	80027a0 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);  // start the pwm md
 80005b4:	2100      	movs	r1, #0
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <main+0x98>)
 80005b8:	f001 ff96 	bl	80024e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);  // start the pwm mc
 80005bc:	2104      	movs	r1, #4
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <main+0x98>)
 80005c0:	f001 ff92 	bl	80024e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);  // start the pwm mb
 80005c4:	2108      	movs	r1, #8
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <main+0x98>)
 80005c8:	f001 ff8e 	bl	80024e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);  // start the pwm ma
 80005cc:	210c      	movs	r1, #12
 80005ce:	480c      	ldr	r0, [pc, #48]	; (8000600 <main+0x98>)
 80005d0:	f001 ff8a 	bl	80024e8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <main+0x9c>)
 80005d6:	f001 fecf 	bl	8002378 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart1, &g_rx_buf[g_rx_index], 1);
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <main+0xa0>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <main+0xa4>)
 80005e2:	4413      	add	r3, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <main+0xa8>)
 80005ea:	f003 f83c 	bl	8003666 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0x86>
 80005f0:	20000234 	.word	0x20000234
 80005f4:	2000027c 	.word	0x2000027c
 80005f8:	200002c4 	.word	0x200002c4
 80005fc:	2000030c 	.word	0x2000030c
 8000600:	2000039c 	.word	0x2000039c
 8000604:	20000354 	.word	0x20000354
 8000608:	20000228 	.word	0x20000228
 800060c:	20000028 	.word	0x20000028
 8000610:	200003e4 	.word	0x200003e4

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	; 0x40
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2228      	movs	r2, #40	; 0x28
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fd7a 	bl	800411c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000652:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fa2b 	bl	8001ab8 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000668:	f000 f8b9 	bl	80007de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fc98 	bl	8001fbc <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000692:	f000 f8a4 	bl	80007de <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3740      	adds	r7, #64	; 0x40
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <process_protocol>:

/* USER CODE BEGIN 4 */
uint8_t process_protocol()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	g_rx_index++;
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <process_protocol+0xf0>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b38      	ldr	r3, [pc, #224]	; (8000790 <process_protocol+0xf0>)
 80006b0:	701a      	strb	r2, [r3, #0]

	if(g_rx_index > 6)
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <process_protocol+0xf0>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d964      	bls.n	8000784 <process_protocol+0xe4>
	{
		if(g_rx_buf[g_rx_index - 1] == 0xFD)
 80006ba:	4b35      	ldr	r3, [pc, #212]	; (8000790 <process_protocol+0xf0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	4a34      	ldr	r2, [pc, #208]	; (8000794 <process_protocol+0xf4>)
 80006c2:	5cd3      	ldrb	r3, [r2, r3]
 80006c4:	2bfd      	cmp	r3, #253	; 0xfd
 80006c6:	d15d      	bne.n	8000784 <process_protocol+0xe4>
		{
		  if(g_rx_buf[g_rx_index - 2] == 0xFA)
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <process_protocol+0xf0>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	3b02      	subs	r3, #2
 80006ce:	4a31      	ldr	r2, [pc, #196]	; (8000794 <process_protocol+0xf4>)
 80006d0:	5cd3      	ldrb	r3, [r2, r3]
 80006d2:	2bfa      	cmp	r3, #250	; 0xfa
 80006d4:	d156      	bne.n	8000784 <process_protocol+0xe4>
		  {
			uint8_t packet_len = g_rx_buf[g_rx_index - 4];
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <process_protocol+0xf0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3b04      	subs	r3, #4
 80006dc:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <process_protocol+0xf4>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	70fb      	strb	r3, [r7, #3]
			// Check Header
			if((g_rx_buf[g_rx_index - packet_len - 5] == 0xFE) && (g_rx_buf[g_rx_index -packet_len - 6] == 0xFA))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <process_protocol+0xf0>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	3b05      	subs	r3, #5
 80006ee:	4a29      	ldr	r2, [pc, #164]	; (8000794 <process_protocol+0xf4>)
 80006f0:	5cd3      	ldrb	r3, [r2, r3]
 80006f2:	2bfe      	cmp	r3, #254	; 0xfe
 80006f4:	d146      	bne.n	8000784 <process_protocol+0xe4>
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <process_protocol+0xf0>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	3b06      	subs	r3, #6
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <process_protocol+0xf4>)
 8000704:	5cd3      	ldrb	r3, [r2, r3]
 8000706:	2bfa      	cmp	r3, #250	; 0xfa
 8000708:	d13c      	bne.n	8000784 <process_protocol+0xe4>
			{
			  // Check checksum
			  uint8_t calc_crc = calc_checksum(&g_rx_buf[g_rx_index - packet_len - 4], packet_len + 1);
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <process_protocol+0xf0>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	3b04      	subs	r3, #4
 8000716:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <process_protocol+0xf4>)
 8000718:	441a      	add	r2, r3
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	3301      	adds	r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	4610      	mov	r0, r2
 8000724:	f000 f83a 	bl	800079c <calc_checksum>
 8000728:	4603      	mov	r3, r0
 800072a:	70bb      	strb	r3, [r7, #2]

			  if(calc_crc == g_rx_buf[g_rx_index - 3])
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <process_protocol+0xf0>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3b03      	subs	r3, #3
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <process_protocol+0xf4>)
 8000734:	5cd3      	ldrb	r3, [r2, r3]
 8000736:	78ba      	ldrb	r2, [r7, #2]
 8000738:	429a      	cmp	r2, r3
 800073a:	d123      	bne.n	8000784 <process_protocol+0xe4>
			  {
				// Check completed.
				for(int i = 0; i < packet_len; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e011      	b.n	8000766 <process_protocol+0xc6>
				{
				  g_recv_data[i] = g_rx_buf[g_rx_index - packet_len - 4 + i];
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <process_protocol+0xf0>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	1f1a      	subs	r2, r3, #4
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	4a10      	ldr	r2, [pc, #64]	; (8000794 <process_protocol+0xf4>)
 8000754:	5cd1      	ldrb	r1, [r2, r3]
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <process_protocol+0xf8>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4413      	add	r3, r2
 800075c:	460a      	mov	r2, r1
 800075e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < packet_len; i++)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3301      	adds	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	429a      	cmp	r2, r3
 800076c:	dbe9      	blt.n	8000742 <process_protocol+0xa2>
				}

				memset(g_rx_buf, 0, 256);
 800076e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000772:	2100      	movs	r1, #0
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <process_protocol+0xf4>)
 8000776:	f003 fcd1 	bl	800411c <memset>
				g_rx_index = 0;
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <process_protocol+0xf0>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]

				return packet_len;
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	e000      	b.n	8000786 <process_protocol+0xe6>
			}
		  }
		}
	}

  return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000228 	.word	0x20000228
 8000794:	20000028 	.word	0x20000028
 8000798:	20000128 	.word	0x20000128

0800079c <calc_checksum>:
//  HAL_UART_Transmit(&huart1, send_data, len+6 ,10000);
//}


uint8_t calc_checksum(uint8_t* data, uint8_t len)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
	uint16_t sum = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < len; i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	e00a      	b.n	80007c8 <calc_checksum+0x2c>
	{
		sum += data[i];
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	89fb      	ldrh	r3, [r7, #14]
 80007be:	4413      	add	r3, r2
 80007c0:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < len; i++)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	dbf0      	blt.n	80007b2 <calc_checksum+0x16>
	}

	return (uint8_t)sum;
 80007d0:	89fb      	ldrh	r3, [r7, #14]
 80007d2:	b2db      	uxtb	r3, r3
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e2:	b672      	cpsid	i
}
 80007e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_MspInit+0x5c>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_MspInit+0x5c>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_MspInit+0x5c>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x5c>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x5c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x5c>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_MspInit+0x60>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <HAL_MspInit+0x60>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40021000 	.word	0x40021000
 8000848:	40010000 	.word	0x40010000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 fcf9 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <TIM2_IRQHandler+0x10>)
 80008a2:	f002 f82b 	bl	80028fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000234 	.word	0x20000234

080008b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <TIM3_IRQHandler+0x10>)
 80008b6:	f002 f821 	bl	80028fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000027c 	.word	0x2000027c

080008c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <TIM4_IRQHandler+0x10>)
 80008ca:	f002 f817 	bl	80028fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200002c4 	.word	0x200002c4

080008d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <USART1_IRQHandler+0x10>)
 80008de:	f002 fee7 	bl	80036b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200003e4 	.word	0x200003e4

080008ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <TIM5_IRQHandler+0x10>)
 80008f2:	f002 f803 	bl	80028fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000030c 	.word	0x2000030c

08000900 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <TIM6_IRQHandler+0x10>)
 8000906:	f001 fff9 	bl	80028fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000354 	.word	0x20000354

08000914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2224      	movs	r2, #36	; 0x24
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fbf4 	bl	800411c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_TIM2_Init+0xa4>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000942:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000946:	2200      	movs	r2, #0
 8000948:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_TIM2_Init+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000956:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_TIM2_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000964:	2303      	movs	r3, #3
 8000966:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800096c:	2301      	movs	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800097c:	2301      	movs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_TIM2_Init+0xa4>)
 8000990:	f001 fe64 	bl	800265c <HAL_TIM_Encoder_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800099a:	f7ff ff20 	bl	80007de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_TIM2_Init+0xa4>)
 80009ac:	f002 fd3c 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009b6:	f7ff ff12 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000234 	.word	0x20000234

080009c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2224      	movs	r2, #36	; 0x24
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fba0 	bl	800411c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_TIM3_Init+0xa0>)
 80009e6:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <MX_TIM3_Init+0xa4>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_TIM3_Init+0xa0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_TIM3_Init+0xa0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_TIM3_Init+0xa0>)
 80009f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_TIM3_Init+0xa0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_TIM3_Init+0xa0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a12:	2301      	movs	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a22:	2301      	movs	r3, #1
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_TIM3_Init+0xa0>)
 8000a36:	f001 fe11 	bl	800265c <HAL_TIM_Encoder_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f7ff fecd 	bl	80007de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_TIM3_Init+0xa0>)
 8000a52:	f002 fce9 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a5c:	f7ff febf 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3730      	adds	r7, #48	; 0x30
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000027c 	.word	0x2000027c
 8000a6c:	40000400 	.word	0x40000400

08000a70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2224      	movs	r2, #36	; 0x24
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 fb4c 	bl	800411c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000a8e:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <MX_TIM4_Init+0xa4>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aba:	2301      	movs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aca:	2301      	movs	r3, #1
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000ade:	f001 fdbd 	bl	800265c <HAL_TIM_Encoder_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ae8:	f7ff fe79 	bl	80007de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000afa:	f002 fc95 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000b04:	f7ff fe6b 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3730      	adds	r7, #48	; 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200002c4 	.word	0x200002c4
 8000b14:	40000800 	.word	0x40000800

08000b18 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2224      	movs	r2, #36	; 0x24
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 faf8 	bl	800411c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <MX_TIM5_Init+0xa0>)
 8000b36:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <MX_TIM5_Init+0xa4>)
 8000b38:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_TIM5_Init+0xa0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_TIM5_Init+0xa0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_TIM5_Init+0xa0>)
 8000b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_TIM5_Init+0xa0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_TIM5_Init+0xa0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b62:	2301      	movs	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b72:	2301      	movs	r3, #1
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <MX_TIM5_Init+0xa0>)
 8000b86:	f001 fd69 	bl	800265c <HAL_TIM_Encoder_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b90:	f7ff fe25 	bl	80007de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_TIM5_Init+0xa0>)
 8000ba2:	f002 fc41 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000bac:	f7ff fe17 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3730      	adds	r7, #48	; 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000030c 	.word	0x2000030c
 8000bbc:	40000c00 	.word	0x40000c00

08000bc0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_TIM6_Init+0x64>)
 8000bd0:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <MX_TIM6_Init+0x68>)
 8000bd2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_TIM6_Init+0x64>)
 8000bd6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000bda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_TIM6_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_TIM6_Init+0x64>)
 8000be4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000be8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_TIM6_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <MX_TIM6_Init+0x64>)
 8000bf2:	f001 fb71 	bl	80022d8 <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bfc:	f7ff fdef 	bl	80007de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_TIM6_Init+0x64>)
 8000c0e:	f002 fc0b 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c18:	f7ff fde1 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000354 	.word	0x20000354
 8000c28:	40001000 	.word	0x40001000

08000c2c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b096      	sub	sp, #88	; 0x58
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2220      	movs	r2, #32
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fa59 	bl	800411c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c6a:	4b51      	ldr	r3, [pc, #324]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000c6c:	4a51      	ldr	r2, [pc, #324]	; (8000db4 <MX_TIM8_Init+0x188>)
 8000c6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 8000c70:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000c72:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000c76:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b4d      	ldr	r3, [pc, #308]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8000c7e:	4b4c      	ldr	r3, [pc, #304]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000c80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c8c:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c98:	4845      	ldr	r0, [pc, #276]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000c9a:	f001 fb1d 	bl	80022d8 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000ca4:	f7ff fd9b 	bl	80007de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	483e      	ldr	r0, [pc, #248]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000cb6:	f001 ffeb 	bl	8002c90 <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000cc0:	f7ff fd8d 	bl	80007de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000cc4:	483a      	ldr	r0, [pc, #232]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000cc6:	f001 fbb7 	bl	8002438 <HAL_TIM_PWM_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000cd0:	f7ff fd85 	bl	80007de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000cdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4833      	ldr	r0, [pc, #204]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000ce4:	f002 fba0 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000cee:	f7ff fd76 	bl	80007de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2360      	movs	r3, #96	; 0x60
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	4826      	ldr	r0, [pc, #152]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000d18:	f001 fef8 	bl	8002b0c <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000d22:	f7ff fd5c 	bl	80007de <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4820      	ldr	r0, [pc, #128]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000d30:	f001 feec 	bl	8002b0c <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8000d3a:	f7ff fd50 	bl	80007de <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	2208      	movs	r2, #8
 8000d44:	4619      	mov	r1, r3
 8000d46:	481a      	ldr	r0, [pc, #104]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000d48:	f001 fee0 	bl	8002b0c <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8000d52:	f7ff fd44 	bl	80007de <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4814      	ldr	r0, [pc, #80]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000d60:	f001 fed4 	bl	8002b0c <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000d6a:	f7ff fd38 	bl	80007de <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000d92:	f002 fbb5 	bl	8003500 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM8_Init+0x174>
  {
    Error_Handler();
 8000d9c:	f7ff fd1f 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <MX_TIM8_Init+0x184>)
 8000da2:	f000 f953 	bl	800104c <HAL_TIM_MspPostInit>

}
 8000da6:	bf00      	nop
 8000da8:	3758      	adds	r7, #88	; 0x58
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000039c 	.word	0x2000039c
 8000db4:	40013400 	.word	0x40013400

08000db8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd6:	d157      	bne.n	8000e88 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd8:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	4a77      	ldr	r2, [pc, #476]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	61d3      	str	r3, [r2, #28]
 8000de4:	4b75      	ldr	r3, [pc, #468]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dee:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	4b6c      	ldr	r3, [pc, #432]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a6b      	ldr	r2, [pc, #428]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b69      	ldr	r3, [pc, #420]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	623b      	str	r3, [r7, #32]
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	4862      	ldr	r0, [pc, #392]	; (8000fc0 <HAL_TIM_Encoder_MspInit+0x208>)
 8000e36:	f000 fc93 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	485d      	ldr	r0, [pc, #372]	; (8000fc4 <HAL_TIM_Encoder_MspInit+0x20c>)
 8000e4e:	f000 fc87 	bl	8001760 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000e52:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <HAL_TIM_Encoder_MspInit+0x210>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e62:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e70:	4a55      	ldr	r2, [pc, #340]	; (8000fc8 <HAL_TIM_Encoder_MspInit+0x210>)
 8000e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e74:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	201c      	movs	r0, #28
 8000e7c:	f000 faf7 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e80:	201c      	movs	r0, #28
 8000e82:	f000 fb10 	bl	80014a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000e86:	e094      	b.n	8000fb2 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(tim_encoderHandle->Instance==TIM3)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a4f      	ldr	r2, [pc, #316]	; (8000fcc <HAL_TIM_Encoder_MspInit+0x214>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12c      	bne.n	8000eec <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e92:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4a43      	ldr	r2, [pc, #268]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec2:	23c0      	movs	r3, #192	; 0xc0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	483a      	ldr	r0, [pc, #232]	; (8000fc0 <HAL_TIM_Encoder_MspInit+0x208>)
 8000ed6:	f000 fc43 	bl	8001760 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201d      	movs	r0, #29
 8000ee0:	f000 fac5 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee4:	201d      	movs	r0, #29
 8000ee6:	f000 fade 	bl	80014a6 <HAL_NVIC_EnableIRQ>
}
 8000eea:	e062      	b.n	8000fb2 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(tim_encoderHandle->Instance==TIM4)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0x218>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12c      	bne.n	8000f50 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a2a      	ldr	r2, [pc, #168]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f26:	23c0      	movs	r3, #192	; 0xc0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f36:	4619      	mov	r1, r3
 8000f38:	4822      	ldr	r0, [pc, #136]	; (8000fc4 <HAL_TIM_Encoder_MspInit+0x20c>)
 8000f3a:	f000 fc11 	bl	8001760 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	201e      	movs	r0, #30
 8000f44:	f000 fa93 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f48:	201e      	movs	r0, #30
 8000f4a:	f000 faac 	bl	80014a6 <HAL_NVIC_EnableIRQ>
}
 8000f4e:	e030      	b.n	8000fb2 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(tim_encoderHandle->Instance==TIM5)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0x21c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d12b      	bne.n	8000fb2 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_TIM_Encoder_MspInit+0x204>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <HAL_TIM_Encoder_MspInit+0x208>)
 8000f9e:	f000 fbdf 	bl	8001760 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2032      	movs	r0, #50	; 0x32
 8000fa8:	f000 fa61 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000fac:	2032      	movs	r0, #50	; 0x32
 8000fae:	f000 fa7a 	bl	80014a6 <HAL_NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3740      	adds	r7, #64	; 0x40
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	40010c00 	.word	0x40010c00
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40000400 	.word	0x40000400
 8000fd0:	40000800 	.word	0x40000800
 8000fd4:	40000c00 	.word	0x40000c00

08000fd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a16      	ldr	r2, [pc, #88]	; (8001040 <HAL_TIM_Base_MspInit+0x68>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d114      	bne.n	8001014 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_TIM_Base_MspInit+0x6c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a15      	ldr	r2, [pc, #84]	; (8001044 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2036      	movs	r0, #54	; 0x36
 8001008:	f000 fa31 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800100c:	2036      	movs	r0, #54	; 0x36
 800100e:	f000 fa4a 	bl	80014a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001012:	e010      	b.n	8001036 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM8)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_Base_MspInit+0x70>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10b      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_TIM_Base_MspInit+0x6c>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_TIM_Base_MspInit+0x6c>)
 8001024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001028:	6193      	str	r3, [r2, #24]
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_TIM_Base_MspInit+0x6c>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40001000 	.word	0x40001000
 8001044:	40021000 	.word	0x40021000
 8001048:	40013400 	.word	0x40013400

0800104c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM8)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <HAL_TIM_MspPostInit+0x5c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d118      	bne.n	800109e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_TIM_MspPostInit+0x60>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_TIM_MspPostInit+0x60>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_TIM_MspPostInit+0x60>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001084:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001088:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2302      	movs	r3, #2
 8001090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HAL_TIM_MspPostInit+0x64>)
 800109a:	f000 fb61 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40013400 	.word	0x40013400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40011000 	.word	0x40011000

080010b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <MX_USART1_UART_Init+0x50>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_USART1_UART_Init+0x4c>)
 80010ec:	f002 fa6b 	bl	80035c6 <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010f6:	f7ff fb72 	bl	80007de <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200003e4 	.word	0x200003e4
 8001104:	40013800 	.word	0x40013800

08001108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <HAL_UART_MspInit+0x9c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d139      	bne.n	800119c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <HAL_UART_MspInit+0xa0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <HAL_UART_MspInit+0xa0>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_UART_MspInit+0xa0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_UART_MspInit+0xa0>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_UART_MspInit+0xa0>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_UART_MspInit+0xa0>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <HAL_UART_MspInit+0xa4>)
 800116e:	f000 faf7 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <HAL_UART_MspInit+0xa4>)
 8001188:	f000 faea 	bl	8001760 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2025      	movs	r0, #37	; 0x25
 8001192:	f000 f96c 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001196:	2025      	movs	r0, #37	; 0x25
 8001198:	f000 f985 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40013800 	.word	0x40013800
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800

080011b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b0:	f7ff fbb0 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011cc:	4c09      	ldr	r4, [pc, #36]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011da:	f002 ff7b 	bl	80040d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011de:	f7ff f9c3 	bl	8000568 <main>
  bx lr
 80011e2:	4770      	bx	lr
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011ec:	08004178 	.word	0x08004178
  ldr r2, =_sbss
 80011f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011f4:	20000430 	.word	0x20000430

080011f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC1_2_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x28>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x28>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 f923 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	200f      	movs	r0, #15
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fae6 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f93b 	bl	80014c2 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001264:	f000 f903 	bl	800146e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	20000008 	.word	0x20000008
 8001284:	20000004 	.word	0x20000004

08001288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x1c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_IncTick+0x20>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a03      	ldr	r2, [pc, #12]	; (80012a8 <HAL_IncTick+0x20>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000008 	.word	0x20000008
 80012a8:	2000042c 	.word	0x2000042c

080012ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <HAL_GetTick+0x10>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	2000042c 	.word	0x2000042c

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4906      	ldr	r1, [pc, #24]	; (8001358 <__NVIC_EnableIRQ+0x34>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001438:	f7ff ff90 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff2d 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff42 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff35 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa2 	bl	8001414 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d008      	beq.n	8001504 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2204      	movs	r2, #4
 80014f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e020      	b.n	8001546 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020e 	bic.w	r2, r2, #14
 8001512:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f202 	lsl.w	r2, r1, r2
 8001532:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d005      	beq.n	8001574 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2204      	movs	r2, #4
 800156c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e0d6      	b.n	8001722 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 020e 	bic.w	r2, r2, #14
 8001582:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b64      	ldr	r3, [pc, #400]	; (800172c <HAL_DMA_Abort_IT+0x1dc>)
 800159c:	429a      	cmp	r2, r3
 800159e:	d958      	bls.n	8001652 <HAL_DMA_Abort_IT+0x102>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a62      	ldr	r2, [pc, #392]	; (8001730 <HAL_DMA_Abort_IT+0x1e0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d04f      	beq.n	800164a <HAL_DMA_Abort_IT+0xfa>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a61      	ldr	r2, [pc, #388]	; (8001734 <HAL_DMA_Abort_IT+0x1e4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d048      	beq.n	8001646 <HAL_DMA_Abort_IT+0xf6>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a5f      	ldr	r2, [pc, #380]	; (8001738 <HAL_DMA_Abort_IT+0x1e8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d040      	beq.n	8001640 <HAL_DMA_Abort_IT+0xf0>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a5e      	ldr	r2, [pc, #376]	; (800173c <HAL_DMA_Abort_IT+0x1ec>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d038      	beq.n	800163a <HAL_DMA_Abort_IT+0xea>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5c      	ldr	r2, [pc, #368]	; (8001740 <HAL_DMA_Abort_IT+0x1f0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d030      	beq.n	8001634 <HAL_DMA_Abort_IT+0xe4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_DMA_Abort_IT+0x1f4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d028      	beq.n	800162e <HAL_DMA_Abort_IT+0xde>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_DMA_Abort_IT+0x1dc>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d020      	beq.n	8001628 <HAL_DMA_Abort_IT+0xd8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a57      	ldr	r2, [pc, #348]	; (8001748 <HAL_DMA_Abort_IT+0x1f8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d019      	beq.n	8001624 <HAL_DMA_Abort_IT+0xd4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a55      	ldr	r2, [pc, #340]	; (800174c <HAL_DMA_Abort_IT+0x1fc>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d012      	beq.n	8001620 <HAL_DMA_Abort_IT+0xd0>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a54      	ldr	r2, [pc, #336]	; (8001750 <HAL_DMA_Abort_IT+0x200>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00a      	beq.n	800161a <HAL_DMA_Abort_IT+0xca>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a52      	ldr	r2, [pc, #328]	; (8001754 <HAL_DMA_Abort_IT+0x204>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d102      	bne.n	8001614 <HAL_DMA_Abort_IT+0xc4>
 800160e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001612:	e01b      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001618:	e018      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 800161a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161e:	e015      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001620:	2310      	movs	r3, #16
 8001622:	e013      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001624:	2301      	movs	r3, #1
 8001626:	e011      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800162c:	e00e      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 800162e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001632:	e00b      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001638:	e008      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	e005      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001644:	e002      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 8001646:	2310      	movs	r3, #16
 8001648:	e000      	b.n	800164c <HAL_DMA_Abort_IT+0xfc>
 800164a:	2301      	movs	r3, #1
 800164c:	4a42      	ldr	r2, [pc, #264]	; (8001758 <HAL_DMA_Abort_IT+0x208>)
 800164e:	6053      	str	r3, [r2, #4]
 8001650:	e057      	b.n	8001702 <HAL_DMA_Abort_IT+0x1b2>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a36      	ldr	r2, [pc, #216]	; (8001730 <HAL_DMA_Abort_IT+0x1e0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d04f      	beq.n	80016fc <HAL_DMA_Abort_IT+0x1ac>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a34      	ldr	r2, [pc, #208]	; (8001734 <HAL_DMA_Abort_IT+0x1e4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d048      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x1a8>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a33      	ldr	r2, [pc, #204]	; (8001738 <HAL_DMA_Abort_IT+0x1e8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d040      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x1a2>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a31      	ldr	r2, [pc, #196]	; (800173c <HAL_DMA_Abort_IT+0x1ec>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d038      	beq.n	80016ec <HAL_DMA_Abort_IT+0x19c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a30      	ldr	r2, [pc, #192]	; (8001740 <HAL_DMA_Abort_IT+0x1f0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d030      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x196>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_DMA_Abort_IT+0x1f4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d028      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x190>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_DMA_Abort_IT+0x1dc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d020      	beq.n	80016da <HAL_DMA_Abort_IT+0x18a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <HAL_DMA_Abort_IT+0x1f8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x186>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a29      	ldr	r2, [pc, #164]	; (800174c <HAL_DMA_Abort_IT+0x1fc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d012      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x182>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_DMA_Abort_IT+0x200>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00a      	beq.n	80016cc <HAL_DMA_Abort_IT+0x17c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a26      	ldr	r2, [pc, #152]	; (8001754 <HAL_DMA_Abort_IT+0x204>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d102      	bne.n	80016c6 <HAL_DMA_Abort_IT+0x176>
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	e01b      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ca:	e018      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d0:	e015      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016d2:	2310      	movs	r3, #16
 80016d4:	e013      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e011      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016de:	e00e      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016e4:	e00b      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ea:	e008      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f0:	e005      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f6:	e002      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016f8:	2310      	movs	r3, #16
 80016fa:	e000      	b.n	80016fe <HAL_DMA_Abort_IT+0x1ae>
 80016fc:	2301      	movs	r3, #1
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_DMA_Abort_IT+0x20c>)
 8001700:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
    } 
  }
  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40020080 	.word	0x40020080
 8001730:	40020008 	.word	0x40020008
 8001734:	4002001c 	.word	0x4002001c
 8001738:	40020030 	.word	0x40020030
 800173c:	40020044 	.word	0x40020044
 8001740:	40020058 	.word	0x40020058
 8001744:	4002006c 	.word	0x4002006c
 8001748:	40020408 	.word	0x40020408
 800174c:	4002041c 	.word	0x4002041c
 8001750:	40020430 	.word	0x40020430
 8001754:	40020444 	.word	0x40020444
 8001758:	40020400 	.word	0x40020400
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b08b      	sub	sp, #44	; 0x2c
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	e179      	b.n	8001a68 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001774:	2201      	movs	r2, #1
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 8168 	bne.w	8001a62 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4a96      	ldr	r2, [pc, #600]	; (80019f0 <HAL_GPIO_Init+0x290>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d05e      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 800179c:	4a94      	ldr	r2, [pc, #592]	; (80019f0 <HAL_GPIO_Init+0x290>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d875      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017a2:	4a94      	ldr	r2, [pc, #592]	; (80019f4 <HAL_GPIO_Init+0x294>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d058      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017a8:	4a92      	ldr	r2, [pc, #584]	; (80019f4 <HAL_GPIO_Init+0x294>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d86f      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017ae:	4a92      	ldr	r2, [pc, #584]	; (80019f8 <HAL_GPIO_Init+0x298>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d052      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017b4:	4a90      	ldr	r2, [pc, #576]	; (80019f8 <HAL_GPIO_Init+0x298>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d869      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017ba:	4a90      	ldr	r2, [pc, #576]	; (80019fc <HAL_GPIO_Init+0x29c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d04c      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017c0:	4a8e      	ldr	r2, [pc, #568]	; (80019fc <HAL_GPIO_Init+0x29c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d863      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017c6:	4a8e      	ldr	r2, [pc, #568]	; (8001a00 <HAL_GPIO_Init+0x2a0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d046      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017cc:	4a8c      	ldr	r2, [pc, #560]	; (8001a00 <HAL_GPIO_Init+0x2a0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d85d      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d82a      	bhi.n	800182c <HAL_GPIO_Init+0xcc>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d859      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <HAL_GPIO_Init+0x80>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	08001835 	.word	0x08001835
 80017e8:	08001847 	.word	0x08001847
 80017ec:	08001889 	.word	0x08001889
 80017f0:	0800188f 	.word	0x0800188f
 80017f4:	0800188f 	.word	0x0800188f
 80017f8:	0800188f 	.word	0x0800188f
 80017fc:	0800188f 	.word	0x0800188f
 8001800:	0800188f 	.word	0x0800188f
 8001804:	0800188f 	.word	0x0800188f
 8001808:	0800188f 	.word	0x0800188f
 800180c:	0800188f 	.word	0x0800188f
 8001810:	0800188f 	.word	0x0800188f
 8001814:	0800188f 	.word	0x0800188f
 8001818:	0800188f 	.word	0x0800188f
 800181c:	0800188f 	.word	0x0800188f
 8001820:	0800188f 	.word	0x0800188f
 8001824:	0800183d 	.word	0x0800183d
 8001828:	08001851 	.word	0x08001851
 800182c:	4a75      	ldr	r2, [pc, #468]	; (8001a04 <HAL_GPIO_Init+0x2a4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001832:	e02c      	b.n	800188e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	623b      	str	r3, [r7, #32]
          break;
 800183a:	e029      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	3304      	adds	r3, #4
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e024      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	3308      	adds	r3, #8
 800184c:	623b      	str	r3, [r7, #32]
          break;
 800184e:	e01f      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	330c      	adds	r3, #12
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e01a      	b.n	8001890 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001862:	2304      	movs	r3, #4
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e013      	b.n	8001890 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001870:	2308      	movs	r3, #8
 8001872:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	611a      	str	r2, [r3, #16]
          break;
 800187a:	e009      	b.n	8001890 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800187c:	2308      	movs	r3, #8
 800187e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	615a      	str	r2, [r3, #20]
          break;
 8001886:	e003      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x130>
          break;
 800188e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d801      	bhi.n	800189a <HAL_GPIO_Init+0x13a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	e001      	b.n	800189e <HAL_GPIO_Init+0x13e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3304      	adds	r3, #4
 800189e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2bff      	cmp	r3, #255	; 0xff
 80018a4:	d802      	bhi.n	80018ac <HAL_GPIO_Init+0x14c>
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x152>
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3b08      	subs	r3, #8
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	210f      	movs	r1, #15
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	401a      	ands	r2, r3
 80018c4:	6a39      	ldr	r1, [r7, #32]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	431a      	orrs	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80c1 	beq.w	8001a62 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e0:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_GPIO_Init+0x2a8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a48      	ldr	r2, [pc, #288]	; (8001a08 <HAL_GPIO_Init+0x2a8>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <HAL_GPIO_Init+0x2a8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f8:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <HAL_GPIO_Init+0x2ac>)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3c      	ldr	r2, [pc, #240]	; (8001a10 <HAL_GPIO_Init+0x2b0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d01f      	beq.n	8001964 <HAL_GPIO_Init+0x204>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3b      	ldr	r2, [pc, #236]	; (8001a14 <HAL_GPIO_Init+0x2b4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d019      	beq.n	8001960 <HAL_GPIO_Init+0x200>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3a      	ldr	r2, [pc, #232]	; (8001a18 <HAL_GPIO_Init+0x2b8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d013      	beq.n	800195c <HAL_GPIO_Init+0x1fc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a39      	ldr	r2, [pc, #228]	; (8001a1c <HAL_GPIO_Init+0x2bc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1f8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_GPIO_Init+0x2c0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1f4>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a37      	ldr	r2, [pc, #220]	; (8001a24 <HAL_GPIO_Init+0x2c4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1f0>
 800194c:	2305      	movs	r3, #5
 800194e:	e00a      	b.n	8001966 <HAL_GPIO_Init+0x206>
 8001950:	2306      	movs	r3, #6
 8001952:	e008      	b.n	8001966 <HAL_GPIO_Init+0x206>
 8001954:	2304      	movs	r3, #4
 8001956:	e006      	b.n	8001966 <HAL_GPIO_Init+0x206>
 8001958:	2303      	movs	r3, #3
 800195a:	e004      	b.n	8001966 <HAL_GPIO_Init+0x206>
 800195c:	2302      	movs	r3, #2
 800195e:	e002      	b.n	8001966 <HAL_GPIO_Init+0x206>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_GPIO_Init+0x206>
 8001964:	2300      	movs	r3, #0
 8001966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001968:	f002 0203 	and.w	r2, r2, #3
 800196c:	0092      	lsls	r2, r2, #2
 800196e:	4093      	lsls	r3, r2
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001976:	4925      	ldr	r1, [pc, #148]	; (8001a0c <HAL_GPIO_Init+0x2ac>)
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	3302      	adds	r3, #2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	4924      	ldr	r1, [pc, #144]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4920      	ldr	r1, [pc, #128]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	491a      	ldr	r1, [pc, #104]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60cb      	str	r3, [r1, #12]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4916      	ldr	r1, [pc, #88]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d025      	beq.n	8001a2c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4910      	ldr	r1, [pc, #64]	; (8001a28 <HAL_GPIO_Init+0x2c8>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e025      	b.n	8001a3a <HAL_GPIO_Init+0x2da>
 80019ee:	bf00      	nop
 80019f0:	10320000 	.word	0x10320000
 80019f4:	10310000 	.word	0x10310000
 80019f8:	10220000 	.word	0x10220000
 80019fc:	10210000 	.word	0x10210000
 8001a00:	10120000 	.word	0x10120000
 8001a04:	10110000 	.word	0x10110000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40010800 	.word	0x40010800
 8001a14:	40010c00 	.word	0x40010c00
 8001a18:	40011000 	.word	0x40011000
 8001a1c:	40011400 	.word	0x40011400
 8001a20:	40011800 	.word	0x40011800
 8001a24:	40011c00 	.word	0x40011c00
 8001a28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	4913      	ldr	r1, [pc, #76]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	490e      	ldr	r1, [pc, #56]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
 8001a52:	e006      	b.n	8001a62 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4909      	ldr	r1, [pc, #36]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	3301      	adds	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f47f ae7e 	bne.w	8001774 <HAL_GPIO_Init+0x14>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	372c      	adds	r7, #44	; 0x2c
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e272      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8087 	beq.w	8001be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad8:	4b92      	ldr	r3, [pc, #584]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d00c      	beq.n	8001afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae4:	4b8f      	ldr	r3, [pc, #572]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d112      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5e>
 8001af0:	4b8c      	ldr	r3, [pc, #560]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d10b      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afe:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d06c      	beq.n	8001be4 <HAL_RCC_OscConfig+0x12c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d168      	bne.n	8001be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e24c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x76>
 8001b20:	4b80      	ldr	r3, [pc, #512]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a7f      	ldr	r2, [pc, #508]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e02e      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x98>
 8001b36:	4b7b      	ldr	r3, [pc, #492]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a7a      	ldr	r2, [pc, #488]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b78      	ldr	r3, [pc, #480]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a77      	ldr	r2, [pc, #476]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0xbc>
 8001b5a:	4b72      	ldr	r3, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a71      	ldr	r2, [pc, #452]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b74:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6a      	ldr	r2, [pc, #424]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b68      	ldr	r3, [pc, #416]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a67      	ldr	r2, [pc, #412]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fb8a 	bl	80012ac <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fb86 	bl	80012ac <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e200      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xe4>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fb76 	bl	80012ac <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fb72 	bl	80012ac <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1ec      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x10c>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d063      	beq.n	8001cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bfe:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d11c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x18c>
 8001c0a:	4b46      	ldr	r3, [pc, #280]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x176>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e1c0      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4939      	ldr	r1, [pc, #228]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	e03a      	b.n	8001cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b36      	ldr	r3, [pc, #216]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fb2b 	bl	80012ac <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fb27 	bl	80012ac <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1a1      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4927      	ldr	r1, [pc, #156]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fb0a 	bl	80012ac <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fb06 	bl	80012ac <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e180      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03a      	beq.n	8001d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d019      	beq.n	8001d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7ff faea 	bl	80012ac <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fae6 	bl	80012ac <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e160      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f000 face 	bl	800229c <RCC_Delay>
 8001d00:	e01c      	b.n	8001d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7ff fad0 	bl	80012ac <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0e:	e00f      	b.n	8001d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff facc 	bl	80012ac <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d908      	bls.n	8001d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e146      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	42420000 	.word	0x42420000
 8001d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	4b92      	ldr	r3, [pc, #584]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1e9      	bne.n	8001d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a6 	beq.w	8001e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b8b      	ldr	r3, [pc, #556]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10d      	bne.n	8001d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b88      	ldr	r3, [pc, #544]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a87      	ldr	r2, [pc, #540]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b85      	ldr	r3, [pc, #532]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b82      	ldr	r3, [pc, #520]	; (8001f80 <HAL_RCC_OscConfig+0x4c8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b7f      	ldr	r3, [pc, #508]	; (8001f80 <HAL_RCC_OscConfig+0x4c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7e      	ldr	r2, [pc, #504]	; (8001f80 <HAL_RCC_OscConfig+0x4c8>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fa8d 	bl	80012ac <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7ff fa89 	bl	80012ac <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b64      	cmp	r3, #100	; 0x64
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e103      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b75      	ldr	r3, [pc, #468]	; (8001f80 <HAL_RCC_OscConfig+0x4c8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x312>
 8001dbc:	4b6f      	ldr	r3, [pc, #444]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a6e      	ldr	r2, [pc, #440]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	e02d      	b.n	8001e26 <HAL_RCC_OscConfig+0x36e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x334>
 8001dd2:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a69      	ldr	r2, [pc, #420]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	4b67      	ldr	r3, [pc, #412]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a66      	ldr	r2, [pc, #408]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	e01c      	b.n	8001e26 <HAL_RCC_OscConfig+0x36e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x356>
 8001df4:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a60      	ldr	r2, [pc, #384]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	4b5e      	ldr	r3, [pc, #376]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a5d      	ldr	r2, [pc, #372]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	e00b      	b.n	8001e26 <HAL_RCC_OscConfig+0x36e>
 8001e0e:	4b5b      	ldr	r3, [pc, #364]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a5a      	ldr	r2, [pc, #360]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a57      	ldr	r2, [pc, #348]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d015      	beq.n	8001e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fa3d 	bl	80012ac <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff fa39 	bl	80012ac <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0b1      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ee      	beq.n	8001e36 <HAL_RCC_OscConfig+0x37e>
 8001e58:	e014      	b.n	8001e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fa27 	bl	80012ac <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff fa23 	bl	80012ac <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e09b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	4b40      	ldr	r3, [pc, #256]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1ee      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b3c      	ldr	r3, [pc, #240]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a3b      	ldr	r2, [pc, #236]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8087 	beq.w	8001fae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d061      	beq.n	8001f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d146      	bne.n	8001f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb4:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff f9f7 	bl	80012ac <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f9f3 	bl	80012ac <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e06d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d108      	bne.n	8001efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eea:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	4921      	ldr	r1, [pc, #132]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efc:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a19      	ldr	r1, [r3, #32]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	491b      	ldr	r1, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f9c7 	bl	80012ac <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff f9c3 	bl	80012ac <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e03d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x46a>
 8001f40:	e035      	b.n	8001fae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff f9b0 	bl	80012ac <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f9ac 	bl	80012ac <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e026      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x498>
 8001f6e:	e01e      	b.n	8001fae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e019      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
 8001f84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x500>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0d0      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d910      	bls.n	8002000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	4965      	ldr	r1, [pc, #404]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0b8      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002030:	4b53      	ldr	r3, [pc, #332]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800203a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	494d      	ldr	r1, [pc, #308]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d040      	beq.n	80020dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d115      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e07f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e073      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e06b      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4936      	ldr	r1, [pc, #216]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7ff f8fe 	bl	80012ac <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7ff f8fa 	bl	80012ac <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e053      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d210      	bcs.n	800210c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	4922      	ldr	r1, [pc, #136]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e032      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4916      	ldr	r1, [pc, #88]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	490e      	ldr	r1, [pc, #56]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214a:	f000 f821 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800214e:	4602      	mov	r2, r0
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	490a      	ldr	r1, [pc, #40]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	5ccb      	ldrb	r3, [r1, r3]
 800215e:	fa22 f303 	lsr.w	r3, r2, r3
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1cc>)
 8002164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1d0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f85c 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000
 8002180:	40021000 	.word	0x40021000
 8002184:	08004144 	.word	0x08004144
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_RCC_GetSysClockFreq+0x94>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d002      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x36>
 80021be:	e027      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_GetSysClockFreq+0x98>)
 80021c2:	613b      	str	r3, [r7, #16]
      break;
 80021c4:	e027      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	0c9b      	lsrs	r3, r3, #18
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	4a17      	ldr	r2, [pc, #92]	; (800222c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d010      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_RCC_GetSysClockFreq+0x94>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0c5b      	lsrs	r3, r3, #17
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	4a11      	ldr	r2, [pc, #68]	; (8002230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_RCC_GetSysClockFreq+0x98>)
 80021f2:	fb03 f202 	mul.w	r2, r3, r2
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e004      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	613b      	str	r3, [r7, #16]
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetSysClockFreq+0x98>)
 8002212:	613b      	str	r3, [r7, #16]
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	693b      	ldr	r3, [r7, #16]
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	007a1200 	.word	0x007a1200
 800222c:	0800415c 	.word	0x0800415c
 8002230:	0800416c 	.word	0x0800416c
 8002234:	003d0900 	.word	0x003d0900

08002238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <HAL_RCC_GetHCLKFreq+0x10>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	20000000 	.word	0x20000000

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002250:	f7ff fff2 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4903      	ldr	r1, [pc, #12]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	08004154 	.word	0x08004154

08002274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002278:	f7ff ffde 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	0adb      	lsrs	r3, r3, #11
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4903      	ldr	r1, [pc, #12]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	08004154 	.word	0x08004154

0800229c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <RCC_Delay+0x34>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <RCC_Delay+0x38>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0a5b      	lsrs	r3, r3, #9
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b8:	bf00      	nop
  }
  while (Delay --);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	60fa      	str	r2, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f9      	bne.n	80022b8 <RCC_Delay+0x1c>
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	20000000 	.word	0x20000000
 80022d4:	10624dd3 	.word	0x10624dd3

080022d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e041      	b.n	800236e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fe6a 	bl	8000fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f000 fda6 	bl	8002e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d001      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e044      	b.n	800241a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <HAL_TIM_Base_Start_IT+0xac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d018      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x6c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_TIM_Base_Start_IT+0xb0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x6c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c4:	d00e      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x6c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <HAL_TIM_Base_Start_IT+0xb4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x6c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_TIM_Base_Start_IT+0xb8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x6c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_TIM_Base_Start_IT+0xbc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d111      	bne.n	8002408 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d010      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002406:	e007      	b.n	8002418 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40012c00 	.word	0x40012c00
 8002428:	40013400 	.word	0x40013400
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800
 8002434:	40000c00 	.word	0x40000c00

08002438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e041      	b.n	80024ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f839 	bl	80024d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f000 fcf6 	bl	8002e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_TIM_PWM_Start+0x24>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e022      	b.n	8002552 <HAL_TIM_PWM_Start+0x6a>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b04      	cmp	r3, #4
 8002510:	d109      	bne.n	8002526 <HAL_TIM_PWM_Start+0x3e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	e015      	b.n	8002552 <HAL_TIM_PWM_Start+0x6a>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d109      	bne.n	8002540 <HAL_TIM_PWM_Start+0x58>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e008      	b.n	8002552 <HAL_TIM_PWM_Start+0x6a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e072      	b.n	8002640 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d104      	bne.n	800256a <HAL_TIM_PWM_Start+0x82>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002568:	e013      	b.n	8002592 <HAL_TIM_PWM_Start+0xaa>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d104      	bne.n	800257a <HAL_TIM_PWM_Start+0x92>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002578:	e00b      	b.n	8002592 <HAL_TIM_PWM_Start+0xaa>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d104      	bne.n	800258a <HAL_TIM_PWM_Start+0xa2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002588:	e003      	b.n	8002592 <HAL_TIM_PWM_Start+0xaa>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 ff20 	bl	80033e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a28      	ldr	r2, [pc, #160]	; (8002648 <HAL_TIM_PWM_Start+0x160>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_TIM_PWM_Start+0xcc>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <HAL_TIM_PWM_Start+0x164>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_TIM_PWM_Start+0xd0>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_TIM_PWM_Start+0xd2>
 80025b8:	2300      	movs	r3, #0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_TIM_PWM_Start+0x160>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d018      	beq.n	800260a <HAL_TIM_PWM_Start+0x122>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_TIM_PWM_Start+0x164>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_TIM_PWM_Start+0x122>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d00e      	beq.n	800260a <HAL_TIM_PWM_Start+0x122>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_TIM_PWM_Start+0x168>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_TIM_PWM_Start+0x122>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a16      	ldr	r2, [pc, #88]	; (8002654 <HAL_TIM_PWM_Start+0x16c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_TIM_PWM_Start+0x122>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <HAL_TIM_PWM_Start+0x170>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b06      	cmp	r3, #6
 800261a:	d010      	beq.n	800263e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262c:	e007      	b.n	800263e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40013400 	.word	0x40013400
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800
 8002658:	40000c00 	.word	0x40000c00

0800265c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e093      	b.n	8002798 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d106      	bne.n	800268a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7fe fb97 	bl	8000db8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a0:	f023 0307 	bic.w	r3, r3, #7
 80026a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f000 fbd9 	bl	8002e68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	4313      	orrs	r3, r2
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026fc:	f023 030c 	bic.w	r3, r3, #12
 8002700:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	4313      	orrs	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	011a      	lsls	r2, r3, #4
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	031b      	lsls	r3, r3, #12
 800272c:	4313      	orrs	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800273a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	4313      	orrs	r3, r2
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80027c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d110      	bne.n	80027f2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80027d6:	7b7b      	ldrb	r3, [r7, #13]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d001      	beq.n	80027e0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e089      	b.n	80028f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f0:	e031      	b.n	8002856 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d110      	bne.n	800281a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80027fe:	7b3b      	ldrb	r3, [r7, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d001      	beq.n	8002808 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e075      	b.n	80028f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002818:	e01d      	b.n	8002856 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d108      	bne.n	8002832 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002826:	7b7b      	ldrb	r3, [r7, #13]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d102      	bne.n	8002832 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800282c:	7b3b      	ldrb	r3, [r7, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d001      	beq.n	8002836 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e05e      	b.n	80028f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2202      	movs	r2, #2
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2202      	movs	r2, #2
 8002852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_TIM_Encoder_Start_IT+0xc4>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d010      	beq.n	8002884 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002862:	e01f      	b.n	80028a4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fdb7 	bl	80033e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0202 	orr.w	r2, r2, #2
 8002880:	60da      	str	r2, [r3, #12]
      break;
 8002882:	e02e      	b.n	80028e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	2104      	movs	r1, #4
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fda7 	bl	80033e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0204 	orr.w	r2, r2, #4
 80028a0:	60da      	str	r2, [r3, #12]
      break;
 80028a2:	e01e      	b.n	80028e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2201      	movs	r2, #1
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fd97 	bl	80033e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2201      	movs	r2, #1
 80028b8:	2104      	movs	r1, #4
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fd90 	bl	80033e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0202 	orr.w	r2, r2, #2
 80028ce:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0204 	orr.w	r2, r2, #4
 80028de:	60da      	str	r2, [r3, #12]
      break;
 80028e0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d122      	bne.n	8002958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	d11b      	bne.n	8002958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0202 	mvn.w	r2, #2
 8002928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa76 	bl	8002e30 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa69 	bl	8002e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fa78 	bl	8002e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d122      	bne.n	80029ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b04      	cmp	r3, #4
 8002972:	d11b      	bne.n	80029ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0204 	mvn.w	r2, #4
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa4c 	bl	8002e30 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa3f 	bl	8002e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa4e 	bl	8002e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d122      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d11b      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0208 	mvn.w	r2, #8
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2204      	movs	r2, #4
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa22 	bl	8002e30 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa15 	bl	8002e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fa24 	bl	8002e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d122      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0210 	mvn.w	r2, #16
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2208      	movs	r2, #8
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9f8 	bl	8002e30 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9eb 	bl	8002e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f9fa 	bl	8002e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10e      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d107      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0201 	mvn.w	r2, #1
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd fcb6 	bl	80003ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a98:	2b80      	cmp	r3, #128	; 0x80
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fd84 	bl	80035b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d107      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f9be 	bl	8002e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d107      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0220 	mvn.w	r2, #32
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fd4f 	bl	80035a2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0ae      	b.n	8002c88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	f200 809f 	bhi.w	8002c78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002c79 	.word	0x08002c79
 8002b48:	08002c79 	.word	0x08002c79
 8002b4c:	08002c79 	.word	0x08002c79
 8002b50:	08002bb5 	.word	0x08002bb5
 8002b54:	08002c79 	.word	0x08002c79
 8002b58:	08002c79 	.word	0x08002c79
 8002b5c:	08002c79 	.word	0x08002c79
 8002b60:	08002bf7 	.word	0x08002bf7
 8002b64:	08002c79 	.word	0x08002c79
 8002b68:	08002c79 	.word	0x08002c79
 8002b6c:	08002c79 	.word	0x08002c79
 8002b70:	08002c37 	.word	0x08002c37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f9ee 	bl	8002f5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0208 	orr.w	r2, r2, #8
 8002b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6999      	ldr	r1, [r3, #24]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	619a      	str	r2, [r3, #24]
      break;
 8002bb2:	e064      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fa3e 	bl	800303c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
      break;
 8002bf4:	e043      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fa91 	bl	8003124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0208 	orr.w	r2, r2, #8
 8002c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0204 	bic.w	r2, r2, #4
 8002c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69d9      	ldr	r1, [r3, #28]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	61da      	str	r2, [r3, #28]
      break;
 8002c34:	e023      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fae5 	bl	800320c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69d9      	ldr	r1, [r3, #28]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	61da      	str	r2, [r3, #28]
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_TIM_ConfigClockSource+0x1c>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e0b4      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x186>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce4:	d03e      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0xd4>
 8002ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cea:	f200 8087 	bhi.w	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf2:	f000 8086 	beq.w	8002e02 <HAL_TIM_ConfigClockSource+0x172>
 8002cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfa:	d87f      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b70      	cmp	r3, #112	; 0x70
 8002cfe:	d01a      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0xa6>
 8002d00:	2b70      	cmp	r3, #112	; 0x70
 8002d02:	d87b      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b60      	cmp	r3, #96	; 0x60
 8002d06:	d050      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x11a>
 8002d08:	2b60      	cmp	r3, #96	; 0x60
 8002d0a:	d877      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b50      	cmp	r3, #80	; 0x50
 8002d0e:	d03c      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0xfa>
 8002d10:	2b50      	cmp	r3, #80	; 0x50
 8002d12:	d873      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d058      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x13a>
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d86f      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d1c:	2b30      	cmp	r3, #48	; 0x30
 8002d1e:	d064      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x15a>
 8002d20:	2b30      	cmp	r3, #48	; 0x30
 8002d22:	d86b      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d060      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x15a>
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d867      	bhi.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d05c      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x15a>
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	d05a      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x15a>
 8002d34:	e062      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6899      	ldr	r1, [r3, #8]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f000 fb2c 	bl	80033a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	609a      	str	r2, [r3, #8]
      break;
 8002d62:	e04f      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6899      	ldr	r1, [r3, #8]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f000 fb15 	bl	80033a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d86:	609a      	str	r2, [r3, #8]
      break;
 8002d88:	e03c      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f000 fa8c 	bl	80032b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2150      	movs	r1, #80	; 0x50
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fae3 	bl	800336e <TIM_ITRx_SetConfig>
      break;
 8002da8:	e02c      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f000 faaa 	bl	8003310 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2160      	movs	r1, #96	; 0x60
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fad3 	bl	800336e <TIM_ITRx_SetConfig>
      break;
 8002dc8:	e01c      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f000 fa6c 	bl	80032b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2140      	movs	r1, #64	; 0x40
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fac3 	bl	800336e <TIM_ITRx_SetConfig>
      break;
 8002de8:	e00c      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	f000 faba 	bl	800336e <TIM_ITRx_SetConfig>
      break;
 8002dfa:	e003      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002e00:	e000      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
	...

08002e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a33      	ldr	r2, [pc, #204]	; (8002f48 <TIM_Base_SetConfig+0xe0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a32      	ldr	r2, [pc, #200]	; (8002f4c <TIM_Base_SetConfig+0xe4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00f      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d00b      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a2f      	ldr	r2, [pc, #188]	; (8002f50 <TIM_Base_SetConfig+0xe8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a2e      	ldr	r2, [pc, #184]	; (8002f54 <TIM_Base_SetConfig+0xec>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <TIM_Base_SetConfig+0x40>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a2d      	ldr	r2, [pc, #180]	; (8002f58 <TIM_Base_SetConfig+0xf0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d108      	bne.n	8002eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <TIM_Base_SetConfig+0xe0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <TIM_Base_SetConfig+0x82>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <TIM_Base_SetConfig+0xe4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00f      	beq.n	8002eea <TIM_Base_SetConfig+0x82>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed0:	d00b      	beq.n	8002eea <TIM_Base_SetConfig+0x82>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <TIM_Base_SetConfig+0xe8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <TIM_Base_SetConfig+0x82>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <TIM_Base_SetConfig+0xec>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_Base_SetConfig+0x82>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <TIM_Base_SetConfig+0xf0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d108      	bne.n	8002efc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <TIM_Base_SetConfig+0xe0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_Base_SetConfig+0xc8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <TIM_Base_SetConfig+0xe4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d103      	bne.n	8002f38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	615a      	str	r2, [r3, #20]
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40013400 	.word	0x40013400
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800
 8002f58:	40000c00 	.word	0x40000c00

08002f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f023 0201 	bic.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 0302 	bic.w	r3, r3, #2
 8002fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a20      	ldr	r2, [pc, #128]	; (8003034 <TIM_OC1_SetConfig+0xd8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_OC1_SetConfig+0x64>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <TIM_OC1_SetConfig+0xdc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10c      	bne.n	8002fda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0308 	bic.w	r3, r3, #8
 8002fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a15      	ldr	r2, [pc, #84]	; (8003034 <TIM_OC1_SetConfig+0xd8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_OC1_SetConfig+0x8e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a14      	ldr	r2, [pc, #80]	; (8003038 <TIM_OC1_SetConfig+0xdc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d111      	bne.n	800300e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	621a      	str	r2, [r3, #32]
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40013400 	.word	0x40013400

0800303c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 0210 	bic.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0320 	bic.w	r3, r3, #32
 8003086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a21      	ldr	r2, [pc, #132]	; (800311c <TIM_OC2_SetConfig+0xe0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC2_SetConfig+0x68>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <TIM_OC2_SetConfig+0xe4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10d      	bne.n	80030c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a16      	ldr	r2, [pc, #88]	; (800311c <TIM_OC2_SetConfig+0xe0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_OC2_SetConfig+0x94>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a15      	ldr	r2, [pc, #84]	; (8003120 <TIM_OC2_SetConfig+0xe4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d113      	bne.n	80030f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	40012c00 	.word	0x40012c00
 8003120:	40013400 	.word	0x40013400

08003124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800316c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a21      	ldr	r2, [pc, #132]	; (8003204 <TIM_OC3_SetConfig+0xe0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_OC3_SetConfig+0x66>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <TIM_OC3_SetConfig+0xe4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10d      	bne.n	80031a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a16      	ldr	r2, [pc, #88]	; (8003204 <TIM_OC3_SetConfig+0xe0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_OC3_SetConfig+0x92>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a15      	ldr	r2, [pc, #84]	; (8003208 <TIM_OC3_SetConfig+0xe4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d113      	bne.n	80031de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	621a      	str	r2, [r3, #32]
}
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40013400 	.word	0x40013400

0800320c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	031b      	lsls	r3, r3, #12
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a11      	ldr	r2, [pc, #68]	; (80032ac <TIM_OC4_SetConfig+0xa0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <TIM_OC4_SetConfig+0x68>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <TIM_OC4_SetConfig+0xa4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d109      	bne.n	8003288 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800327a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40013400 	.word	0x40013400

080032b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 030a 	bic.w	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0210 	bic.w	r2, r3, #16
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800333a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	031b      	lsls	r3, r3, #12
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800334c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	621a      	str	r2, [r3, #32]
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	f043 0307 	orr.w	r3, r3, #7
 8003390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	021a      	lsls	r2, r3, #8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	609a      	str	r2, [r3, #8]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2201      	movs	r2, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	431a      	orrs	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800343c:	2302      	movs	r3, #2
 800343e:	e050      	b.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d018      	beq.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003496:	d00e      	beq.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10c      	bne.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	40013400 	.word	0x40013400
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800
 80034fc:	40000c00 	.word	0x40000c00

08003500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003518:	2302      	movs	r3, #2
 800351a:	e03d      	b.n	8003598 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e042      	b.n	800365e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7fd fd8b 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2224      	movs	r2, #36	; 0x24
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003608:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fcd4 	bl	8003fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800361e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800362e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800363e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b20      	cmp	r3, #32
 800367e:	d112      	bne.n	80036a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_UART_Receive_IT+0x26>
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e00b      	b.n	80036a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	461a      	mov	r2, r3
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fab6 	bl	8003c0e <UART_Start_Receive_IT>
 80036a2:	4603      	mov	r3, r0
 80036a4:	e000      	b.n	80036a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0ba      	sub	sp, #232	; 0xe8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_UART_IRQHandler+0x66>
 8003702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fb93 	bl	8003e3a <UART_Receive_IT>
      return;
 8003714:	e25b      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80de 	beq.w	80038dc <HAL_UART_IRQHandler+0x22c>
 8003720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800372c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003730:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80d1 	beq.w	80038dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_UART_IRQHandler+0xae>
 8003746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f043 0201 	orr.w	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
 800376a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_UART_IRQHandler+0xf6>
 800378e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d011      	beq.n	80037d6 <HAL_UART_IRQHandler+0x126>
 80037b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f043 0208 	orr.w	r2, r3, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 81f2 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_UART_IRQHandler+0x14e>
 80037ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fb1e 	bl	8003e3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <HAL_UART_IRQHandler+0x17a>
 8003822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d04f      	beq.n	80038ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa28 	bl	8003c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d041      	beq.n	80038c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800386a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800386e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1d9      	bne.n	800383e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	4a7e      	ldr	r2, [pc, #504]	; (8003a90 <HAL_UART_IRQHandler+0x3e0>)
 8003898:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fe56 	bl	8001550 <HAL_DMA_Abort_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038b4:	4610      	mov	r0, r2
 80038b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	e00e      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f993 	bl	8003be6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00a      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f98f 	bl	8003be6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e006      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f98b 	bl	8003be6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80038d6:	e175      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	bf00      	nop
    return;
 80038da:	e173      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 814f 	bne.w	8003b84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8148 	beq.w	8003b84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 8141 	beq.w	8003b84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80b6 	beq.w	8003a94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003934:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8145 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003946:	429a      	cmp	r2, r3
 8003948:	f080 813e 	bcs.w	8003bc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003952:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b20      	cmp	r3, #32
 800395c:	f000 8088 	beq.w	8003a70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003976:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800397a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800397e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800398c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003998:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1d9      	bne.n	8003960 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e1      	bne.n	80039ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3314      	adds	r3, #20
 80039ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e3      	bne.n	80039e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a40:	f023 0310 	bic.w	r3, r3, #16
 8003a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a52:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e3      	bne.n	8003a2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fd35 	bl	80014da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8b6 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a8c:	e09c      	b.n	8003bc8 <HAL_UART_IRQHandler+0x518>
 8003a8e:	bf00      	nop
 8003a90:	08003d45 	.word	0x08003d45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 808e 	beq.w	8003bcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8089 	beq.w	8003bcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ade:	647a      	str	r2, [r7, #68]	; 0x44
 8003ae0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e3      	bne.n	8003aba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	623b      	str	r3, [r7, #32]
   return(result);
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b16:	633a      	str	r2, [r7, #48]	; 0x30
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e3      	bne.n	8003af2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0310 	bic.w	r3, r3, #16
 8003b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b5c:	61fa      	str	r2, [r7, #28]
 8003b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e3      	bne.n	8003b38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f83b 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b82:	e023      	b.n	8003bcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x4f4>
 8003b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f8e5 	bl	8003d6c <UART_Transmit_IT>
    return;
 8003ba2:	e014      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00e      	beq.n	8003bce <HAL_UART_IRQHandler+0x51e>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f924 	bl	8003e0a <UART_EndTransmit_IT>
    return;
 8003bc2:	e004      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
    return;
 8003bc4:	bf00      	nop
 8003bc6:	e002      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
      return;
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
      return;
 8003bcc:	bf00      	nop
  }
}
 8003bce:	37e8      	adds	r7, #232	; 0xe8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2222      	movs	r2, #34	; 0x22
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0220 	orr.w	r2, r2, #32
 8003c72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b095      	sub	sp, #84	; 0x54
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ca8:	643a      	str	r2, [r7, #64]	; 0x40
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d119      	bne.n	8003d2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d18:	61ba      	str	r2, [r7, #24]
 8003d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	613b      	str	r3, [r7, #16]
   return(result);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d3a:	bf00      	nop
 8003d3c:	3754      	adds	r7, #84	; 0x54
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff ff41 	bl	8003be6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b21      	cmp	r3, #33	; 0x21
 8003d7e:	d13e      	bne.n	8003dfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d88:	d114      	bne.n	8003db4 <UART_Transmit_IT+0x48>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d110      	bne.n	8003db4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	1c9a      	adds	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]
 8003db2:	e008      	b.n	8003dc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	1c59      	adds	r1, r3, #1
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6211      	str	r1, [r2, #32]
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10f      	bne.n	8003dfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fed2 	bl	8003bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b08c      	sub	sp, #48	; 0x30
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b22      	cmp	r3, #34	; 0x22
 8003e4c:	f040 80ae 	bne.w	8003fac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e58:	d117      	bne.n	8003e8a <UART_Receive_IT+0x50>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d113      	bne.n	8003e8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	1c9a      	adds	r2, r3, #2
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
 8003e88:	e026      	b.n	8003ed8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9c:	d007      	beq.n	8003eae <UART_Receive_IT+0x74>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <UART_Receive_IT+0x82>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e008      	b.n	8003ece <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d15d      	bne.n	8003fa8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0220 	bic.w	r2, r2, #32
 8003efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d135      	bne.n	8003f9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	613b      	str	r3, [r7, #16]
   return(result);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 0310 	bic.w	r3, r3, #16
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	623a      	str	r2, [r7, #32]
 8003f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	69f9      	ldr	r1, [r7, #28]
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d10a      	bne.n	8003f90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff fe2e 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
 8003f9c:	e002      	b.n	8003fa4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc f9c2 	bl	8000328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e002      	b.n	8003fae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3730      	adds	r7, #48	; 0x30
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ff2:	f023 030c 	bic.w	r3, r3, #12
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <UART_SetConfig+0x114>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d103      	bne.n	8004028 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe f928 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	e002      	b.n	800402e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe f910 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 800402c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009a      	lsls	r2, r3, #2
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <UART_SetConfig+0x118>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	0119      	lsls	r1, r3, #4
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009a      	lsls	r2, r3, #2
 8004058:	441a      	add	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	fbb2 f2f3 	udiv	r2, r2, r3
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <UART_SetConfig+0x118>)
 8004066:	fba3 0302 	umull	r0, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2064      	movs	r0, #100	; 0x64
 800406e:	fb00 f303 	mul.w	r3, r0, r3
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	3332      	adds	r3, #50	; 0x32
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <UART_SetConfig+0x118>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004084:	4419      	add	r1, r3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009a      	lsls	r2, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	fbb2 f2f3 	udiv	r2, r2, r3
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <UART_SetConfig+0x118>)
 800409e:	fba3 0302 	umull	r0, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2064      	movs	r0, #100	; 0x64
 80040a6:	fb00 f303 	mul.w	r3, r0, r3
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	3332      	adds	r3, #50	; 0x32
 80040b0:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <UART_SetConfig+0x118>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 020f 	and.w	r2, r3, #15
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	440a      	add	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40013800 	.word	0x40013800
 80040d0:	51eb851f 	.word	0x51eb851f

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	2600      	movs	r6, #0
 80040d8:	4d0c      	ldr	r5, [pc, #48]	; (800410c <__libc_init_array+0x38>)
 80040da:	4c0d      	ldr	r4, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040dc:	1b64      	subs	r4, r4, r5
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	42a6      	cmp	r6, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	f000 f822 	bl	800412c <_init>
 80040e8:	2600      	movs	r6, #0
 80040ea:	4d0a      	ldr	r5, [pc, #40]	; (8004114 <__libc_init_array+0x40>)
 80040ec:	4c0a      	ldr	r4, [pc, #40]	; (8004118 <__libc_init_array+0x44>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	42a6      	cmp	r6, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fc:	4798      	blx	r3
 80040fe:	3601      	adds	r6, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	f855 3b04 	ldr.w	r3, [r5], #4
 8004106:	4798      	blx	r3
 8004108:	3601      	adds	r6, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	08004170 	.word	0x08004170
 8004110:	08004170 	.word	0x08004170
 8004114:	08004170 	.word	0x08004170
 8004118:	08004174 	.word	0x08004174

0800411c <memset>:
 800411c:	4603      	mov	r3, r0
 800411e:	4402      	add	r2, r0
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	f803 1b01 	strb.w	r1, [r3], #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr
