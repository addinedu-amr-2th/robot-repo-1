
uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024ac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026bc  080026bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026bc  080026bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026bc  080026bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000000c  080026d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080026d0  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b3e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001740  00000000  00000000  00027b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  000292b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00029980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e53  00000000  00000000  00029fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fd1  00000000  00000000  00042e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904a3  00000000  00000000  0004bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c0  00000000  00000000  000dc2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002678 	.word	0x08002678

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002678 	.word	0x08002678

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <MX_GPIO_Init+0x40>)
 8000230:	f043 0320 	orr.w	r3, r3, #32
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <MX_GPIO_Init+0x40>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0320 	and.w	r3, r3, #32
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <MX_GPIO_Init+0x40>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a07      	ldr	r2, [pc, #28]	; (8000264 <MX_GPIO_Init+0x40>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <MX_GPIO_Init+0x40>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	603b      	str	r3, [r7, #0]
 8000258:	683b      	ldr	r3, [r7, #0]

}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40021000 	.word	0x40021000

08000268 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <HAL_UART_RxCpltCallback+0xbc>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d150      	bne.n	800031a <HAL_UART_RxCpltCallback+0xb2>
	{
		uint8_t len = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	73fb      	strb	r3, [r7, #15]
		len = process_protocol();
 800027c:	f000 f8c4 	bl	8000408 <process_protocol>
 8000280:	4603      	mov	r3, r0
 8000282:	73fb      	strb	r3, [r7, #15]

		if(len != 0)
 8000284:	7bfb      	ldrb	r3, [r7, #15]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d03d      	beq.n	8000306 <HAL_UART_RxCpltCallback+0x9e>
		{
			// response for command
			uint8_t cmd = g_recv_data[0];
 800028a:	4b27      	ldr	r3, [pc, #156]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	73bb      	strb	r3, [r7, #14]
			uint8_t need_res = g_recv_data[len - 1];
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	3b01      	subs	r3, #1
 8000294:	4a24      	ldr	r2, [pc, #144]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 8000296:	5cd3      	ldrb	r3, [r2, r3]
 8000298:	737b      	strb	r3, [r7, #13]

			if(cmd == 0x01)
 800029a:	7bbb      	ldrb	r3, [r7, #14]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d132      	bne.n	8000306 <HAL_UART_RxCpltCallback+0x9e>
			{
				g_mc_motor_speed = (int16_t)((g_recv_data[1] << 8) | g_recv_data[2]);
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 80002a2:	785b      	ldrb	r3, [r3, #1]
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	b21a      	sxth	r2, r3
 80002a8:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 80002aa:	789b      	ldrb	r3, [r3, #2]
 80002ac:	b21b      	sxth	r3, r3
 80002ae:	4313      	orrs	r3, r2
 80002b0:	b21a      	sxth	r2, r3
 80002b2:	4b1e      	ldr	r3, [pc, #120]	; (800032c <HAL_UART_RxCpltCallback+0xc4>)
 80002b4:	801a      	strh	r2, [r3, #0]
				g_md_motor_speed = (int16_t)((g_recv_data[3] << 8) | g_recv_data[4]);
 80002b6:	4b1c      	ldr	r3, [pc, #112]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 80002b8:	78db      	ldrb	r3, [r3, #3]
 80002ba:	021b      	lsls	r3, r3, #8
 80002bc:	b21a      	sxth	r2, r3
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 80002c0:	791b      	ldrb	r3, [r3, #4]
 80002c2:	b21b      	sxth	r3, r3
 80002c4:	4313      	orrs	r3, r2
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <HAL_UART_RxCpltCallback+0xc8>)
 80002ca:	801a      	strh	r2, [r3, #0]
				g_ma_motor_speed = (int16_t)((g_recv_data[5] << 8) | g_recv_data[6]);
 80002cc:	4b16      	ldr	r3, [pc, #88]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 80002ce:	795b      	ldrb	r3, [r3, #5]
 80002d0:	021b      	lsls	r3, r3, #8
 80002d2:	b21a      	sxth	r2, r3
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 80002d6:	799b      	ldrb	r3, [r3, #6]
 80002d8:	b21b      	sxth	r3, r3
 80002da:	4313      	orrs	r3, r2
 80002dc:	b21a      	sxth	r2, r3
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <HAL_UART_RxCpltCallback+0xcc>)
 80002e0:	801a      	strh	r2, [r3, #0]
				g_mb_motor_speed = (int16_t)((g_recv_data[7] << 8) | g_recv_data[8]);
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 80002e4:	79db      	ldrb	r3, [r3, #7]
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	b21a      	sxth	r2, r3
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <HAL_UART_RxCpltCallback+0xc0>)
 80002ec:	7a1b      	ldrb	r3, [r3, #8]
 80002ee:	b21b      	sxth	r3, r3
 80002f0:	4313      	orrs	r3, r2
 80002f2:	b21a      	sxth	r2, r3
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <HAL_UART_RxCpltCallback+0xd0>)
 80002f6:	801a      	strh	r2, [r3, #0]

				if(need_res)
 80002f8:	7b7b      	ldrb	r3, [r7, #13]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d003      	beq.n	8000306 <HAL_UART_RxCpltCallback+0x9e>
				{
					send_resonse_protocol(len);
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f8ff 	bl	8000504 <send_resonse_protocol>
				}
			}
		}
		HAL_UART_Receive_IT(&huart1, &g_rx_buf[g_rx_index], 1);
 8000306:	4b0d      	ldr	r3, [pc, #52]	; (800033c <HAL_UART_RxCpltCallback+0xd4>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <HAL_UART_RxCpltCallback+0xd8>)
 800030e:	4413      	add	r3, r2
 8000310:	2201      	movs	r2, #1
 8000312:	4619      	mov	r1, r3
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <HAL_UART_RxCpltCallback+0xbc>)
 8000316:	f001 fbde 	bl	8001ad6 <HAL_UART_Receive_IT>
	}
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000234 	.word	0x20000234
 8000328:	20000128 	.word	0x20000128
 800032c:	2000022e 	.word	0x2000022e
 8000330:	20000230 	.word	0x20000230
 8000334:	2000022a 	.word	0x2000022a
 8000338:	2000022c 	.word	0x2000022c
 800033c:	20000228 	.word	0x20000228
 8000340:	20000028 	.word	0x20000028

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f000 fa9c 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f816 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000350:	f7ff ff68 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000354:	f000 f9f2 	bl	800073c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &g_rx_buf[g_rx_index], 1);
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <main+0x2c>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <main+0x30>)
 8000360:	4413      	add	r3, r2
 8000362:	2201      	movs	r2, #1
 8000364:	4619      	mov	r1, r3
 8000366:	4804      	ldr	r0, [pc, #16]	; (8000378 <main+0x34>)
 8000368:	f001 fbb5 	bl	8001ad6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800036c:	e7fe      	b.n	800036c <main+0x28>
 800036e:	bf00      	nop
 8000370:	20000228 	.word	0x20000228
 8000374:	20000028 	.word	0x20000028
 8000378:	20000234 	.word	0x20000234

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b090      	sub	sp, #64	; 0x40
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0318 	add.w	r3, r7, #24
 8000386:	2228      	movs	r2, #40	; 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f002 f96c 	bl	8002668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039e:	2301      	movs	r3, #1
 80003a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	2301      	movs	r3, #1
 80003ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b0:	2302      	movs	r3, #2
 80003b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	f107 0318 	add.w	r3, r7, #24
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fea3 	bl	8001110 <HAL_RCC_OscConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003d0:	f000 f945 	bl	800065e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	230f      	movs	r3, #15
 80003d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d8:	2302      	movs	r3, #2
 80003da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2102      	movs	r1, #2
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 f910 	bl	8001614 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003fa:	f000 f930 	bl	800065e <Error_Handler>
  }
}
 80003fe:	bf00      	nop
 8000400:	3740      	adds	r7, #64	; 0x40
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <process_protocol>:

/* USER CODE BEGIN 4 */
uint8_t process_protocol()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	g_rx_index++;
 800040e:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <process_protocol+0xf0>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	3301      	adds	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b38      	ldr	r3, [pc, #224]	; (80004f8 <process_protocol+0xf0>)
 8000418:	701a      	strb	r2, [r3, #0]

	if(g_rx_index > 6)
 800041a:	4b37      	ldr	r3, [pc, #220]	; (80004f8 <process_protocol+0xf0>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b06      	cmp	r3, #6
 8000420:	d964      	bls.n	80004ec <process_protocol+0xe4>
	{
		if(g_rx_buf[g_rx_index - 1] == 0xFD)
 8000422:	4b35      	ldr	r3, [pc, #212]	; (80004f8 <process_protocol+0xf0>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	3b01      	subs	r3, #1
 8000428:	4a34      	ldr	r2, [pc, #208]	; (80004fc <process_protocol+0xf4>)
 800042a:	5cd3      	ldrb	r3, [r2, r3]
 800042c:	2bfd      	cmp	r3, #253	; 0xfd
 800042e:	d15d      	bne.n	80004ec <process_protocol+0xe4>
		{
		  if(g_rx_buf[g_rx_index - 2] == 0xFA)
 8000430:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <process_protocol+0xf0>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3b02      	subs	r3, #2
 8000436:	4a31      	ldr	r2, [pc, #196]	; (80004fc <process_protocol+0xf4>)
 8000438:	5cd3      	ldrb	r3, [r2, r3]
 800043a:	2bfa      	cmp	r3, #250	; 0xfa
 800043c:	d156      	bne.n	80004ec <process_protocol+0xe4>
		  {
			uint8_t packet_len = g_rx_buf[g_rx_index - 4];
 800043e:	4b2e      	ldr	r3, [pc, #184]	; (80004f8 <process_protocol+0xf0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	3b04      	subs	r3, #4
 8000444:	4a2d      	ldr	r2, [pc, #180]	; (80004fc <process_protocol+0xf4>)
 8000446:	5cd3      	ldrb	r3, [r2, r3]
 8000448:	70fb      	strb	r3, [r7, #3]
			// Check Header
			if((g_rx_buf[g_rx_index - packet_len - 5] == 0xFE) && (g_rx_buf[g_rx_index -packet_len - 6] == 0xFA))
 800044a:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <process_protocol+0xf0>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	461a      	mov	r2, r3
 8000450:	78fb      	ldrb	r3, [r7, #3]
 8000452:	1ad3      	subs	r3, r2, r3
 8000454:	3b05      	subs	r3, #5
 8000456:	4a29      	ldr	r2, [pc, #164]	; (80004fc <process_protocol+0xf4>)
 8000458:	5cd3      	ldrb	r3, [r2, r3]
 800045a:	2bfe      	cmp	r3, #254	; 0xfe
 800045c:	d146      	bne.n	80004ec <process_protocol+0xe4>
 800045e:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <process_protocol+0xf0>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	461a      	mov	r2, r3
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	3b06      	subs	r3, #6
 800046a:	4a24      	ldr	r2, [pc, #144]	; (80004fc <process_protocol+0xf4>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	2bfa      	cmp	r3, #250	; 0xfa
 8000470:	d13c      	bne.n	80004ec <process_protocol+0xe4>
			{
			  // Check checksum
			  uint8_t calc_crc = calc_checksum(&g_rx_buf[g_rx_index - packet_len - 4], packet_len + 1);
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <process_protocol+0xf0>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	461a      	mov	r2, r3
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	1ad3      	subs	r3, r2, r3
 800047c:	3b04      	subs	r3, #4
 800047e:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <process_protocol+0xf4>)
 8000480:	441a      	add	r2, r3
 8000482:	78fb      	ldrb	r3, [r7, #3]
 8000484:	3301      	adds	r3, #1
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4619      	mov	r1, r3
 800048a:	4610      	mov	r0, r2
 800048c:	f000 f8c6 	bl	800061c <calc_checksum>
 8000490:	4603      	mov	r3, r0
 8000492:	70bb      	strb	r3, [r7, #2]

			  if(calc_crc == g_rx_buf[g_rx_index - 3])
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <process_protocol+0xf0>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	3b03      	subs	r3, #3
 800049a:	4a18      	ldr	r2, [pc, #96]	; (80004fc <process_protocol+0xf4>)
 800049c:	5cd3      	ldrb	r3, [r2, r3]
 800049e:	78ba      	ldrb	r2, [r7, #2]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d123      	bne.n	80004ec <process_protocol+0xe4>
			  {
				// Check completed.
				for(int i = 0; i < packet_len; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	e011      	b.n	80004ce <process_protocol+0xc6>
				{
				  g_recv_data[i] = g_rx_buf[g_rx_index - packet_len - 4 + i];
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <process_protocol+0xf0>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	461a      	mov	r2, r3
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	1f1a      	subs	r2, r3, #4
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	4a10      	ldr	r2, [pc, #64]	; (80004fc <process_protocol+0xf4>)
 80004bc:	5cd1      	ldrb	r1, [r2, r3]
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <process_protocol+0xf8>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4413      	add	r3, r2
 80004c4:	460a      	mov	r2, r1
 80004c6:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < packet_len; i++)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3301      	adds	r3, #1
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	dbe9      	blt.n	80004aa <process_protocol+0xa2>
				}

				memset(g_rx_buf, 0, 256);
 80004d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004da:	2100      	movs	r1, #0
 80004dc:	4807      	ldr	r0, [pc, #28]	; (80004fc <process_protocol+0xf4>)
 80004de:	f002 f8c3 	bl	8002668 <memset>
				g_rx_index = 0;
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <process_protocol+0xf0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]

				return packet_len;
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	e000      	b.n	80004ee <process_protocol+0xe6>
			}
		  }
		}
	}

  return 0;
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000228 	.word	0x20000228
 80004fc:	20000028 	.word	0x20000028
 8000500:	20000128 	.word	0x20000128

08000504 <send_resonse_protocol>:

void send_resonse_protocol(uint8_t len)
{
 8000504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000508:	b089      	sub	sp, #36	; 0x24
 800050a:	af00      	add	r7, sp, #0
 800050c:	4603      	mov	r3, r0
 800050e:	71fb      	strb	r3, [r7, #7]
 8000510:	466b      	mov	r3, sp
 8000512:	461e      	mov	r6, r3
	uint8_t send_data[len+6];
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	1d99      	adds	r1, r3, #6
 8000518:	1e4b      	subs	r3, r1, #1
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	460a      	mov	r2, r1
 800051e:	2300      	movs	r3, #0
 8000520:	4690      	mov	r8, r2
 8000522:	4699      	mov	r9, r3
 8000524:	f04f 0200 	mov.w	r2, #0
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000530:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000534:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000538:	460a      	mov	r2, r1
 800053a:	2300      	movs	r3, #0
 800053c:	4614      	mov	r4, r2
 800053e:	461d      	mov	r5, r3
 8000540:	f04f 0200 	mov.w	r2, #0
 8000544:	f04f 0300 	mov.w	r3, #0
 8000548:	00eb      	lsls	r3, r5, #3
 800054a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800054e:	00e2      	lsls	r2, r4, #3
 8000550:	460b      	mov	r3, r1
 8000552:	3307      	adds	r3, #7
 8000554:	08db      	lsrs	r3, r3, #3
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	ebad 0d03 	sub.w	sp, sp, r3
 800055c:	466b      	mov	r3, sp
 800055e:	3300      	adds	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]

	//header
	send_data[0] = 0xFA;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	22fa      	movs	r2, #250	; 0xfa
 8000566:	701a      	strb	r2, [r3, #0]
	send_data[1] = 0xFE;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	22fe      	movs	r2, #254	; 0xfe
 800056c:	705a      	strb	r2, [r3, #1]

	// cmd + data + response
	for(int i = 0; i < len; i++)
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e00a      	b.n	800058a <send_resonse_protocol+0x86>
	{
		send_data[2+i] = g_recv_data[i];
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	3302      	adds	r3, #2
 8000578:	4926      	ldr	r1, [pc, #152]	; (8000614 <send_resonse_protocol+0x110>)
 800057a:	697a      	ldr	r2, [r7, #20]
 800057c:	440a      	add	r2, r1
 800057e:	7811      	ldrb	r1, [r2, #0]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < len; i++)
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	3301      	adds	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	429a      	cmp	r2, r3
 8000590:	dbf0      	blt.n	8000574 <send_resonse_protocol+0x70>
	}

	//LEN
	send_data[2+len] = len;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	3302      	adds	r3, #2
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	79f9      	ldrb	r1, [r7, #7]
 800059a:	54d1      	strb	r1, [r2, r3]

	//CMD에 0x90 더하기 : response를 보내는거니까
	send_data[2] = send_data[2] + 0x90;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	789b      	ldrb	r3, [r3, #2]
 80005a0:	3b70      	subs	r3, #112	; 0x70
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	709a      	strb	r2, [r3, #2]

	// checksum
	uint16_t sum = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	837b      	strh	r3, [r7, #26]
	for(int i = 0; i < 2+len; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
 80005b0:	e00a      	b.n	80005c8 <send_resonse_protocol+0xc4>
	{
		sum += send_data[i];
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	4413      	add	r3, r2
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	8b7b      	ldrh	r3, [r7, #26]
 80005be:	4413      	add	r3, r2
 80005c0:	837b      	strh	r3, [r7, #26]
	for(int i = 0; i < 2+len; i++)
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	3301      	adds	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	3301      	adds	r3, #1
 80005cc:	69fa      	ldr	r2, [r7, #28]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	ddef      	ble.n	80005b2 <send_resonse_protocol+0xae>
	}
	send_data[3+len] = (uint8_t)sum;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	3303      	adds	r3, #3
 80005d6:	8b7a      	ldrh	r2, [r7, #26]
 80005d8:	b2d1      	uxtb	r1, r2
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	54d1      	strb	r1, [r2, r3]

	// footer
	send_data[4+len] = 0xFA;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	3304      	adds	r3, #4
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	21fa      	movs	r1, #250	; 0xfa
 80005e6:	54d1      	strb	r1, [r2, r3]
	send_data[5+len] = 0xFD;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3305      	adds	r3, #5
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	21fd      	movs	r1, #253	; 0xfd
 80005f0:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit(&huart1, send_data, len+6 ,10000);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	3306      	adds	r3, #6
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80005fe:	68f9      	ldr	r1, [r7, #12]
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <send_resonse_protocol+0x114>)
 8000602:	f001 f9e5 	bl	80019d0 <HAL_UART_Transmit>
 8000606:	46b5      	mov	sp, r6
}
 8000608:	bf00      	nop
 800060a:	3724      	adds	r7, #36	; 0x24
 800060c:	46bd      	mov	sp, r7
 800060e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000612:	bf00      	nop
 8000614:	20000128 	.word	0x20000128
 8000618:	20000234 	.word	0x20000234

0800061c <calc_checksum>:
uint8_t calc_checksum(uint8_t* data, uint8_t len)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	uint16_t sum = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < len; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	e00a      	b.n	8000648 <calc_checksum+0x2c>
	{
		sum += data[i];
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b29a      	uxth	r2, r3
 800063c:	89fb      	ldrh	r3, [r7, #14]
 800063e:	4413      	add	r3, r2
 8000640:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < len; i++)
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	3301      	adds	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	429a      	cmp	r2, r3
 800064e:	dbf0      	blt.n	8000632 <calc_checksum+0x16>
	}

	return (uint8_t)sum;
 8000650:	89fb      	ldrh	r3, [r7, #14]
 8000652:	b2db      	uxtb	r3, r3
}
 8000654:	4618      	mov	r0, r3
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000662:	b672      	cpsid	i
}
 8000664:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000666:	e7fe      	b.n	8000666 <Error_Handler+0x8>

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_MspInit+0x5c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_MspInit+0x5c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <HAL_MspInit+0x5c>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x5c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_MspInit+0x60>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_MspInit+0x60>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000712:	f000 f8fd 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <USART1_IRQHandler+0x10>)
 8000722:	f001 f9fd 	bl	8001b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000234 	.word	0x20000234

08000730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f001 f8dc 	bl	8001930 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f7ff ff6e 	bl	800065e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000234 	.word	0x20000234
 800078c:	40013800 	.word	0x40013800

08000790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a20      	ldr	r2, [pc, #128]	; (800082c <HAL_UART_MspInit+0x9c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d139      	bne.n	8000824 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a18      	ldr	r2, [pc, #96]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <HAL_UART_MspInit+0xa0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <HAL_UART_MspInit+0xa4>)
 80007f6:	f000 faf7 	bl	8000de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <HAL_UART_MspInit+0xa4>)
 8000810:	f000 faea 	bl	8000de8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2025      	movs	r0, #37	; 0x25
 800081a:	f000 f96c 	bl	8000af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800081e:	2025      	movs	r0, #37	; 0x25
 8000820:	f000 f985 	bl	8000b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40013800 	.word	0x40013800
 8000830:	40021000 	.word	0x40021000
 8000834:	40010800 	.word	0x40010800

08000838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000838:	f7ff ff7a 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800083e:	490c      	ldr	r1, [pc, #48]	; (8000870 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000840:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a09      	ldr	r2, [pc, #36]	; (8000878 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000854:	4c09      	ldr	r4, [pc, #36]	; (800087c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000862:	f001 fedd 	bl	8002620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000866:	f7ff fd6d 	bl	8000344 <main>
  bx lr
 800086a:	4770      	bx	lr
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000874:	080026c4 	.word	0x080026c4
  ldr r2, =_sbss
 8000878:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800087c:	20000280 	.word	0x20000280

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_Init+0x28>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_Init+0x28>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f923 	bl	8000ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff fee2 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f93b 	bl	8000b4a <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ec:	f000 f903 	bl	8000af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <HAL_IncTick+0x20>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000008 	.word	0x20000008
 8000930:	2000027c 	.word	0x2000027c

08000934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	2000027c 	.word	0x2000027c

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4906      	ldr	r1, [pc, #24]	; (80009e0 <__NVIC_EnableIRQ+0x34>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aac:	d301      	bcc.n	8000ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00f      	b.n	8000ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <SysTick_Config+0x40>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aba:	210f      	movs	r1, #15
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f7ff ff90 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <SysTick_Config+0x40>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SysTick_Config+0x40>)
 8000acc:	2207      	movs	r2, #7
 8000ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	e000e010 	.word	0xe000e010

08000ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff2d 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b08:	f7ff ff42 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff ff90 	bl	8000a38 <NVIC_EncodePriority>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff5f 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff35 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffa2 	bl	8000a9c <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b085      	sub	sp, #20
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d008      	beq.n	8000b8c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e020      	b.n	8000bce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 020e 	bic.w	r2, r2, #14
 8000b9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f022 0201 	bic.w	r2, r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d005      	beq.n	8000bfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	e0d6      	b.n	8000daa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 020e 	bic.w	r2, r2, #14
 8000c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 0201 	bic.w	r2, r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b64      	ldr	r3, [pc, #400]	; (8000db4 <HAL_DMA_Abort_IT+0x1dc>)
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d958      	bls.n	8000cda <HAL_DMA_Abort_IT+0x102>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a62      	ldr	r2, [pc, #392]	; (8000db8 <HAL_DMA_Abort_IT+0x1e0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d04f      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0xfa>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a61      	ldr	r2, [pc, #388]	; (8000dbc <HAL_DMA_Abort_IT+0x1e4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d048      	beq.n	8000cce <HAL_DMA_Abort_IT+0xf6>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a5f      	ldr	r2, [pc, #380]	; (8000dc0 <HAL_DMA_Abort_IT+0x1e8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d040      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0xf0>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a5e      	ldr	r2, [pc, #376]	; (8000dc4 <HAL_DMA_Abort_IT+0x1ec>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d038      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0xea>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a5c      	ldr	r2, [pc, #368]	; (8000dc8 <HAL_DMA_Abort_IT+0x1f0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d030      	beq.n	8000cbc <HAL_DMA_Abort_IT+0xe4>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a5b      	ldr	r2, [pc, #364]	; (8000dcc <HAL_DMA_Abort_IT+0x1f4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d028      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0xde>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a52      	ldr	r2, [pc, #328]	; (8000db4 <HAL_DMA_Abort_IT+0x1dc>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d020      	beq.n	8000cb0 <HAL_DMA_Abort_IT+0xd8>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a57      	ldr	r2, [pc, #348]	; (8000dd0 <HAL_DMA_Abort_IT+0x1f8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d019      	beq.n	8000cac <HAL_DMA_Abort_IT+0xd4>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a55      	ldr	r2, [pc, #340]	; (8000dd4 <HAL_DMA_Abort_IT+0x1fc>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d012      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0xd0>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a54      	ldr	r2, [pc, #336]	; (8000dd8 <HAL_DMA_Abort_IT+0x200>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d00a      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0xca>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a52      	ldr	r2, [pc, #328]	; (8000ddc <HAL_DMA_Abort_IT+0x204>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d102      	bne.n	8000c9c <HAL_DMA_Abort_IT+0xc4>
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	e01b      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca0:	e018      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca6:	e015      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000ca8:	2310      	movs	r3, #16
 8000caa:	e013      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e011      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cb4:	e00e      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000cb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cba:	e00b      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	e008      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	e005      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ccc:	e002      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000cce:	2310      	movs	r3, #16
 8000cd0:	e000      	b.n	8000cd4 <HAL_DMA_Abort_IT+0xfc>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4a42      	ldr	r2, [pc, #264]	; (8000de0 <HAL_DMA_Abort_IT+0x208>)
 8000cd6:	6053      	str	r3, [r2, #4]
 8000cd8:	e057      	b.n	8000d8a <HAL_DMA_Abort_IT+0x1b2>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a36      	ldr	r2, [pc, #216]	; (8000db8 <HAL_DMA_Abort_IT+0x1e0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d04f      	beq.n	8000d84 <HAL_DMA_Abort_IT+0x1ac>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a34      	ldr	r2, [pc, #208]	; (8000dbc <HAL_DMA_Abort_IT+0x1e4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d048      	beq.n	8000d80 <HAL_DMA_Abort_IT+0x1a8>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a33      	ldr	r2, [pc, #204]	; (8000dc0 <HAL_DMA_Abort_IT+0x1e8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d040      	beq.n	8000d7a <HAL_DMA_Abort_IT+0x1a2>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <HAL_DMA_Abort_IT+0x1ec>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d038      	beq.n	8000d74 <HAL_DMA_Abort_IT+0x19c>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <HAL_DMA_Abort_IT+0x1f0>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d030      	beq.n	8000d6e <HAL_DMA_Abort_IT+0x196>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a2e      	ldr	r2, [pc, #184]	; (8000dcc <HAL_DMA_Abort_IT+0x1f4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d028      	beq.n	8000d68 <HAL_DMA_Abort_IT+0x190>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <HAL_DMA_Abort_IT+0x1dc>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d020      	beq.n	8000d62 <HAL_DMA_Abort_IT+0x18a>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <HAL_DMA_Abort_IT+0x1f8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d019      	beq.n	8000d5e <HAL_DMA_Abort_IT+0x186>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a29      	ldr	r2, [pc, #164]	; (8000dd4 <HAL_DMA_Abort_IT+0x1fc>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d012      	beq.n	8000d5a <HAL_DMA_Abort_IT+0x182>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <HAL_DMA_Abort_IT+0x200>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d00a      	beq.n	8000d54 <HAL_DMA_Abort_IT+0x17c>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a26      	ldr	r2, [pc, #152]	; (8000ddc <HAL_DMA_Abort_IT+0x204>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d102      	bne.n	8000d4e <HAL_DMA_Abort_IT+0x176>
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	e01b      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d52:	e018      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	e015      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	e013      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e011      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d66:	e00e      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d6c:	e00b      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d72:	e008      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	e005      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7e:	e002      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d80:	2310      	movs	r3, #16
 8000d82:	e000      	b.n	8000d86 <HAL_DMA_Abort_IT+0x1ae>
 8000d84:	2301      	movs	r3, #1
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_DMA_Abort_IT+0x20c>)
 8000d88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	4798      	blx	r3
    } 
  }
  return status;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40020080 	.word	0x40020080
 8000db8:	40020008 	.word	0x40020008
 8000dbc:	4002001c 	.word	0x4002001c
 8000dc0:	40020030 	.word	0x40020030
 8000dc4:	40020044 	.word	0x40020044
 8000dc8:	40020058 	.word	0x40020058
 8000dcc:	4002006c 	.word	0x4002006c
 8000dd0:	40020408 	.word	0x40020408
 8000dd4:	4002041c 	.word	0x4002041c
 8000dd8:	40020430 	.word	0x40020430
 8000ddc:	40020444 	.word	0x40020444
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020000 	.word	0x40020000

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b08b      	sub	sp, #44	; 0x2c
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfa:	e179      	b.n	80010f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	69fa      	ldr	r2, [r7, #28]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 8168 	bne.w	80010ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a96      	ldr	r2, [pc, #600]	; (8001078 <HAL_GPIO_Init+0x290>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d05e      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e24:	4a94      	ldr	r2, [pc, #592]	; (8001078 <HAL_GPIO_Init+0x290>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d875      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e2a:	4a94      	ldr	r2, [pc, #592]	; (800107c <HAL_GPIO_Init+0x294>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d058      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e30:	4a92      	ldr	r2, [pc, #584]	; (800107c <HAL_GPIO_Init+0x294>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d86f      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e36:	4a92      	ldr	r2, [pc, #584]	; (8001080 <HAL_GPIO_Init+0x298>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d052      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e3c:	4a90      	ldr	r2, [pc, #576]	; (8001080 <HAL_GPIO_Init+0x298>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d869      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e42:	4a90      	ldr	r2, [pc, #576]	; (8001084 <HAL_GPIO_Init+0x29c>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d04c      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e48:	4a8e      	ldr	r2, [pc, #568]	; (8001084 <HAL_GPIO_Init+0x29c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d863      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e4e:	4a8e      	ldr	r2, [pc, #568]	; (8001088 <HAL_GPIO_Init+0x2a0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d046      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
 8000e54:	4a8c      	ldr	r2, [pc, #560]	; (8001088 <HAL_GPIO_Init+0x2a0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d85d      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e5a:	2b12      	cmp	r3, #18
 8000e5c:	d82a      	bhi.n	8000eb4 <HAL_GPIO_Init+0xcc>
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d859      	bhi.n	8000f16 <HAL_GPIO_Init+0x12e>
 8000e62:	a201      	add	r2, pc, #4	; (adr r2, 8000e68 <HAL_GPIO_Init+0x80>)
 8000e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e68:	08000ee3 	.word	0x08000ee3
 8000e6c:	08000ebd 	.word	0x08000ebd
 8000e70:	08000ecf 	.word	0x08000ecf
 8000e74:	08000f11 	.word	0x08000f11
 8000e78:	08000f17 	.word	0x08000f17
 8000e7c:	08000f17 	.word	0x08000f17
 8000e80:	08000f17 	.word	0x08000f17
 8000e84:	08000f17 	.word	0x08000f17
 8000e88:	08000f17 	.word	0x08000f17
 8000e8c:	08000f17 	.word	0x08000f17
 8000e90:	08000f17 	.word	0x08000f17
 8000e94:	08000f17 	.word	0x08000f17
 8000e98:	08000f17 	.word	0x08000f17
 8000e9c:	08000f17 	.word	0x08000f17
 8000ea0:	08000f17 	.word	0x08000f17
 8000ea4:	08000f17 	.word	0x08000f17
 8000ea8:	08000f17 	.word	0x08000f17
 8000eac:	08000ec5 	.word	0x08000ec5
 8000eb0:	08000ed9 	.word	0x08000ed9
 8000eb4:	4a75      	ldr	r2, [pc, #468]	; (800108c <HAL_GPIO_Init+0x2a4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d013      	beq.n	8000ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eba:	e02c      	b.n	8000f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e029      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	623b      	str	r3, [r7, #32]
          break;
 8000ecc:	e024      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	623b      	str	r3, [r7, #32]
          break;
 8000ed6:	e01f      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	330c      	adds	r3, #12
 8000ede:	623b      	str	r3, [r7, #32]
          break;
 8000ee0:	e01a      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eea:	2304      	movs	r3, #4
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e013      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d105      	bne.n	8000f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	611a      	str	r2, [r3, #16]
          break;
 8000f02:	e009      	b.n	8000f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f04:	2308      	movs	r3, #8
 8000f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	615a      	str	r2, [r3, #20]
          break;
 8000f0e:	e003      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
          break;
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x130>
          break;
 8000f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2bff      	cmp	r3, #255	; 0xff
 8000f1c:	d801      	bhi.n	8000f22 <HAL_GPIO_Init+0x13a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	e001      	b.n	8000f26 <HAL_GPIO_Init+0x13e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3304      	adds	r3, #4
 8000f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	2bff      	cmp	r3, #255	; 0xff
 8000f2c:	d802      	bhi.n	8000f34 <HAL_GPIO_Init+0x14c>
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x152>
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	3b08      	subs	r3, #8
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	210f      	movs	r1, #15
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	6a39      	ldr	r1, [r7, #32]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	431a      	orrs	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 80c1 	beq.w	80010ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <HAL_GPIO_Init+0x2a8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a48      	ldr	r2, [pc, #288]	; (8001090 <HAL_GPIO_Init+0x2a8>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b46      	ldr	r3, [pc, #280]	; (8001090 <HAL_GPIO_Init+0x2a8>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f80:	4a44      	ldr	r2, [pc, #272]	; (8001094 <HAL_GPIO_Init+0x2ac>)
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a3c      	ldr	r2, [pc, #240]	; (8001098 <HAL_GPIO_Init+0x2b0>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d01f      	beq.n	8000fec <HAL_GPIO_Init+0x204>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a3b      	ldr	r2, [pc, #236]	; (800109c <HAL_GPIO_Init+0x2b4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d019      	beq.n	8000fe8 <HAL_GPIO_Init+0x200>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	; (80010a0 <HAL_GPIO_Init+0x2b8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d013      	beq.n	8000fe4 <HAL_GPIO_Init+0x1fc>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a39      	ldr	r2, [pc, #228]	; (80010a4 <HAL_GPIO_Init+0x2bc>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d00d      	beq.n	8000fe0 <HAL_GPIO_Init+0x1f8>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a38      	ldr	r2, [pc, #224]	; (80010a8 <HAL_GPIO_Init+0x2c0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d007      	beq.n	8000fdc <HAL_GPIO_Init+0x1f4>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a37      	ldr	r2, [pc, #220]	; (80010ac <HAL_GPIO_Init+0x2c4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d101      	bne.n	8000fd8 <HAL_GPIO_Init+0x1f0>
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	e00a      	b.n	8000fee <HAL_GPIO_Init+0x206>
 8000fd8:	2306      	movs	r3, #6
 8000fda:	e008      	b.n	8000fee <HAL_GPIO_Init+0x206>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e006      	b.n	8000fee <HAL_GPIO_Init+0x206>
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e004      	b.n	8000fee <HAL_GPIO_Init+0x206>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e002      	b.n	8000fee <HAL_GPIO_Init+0x206>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_GPIO_Init+0x206>
 8000fec:	2300      	movs	r3, #0
 8000fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff0:	f002 0203 	and.w	r2, r2, #3
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	4093      	lsls	r3, r2
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ffe:	4925      	ldr	r1, [pc, #148]	; (8001094 <HAL_GPIO_Init+0x2ac>)
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	4924      	ldr	r1, [pc, #144]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	43db      	mvns	r3, r3
 800102e:	4920      	ldr	r1, [pc, #128]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 8001030:	4013      	ands	r3, r2
 8001032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	491a      	ldr	r1, [pc, #104]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	60cb      	str	r3, [r1, #12]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	4916      	ldr	r1, [pc, #88]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 8001058:	4013      	ands	r3, r2
 800105a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d025      	beq.n	80010b4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	4910      	ldr	r1, [pc, #64]	; (80010b0 <HAL_GPIO_Init+0x2c8>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
 8001074:	e025      	b.n	80010c2 <HAL_GPIO_Init+0x2da>
 8001076:	bf00      	nop
 8001078:	10320000 	.word	0x10320000
 800107c:	10310000 	.word	0x10310000
 8001080:	10220000 	.word	0x10220000
 8001084:	10210000 	.word	0x10210000
 8001088:	10120000 	.word	0x10120000
 800108c:	10110000 	.word	0x10110000
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	40010800 	.word	0x40010800
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40011000 	.word	0x40011000
 80010a4:	40011400 	.word	0x40011400
 80010a8:	40011800 	.word	0x40011800
 80010ac:	40011c00 	.word	0x40011c00
 80010b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_GPIO_Init+0x324>)
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	4913      	ldr	r1, [pc, #76]	; (800110c <HAL_GPIO_Init+0x324>)
 80010be:	4013      	ands	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_GPIO_Init+0x324>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	490e      	ldr	r1, [pc, #56]	; (800110c <HAL_GPIO_Init+0x324>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
 80010da:	e006      	b.n	80010ea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_GPIO_Init+0x324>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4909      	ldr	r1, [pc, #36]	; (800110c <HAL_GPIO_Init+0x324>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	3301      	adds	r3, #1
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	fa22 f303 	lsr.w	r3, r2, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f47f ae7e 	bne.w	8000dfc <HAL_GPIO_Init+0x14>
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	372c      	adds	r7, #44	; 0x2c
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	40010400 	.word	0x40010400

08001110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e272      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8087 	beq.w	800123e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001130:	4b92      	ldr	r3, [pc, #584]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b04      	cmp	r3, #4
 800113a:	d00c      	beq.n	8001156 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800113c:	4b8f      	ldr	r3, [pc, #572]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b08      	cmp	r3, #8
 8001146:	d112      	bne.n	800116e <HAL_RCC_OscConfig+0x5e>
 8001148:	4b8c      	ldr	r3, [pc, #560]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d10b      	bne.n	800116e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001156:	4b89      	ldr	r3, [pc, #548]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d06c      	beq.n	800123c <HAL_RCC_OscConfig+0x12c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d168      	bne.n	800123c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e24c      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x76>
 8001178:	4b80      	ldr	r3, [pc, #512]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a7f      	ldr	r2, [pc, #508]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e02e      	b.n	80011e4 <HAL_RCC_OscConfig+0xd4>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x98>
 800118e:	4b7b      	ldr	r3, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a7a      	ldr	r2, [pc, #488]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b78      	ldr	r3, [pc, #480]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a77      	ldr	r2, [pc, #476]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80011a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e01d      	b.n	80011e4 <HAL_RCC_OscConfig+0xd4>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0xbc>
 80011b2:	4b72      	ldr	r3, [pc, #456]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a71      	ldr	r2, [pc, #452]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b6f      	ldr	r3, [pc, #444]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a6e      	ldr	r2, [pc, #440]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e00b      	b.n	80011e4 <HAL_RCC_OscConfig+0xd4>
 80011cc:	4b6b      	ldr	r3, [pc, #428]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a6a      	ldr	r2, [pc, #424]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b68      	ldr	r3, [pc, #416]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a67      	ldr	r2, [pc, #412]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fba2 	bl	8000934 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fb9e 	bl	8000934 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e200      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0xe4>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fb8e 	bl	8000934 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fb8a 	bl	8000934 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1ec      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x10c>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d063      	beq.n	8001312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800124a:	4b4c      	ldr	r3, [pc, #304]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00b      	beq.n	800126e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b08      	cmp	r3, #8
 8001260:	d11c      	bne.n	800129c <HAL_RCC_OscConfig+0x18c>
 8001262:	4b46      	ldr	r3, [pc, #280]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d116      	bne.n	800129c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	4b43      	ldr	r3, [pc, #268]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <HAL_RCC_OscConfig+0x176>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d001      	beq.n	8001286 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e1c0      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4939      	ldr	r1, [pc, #228]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	e03a      	b.n	8001312 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <HAL_RCC_OscConfig+0x270>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fb43 	bl	8000934 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fb3f 	bl	8000934 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e1a1      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4b2a      	ldr	r3, [pc, #168]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4927      	ldr	r1, [pc, #156]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_RCC_OscConfig+0x270>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fb22 	bl	8000934 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f4:	f7ff fb1e 	bl	8000934 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e180      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d03a      	beq.n	8001394 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d019      	beq.n	800135a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_RCC_OscConfig+0x274>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132c:	f7ff fb02 	bl	8000934 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fafe 	bl	8000934 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e160      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_RCC_OscConfig+0x26c>)
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 face 	bl	80018f4 <RCC_Delay>
 8001358:	e01c      	b.n	8001394 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_RCC_OscConfig+0x274>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fae8 	bl	8000934 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001366:	e00f      	b.n	8001388 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff fae4 	bl	8000934 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d908      	bls.n	8001388 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e146      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	42420000 	.word	0x42420000
 8001384:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001388:	4b92      	ldr	r3, [pc, #584]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1e9      	bne.n	8001368 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80a6 	beq.w	80014ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a6:	4b8b      	ldr	r3, [pc, #556]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10d      	bne.n	80013ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a87      	ldr	r2, [pc, #540]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b85      	ldr	r3, [pc, #532]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ce:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <HAL_RCC_OscConfig+0x4c8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d118      	bne.n	800140c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013da:	4b7f      	ldr	r3, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x4c8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7e      	ldr	r2, [pc, #504]	; (80015d8 <HAL_RCC_OscConfig+0x4c8>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e6:	f7ff faa5 	bl	8000934 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7ff faa1 	bl	8000934 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e103      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	4b75      	ldr	r3, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x4c8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x312>
 8001414:	4b6f      	ldr	r3, [pc, #444]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a6e      	ldr	r2, [pc, #440]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	e02d      	b.n	800147e <HAL_RCC_OscConfig+0x36e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x334>
 800142a:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	4a69      	ldr	r2, [pc, #420]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	6213      	str	r3, [r2, #32]
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4a66      	ldr	r2, [pc, #408]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	f023 0304 	bic.w	r3, r3, #4
 8001440:	6213      	str	r3, [r2, #32]
 8001442:	e01c      	b.n	800147e <HAL_RCC_OscConfig+0x36e>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b05      	cmp	r3, #5
 800144a:	d10c      	bne.n	8001466 <HAL_RCC_OscConfig+0x356>
 800144c:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4a60      	ldr	r2, [pc, #384]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6213      	str	r3, [r2, #32]
 8001458:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4a5d      	ldr	r2, [pc, #372]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6213      	str	r3, [r2, #32]
 8001464:	e00b      	b.n	800147e <HAL_RCC_OscConfig+0x36e>
 8001466:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	4a5a      	ldr	r2, [pc, #360]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6213      	str	r3, [r2, #32]
 8001472:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4a57      	ldr	r2, [pc, #348]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d015      	beq.n	80014b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fa55 	bl	8000934 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff fa51 	bl	8000934 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e0b1      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	4b4b      	ldr	r3, [pc, #300]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0ee      	beq.n	800148e <HAL_RCC_OscConfig+0x37e>
 80014b0:	e014      	b.n	80014dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fa3f 	bl	8000934 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff fa3b 	bl	8000934 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e09b      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ee      	bne.n	80014ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d105      	bne.n	80014ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e2:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a3b      	ldr	r2, [pc, #236]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8087 	beq.w	8001606 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b08      	cmp	r3, #8
 8001502:	d061      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d146      	bne.n	800159a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150c:	4b33      	ldr	r3, [pc, #204]	; (80015dc <HAL_RCC_OscConfig+0x4cc>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fa0f 	bl	8000934 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fa0b 	bl	8000934 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e06d      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152c:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001540:	d108      	bne.n	8001554 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4921      	ldr	r1, [pc, #132]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a19      	ldr	r1, [r3, #32]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	430b      	orrs	r3, r1
 8001566:	491b      	ldr	r1, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x4cc>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff f9df 	bl	8000934 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff f9db 	bl	8000934 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e03d      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x46a>
 8001598:	e035      	b.n	8001606 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x4cc>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff f9c8 	bl	8000934 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff f9c4 	bl	8000934 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e026      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x498>
 80015c6:	e01e      	b.n	8001606 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e019      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40007000 	.word	0x40007000
 80015dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_OscConfig+0x500>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	429a      	cmp	r2, r3
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000

08001614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0d0      	b.n	80017ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d910      	bls.n	8001658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 0207 	bic.w	r2, r3, #7
 800163e:	4965      	ldr	r1, [pc, #404]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0b8      	b.n	80017ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d020      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001670:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800167a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001692:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	494d      	ldr	r1, [pc, #308]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d040      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d115      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e07f      	b.n	80017ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e073      	b.n	80017ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e06b      	b.n	80017ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4936      	ldr	r1, [pc, #216]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff f916 	bl	8000934 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff f912 	bl	8000934 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e053      	b.n	80017ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d210      	bcs.n	8001764 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 0207 	bic.w	r2, r3, #7
 800174a:	4922      	ldr	r1, [pc, #136]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e032      	b.n	80017ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d008      	beq.n	8001782 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4916      	ldr	r1, [pc, #88]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d009      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	490e      	ldr	r1, [pc, #56]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017a2:	f000 f821 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	490a      	ldr	r1, [pc, #40]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	5ccb      	ldrb	r3, [r1, r3]
 80017b6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <HAL_RCC_ClockConfig+0x1cc>)
 80017bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x1d0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff f874 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	08002690 	.word	0x08002690
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_GetSysClockFreq+0x94>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b04      	cmp	r3, #4
 8001810:	d002      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x30>
 8001812:	2b08      	cmp	r3, #8
 8001814:	d003      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x36>
 8001816:	e027      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_GetSysClockFreq+0x98>)
 800181a:	613b      	str	r3, [r7, #16]
      break;
 800181c:	e027      	b.n	800186e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	0c9b      	lsrs	r3, r3, #18
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001828:	5cd3      	ldrb	r3, [r2, r3]
 800182a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d010      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_RCC_GetSysClockFreq+0x94>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	0c5b      	lsrs	r3, r3, #17
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_RCC_GetSysClockFreq+0x98>)
 800184a:	fb03 f202 	mul.w	r2, r3, r2
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e004      	b.n	8001862 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a0c      	ldr	r2, [pc, #48]	; (800188c <HAL_RCC_GetSysClockFreq+0xa4>)
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	613b      	str	r3, [r7, #16]
      break;
 8001866:	e002      	b.n	800186e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_RCC_GetSysClockFreq+0x98>)
 800186a:	613b      	str	r3, [r7, #16]
      break;
 800186c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186e:	693b      	ldr	r3, [r7, #16]
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	007a1200 	.word	0x007a1200
 8001884:	080026a8 	.word	0x080026a8
 8001888:	080026b8 	.word	0x080026b8
 800188c:	003d0900 	.word	0x003d0900

08001890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000000 	.word	0x20000000

080018a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018a8:	f7ff fff2 	bl	8001890 <HAL_RCC_GetHCLKFreq>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	4903      	ldr	r1, [pc, #12]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ba:	5ccb      	ldrb	r3, [r1, r3]
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	080026a0 	.word	0x080026a0

080018cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018d0:	f7ff ffde 	bl	8001890 <HAL_RCC_GetHCLKFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0adb      	lsrs	r3, r3, #11
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4903      	ldr	r1, [pc, #12]	; (80018f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	080026a0 	.word	0x080026a0

080018f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <RCC_Delay+0x34>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <RCC_Delay+0x38>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001910:	bf00      	nop
  }
  while (Delay --);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	60fa      	str	r2, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f9      	bne.n	8001910 <RCC_Delay+0x1c>
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20000000 	.word	0x20000000
 800192c:	10624dd3 	.word	0x10624dd3

08001930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e042      	b.n	80019c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7fe ff1a 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2224      	movs	r2, #36	; 0x24
 8001960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fdc5 	bl	8002504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	4613      	mov	r3, r2
 80019de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d16d      	bne.n	8001acc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_UART_Transmit+0x2c>
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e066      	b.n	8001ace <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2221      	movs	r2, #33	; 0x21
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a0e:	f7fe ff91 	bl	8000934 <HAL_GetTick>
 8001a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	88fa      	ldrh	r2, [r7, #6]
 8001a18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	88fa      	ldrh	r2, [r7, #6]
 8001a1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a28:	d108      	bne.n	8001a3c <HAL_UART_Transmit+0x6c>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d104      	bne.n	8001a3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	e003      	b.n	8001a44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a44:	e02a      	b.n	8001a9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 fb14 	bl	800207e <UART_WaitOnFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e036      	b.n	8001ace <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10b      	bne.n	8001a7e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	3302      	adds	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	e007      	b.n	8001a8e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1cf      	bne.n	8001a46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2200      	movs	r2, #0
 8001aae:	2140      	movs	r1, #64	; 0x40
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fae4 	bl	800207e <UART_WaitOnFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e006      	b.n	8001ace <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e000      	b.n	8001ace <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
  }
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3720      	adds	r7, #32
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	d112      	bne.n	8001b16 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_UART_Receive_IT+0x26>
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e00b      	b.n	8001b18 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fb24 	bl	800215a <UART_Start_Receive_IT>
 8001b12:	4603      	mov	r3, r0
 8001b14:	e000      	b.n	8001b18 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001b16:	2302      	movs	r3, #2
  }
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b0ba      	sub	sp, #232	; 0xe8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001b5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <HAL_UART_IRQHandler+0x66>
 8001b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fc01 	bl	8002386 <UART_Receive_IT>
      return;
 8001b84:	e25b      	b.n	800203e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80de 	beq.w	8001d4c <HAL_UART_IRQHandler+0x22c>
 8001b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ba0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80d1 	beq.w	8001d4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_UART_IRQHandler+0xae>
 8001bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_UART_IRQHandler+0xd2>
 8001bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f043 0202 	orr.w	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_UART_IRQHandler+0xf6>
 8001bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f043 0204 	orr.w	r2, r3, #4
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d011      	beq.n	8001c46 <HAL_UART_IRQHandler+0x126>
 8001c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d105      	bne.n	8001c3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f043 0208 	orr.w	r2, r3, #8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 81f2 	beq.w	8002034 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_UART_IRQHandler+0x14e>
 8001c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fb8c 	bl	8002386 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <HAL_UART_IRQHandler+0x17a>
 8001c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d04f      	beq.n	8001d3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fa96 	bl	80021cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d041      	beq.n	8001d32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3314      	adds	r3, #20
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cbc:	e853 3f00 	ldrex	r3, [r3]
 8001cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3314      	adds	r3, #20
 8001cd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001cda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ce2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001ce6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001cea:	e841 2300 	strex	r3, r2, [r1]
 8001cee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1d9      	bne.n	8001cae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d013      	beq.n	8001d2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	4a7e      	ldr	r2, [pc, #504]	; (8001f00 <HAL_UART_IRQHandler+0x3e0>)
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe ff62 	bl	8000bd8 <HAL_DMA_Abort_IT>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d016      	beq.n	8001d48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d24:	4610      	mov	r0, r2
 8001d26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d28:	e00e      	b.n	8001d48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f993 	bl	8002056 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d30:	e00a      	b.n	8001d48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f98f 	bl	8002056 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d38:	e006      	b.n	8001d48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f98b 	bl	8002056 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001d46:	e175      	b.n	8002034 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d48:	bf00      	nop
    return;
 8001d4a:	e173      	b.n	8002034 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	f040 814f 	bne.w	8001ff4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8148 	beq.w	8001ff4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8141 	beq.w	8001ff4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80b6 	beq.w	8001f04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001da4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8145 	beq.w	8002038 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001db6:	429a      	cmp	r2, r3
 8001db8:	f080 813e 	bcs.w	8002038 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001dc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	f000 8088 	beq.w	8001ee0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dde:	e853 3f00 	ldrex	r3, [r3]
 8001de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	330c      	adds	r3, #12
 8001df8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001dfc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e0c:	e841 2300 	strex	r3, r2, [r1]
 8001e10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1d9      	bne.n	8001dd0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3314      	adds	r3, #20
 8001e22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e26:	e853 3f00 	ldrex	r3, [r3]
 8001e2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3314      	adds	r3, #20
 8001e3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001e44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001e48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e4c:	e841 2300 	strex	r3, r2, [r1]
 8001e50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e1      	bne.n	8001e1c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3314      	adds	r3, #20
 8001e5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e62:	e853 3f00 	ldrex	r3, [r3]
 8001e66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3314      	adds	r3, #20
 8001e78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001e7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001e82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e84:	e841 2300 	strex	r3, r2, [r1]
 8001e88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1e3      	bne.n	8001e58 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea8:	e853 3f00 	ldrex	r3, [r3]
 8001eac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb0:	f023 0310 	bic.w	r3, r3, #16
 8001eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001ec2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ec4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eca:	e841 2300 	strex	r3, r2, [r1]
 8001ece:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1e3      	bne.n	8001e9e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fe41 	bl	8000b62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8b6 	bl	8002068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001efc:	e09c      	b.n	8002038 <HAL_UART_IRQHandler+0x518>
 8001efe:	bf00      	nop
 8001f00:	08002291 	.word	0x08002291
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 808e 	beq.w	800203c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8089 	beq.w	800203c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f34:	e853 3f00 	ldrex	r3, [r3]
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	330c      	adds	r3, #12
 8001f4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001f4e:	647a      	str	r2, [r7, #68]	; 0x44
 8001f50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f56:	e841 2300 	strex	r3, r2, [r1]
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1e3      	bne.n	8001f2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3314      	adds	r3, #20
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	e853 3f00 	ldrex	r3, [r3]
 8001f70:	623b      	str	r3, [r7, #32]
   return(result);
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3314      	adds	r3, #20
 8001f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001f86:	633a      	str	r2, [r7, #48]	; 0x30
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f8e:	e841 2300 	strex	r3, r2, [r1]
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1e3      	bne.n	8001f62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	330c      	adds	r3, #12
 8001fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	e853 3f00 	ldrex	r3, [r3]
 8001fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0310 	bic.w	r3, r3, #16
 8001fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001fcc:	61fa      	str	r2, [r7, #28]
 8001fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd0:	69b9      	ldr	r1, [r7, #24]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	e841 2300 	strex	r3, r2, [r1]
 8001fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e3      	bne.n	8001fa8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001fe6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f83b 	bl	8002068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001ff2:	e023      	b.n	800203c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_UART_IRQHandler+0x4f4>
 8002000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f953 	bl	80022b8 <UART_Transmit_IT>
    return;
 8002012:	e014      	b.n	800203e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <HAL_UART_IRQHandler+0x51e>
 8002020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f992 	bl	8002356 <UART_EndTransmit_IT>
    return;
 8002032:	e004      	b.n	800203e <HAL_UART_IRQHandler+0x51e>
    return;
 8002034:	bf00      	nop
 8002036:	e002      	b.n	800203e <HAL_UART_IRQHandler+0x51e>
      return;
 8002038:	bf00      	nop
 800203a:	e000      	b.n	800203e <HAL_UART_IRQHandler+0x51e>
      return;
 800203c:	bf00      	nop
  }
}
 800203e:	37e8      	adds	r7, #232	; 0xe8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b090      	sub	sp, #64	; 0x40
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800208e:	e050      	b.n	8002132 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002096:	d04c      	beq.n	8002132 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <UART_WaitOnFlagUntilTimeout+0x30>
 800209e:	f7fe fc49 	bl	8000934 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d241      	bcs.n	8002132 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	e853 3f00 	ldrex	r3, [r3]
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ce:	637a      	str	r2, [r7, #52]	; 0x34
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d6:	e841 2300 	strex	r3, r2, [r1]
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e5      	bne.n	80020ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3314      	adds	r3, #20
 80020e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	e853 3f00 	ldrex	r3, [r3]
 80020f0:	613b      	str	r3, [r7, #16]
   return(result);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3314      	adds	r3, #20
 8002100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002102:	623a      	str	r2, [r7, #32]
 8002104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002106:	69f9      	ldr	r1, [r7, #28]
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	e841 2300 	strex	r3, r2, [r1]
 800210e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1e5      	bne.n	80020e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e00f      	b.n	8002152 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4013      	ands	r3, r2
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	429a      	cmp	r2, r3
 8002140:	bf0c      	ite	eq
 8002142:	2301      	moveq	r3, #1
 8002144:	2300      	movne	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	429a      	cmp	r2, r3
 800214e:	d09f      	beq.n	8002090 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3740      	adds	r7, #64	; 0x40
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	4613      	mov	r3, r2
 8002166:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	88fa      	ldrh	r2, [r7, #6]
 8002172:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2222      	movs	r2, #34	; 0x22
 8002184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800219e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0220 	orr.w	r2, r2, #32
 80021be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b095      	sub	sp, #84	; 0x54
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021de:	e853 3f00 	ldrex	r3, [r3]
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021f4:	643a      	str	r2, [r7, #64]	; 0x40
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021fc:	e841 2300 	strex	r3, r2, [r1]
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e5      	bne.n	80021d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3314      	adds	r3, #20
 800220e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	e853 3f00 	ldrex	r3, [r3]
 8002216:	61fb      	str	r3, [r7, #28]
   return(result);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3314      	adds	r3, #20
 8002226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002228:	62fa      	str	r2, [r7, #44]	; 0x2c
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800222e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002230:	e841 2300 	strex	r3, r2, [r1]
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e5      	bne.n	8002208 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	2b01      	cmp	r3, #1
 8002242:	d119      	bne.n	8002278 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	330c      	adds	r3, #12
 800224a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	e853 3f00 	ldrex	r3, [r3]
 8002252:	60bb      	str	r3, [r7, #8]
   return(result);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f023 0310 	bic.w	r3, r3, #16
 800225a:	647b      	str	r3, [r7, #68]	; 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002264:	61ba      	str	r2, [r7, #24]
 8002266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002268:	6979      	ldr	r1, [r7, #20]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	e841 2300 	strex	r3, r2, [r1]
 8002270:	613b      	str	r3, [r7, #16]
   return(result);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e5      	bne.n	8002244 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002286:	bf00      	nop
 8002288:	3754      	adds	r7, #84	; 0x54
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff fed3 	bl	8002056 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b21      	cmp	r3, #33	; 0x21
 80022ca:	d13e      	bne.n	800234a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d4:	d114      	bne.n	8002300 <UART_Transmit_IT+0x48>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d110      	bne.n	8002300 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	1c9a      	adds	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	621a      	str	r2, [r3, #32]
 80022fe:	e008      	b.n	8002312 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	1c59      	adds	r1, r3, #1
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6211      	str	r1, [r2, #32]
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29b      	uxth	r3, r3
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4619      	mov	r1, r3
 8002320:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002334:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002344:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800234a:	2302      	movs	r3, #2
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800236c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fe64 	bl	8002044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b08c      	sub	sp, #48	; 0x30
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b22      	cmp	r3, #34	; 0x22
 8002398:	f040 80ae 	bne.w	80024f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d117      	bne.n	80023d6 <UART_Receive_IT+0x50>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d113      	bne.n	80023d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	1c9a      	adds	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
 80023d4:	e026      	b.n	8002424 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e8:	d007      	beq.n	80023fa <UART_Receive_IT+0x74>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <UART_Receive_IT+0x82>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e008      	b.n	800241a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002414:	b2da      	uxtb	r2, r3
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29b      	uxth	r3, r3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4619      	mov	r1, r3
 8002432:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002434:	2b00      	cmp	r3, #0
 8002436:	d15d      	bne.n	80024f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0220 	bic.w	r2, r2, #32
 8002446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	2b01      	cmp	r3, #1
 800247c:	d135      	bne.n	80024ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	e853 3f00 	ldrex	r3, [r3]
 8002492:	613b      	str	r3, [r7, #16]
   return(result);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f023 0310 	bic.w	r3, r3, #16
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	623a      	str	r2, [r7, #32]
 80024a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a8:	69f9      	ldr	r1, [r7, #28]
 80024aa:	6a3a      	ldr	r2, [r7, #32]
 80024ac:	e841 2300 	strex	r3, r2, [r1]
 80024b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e5      	bne.n	8002484 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d10a      	bne.n	80024dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fdc0 	bl	8002068 <HAL_UARTEx_RxEventCallback>
 80024e8:	e002      	b.n	80024f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fd febc 	bl	8000268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e002      	b.n	80024fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3730      	adds	r7, #48	; 0x30
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800253e:	f023 030c 	bic.w	r3, r3, #12
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	430b      	orrs	r3, r1
 800254a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2c      	ldr	r2, [pc, #176]	; (8002618 <UART_SetConfig+0x114>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d103      	bne.n	8002574 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800256c:	f7ff f9ae 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	e002      	b.n	800257a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002574:	f7ff f996 	bl	80018a4 <HAL_RCC_GetPCLK1Freq>
 8002578:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009a      	lsls	r2, r3, #2
 8002584:	441a      	add	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <UART_SetConfig+0x118>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	0119      	lsls	r1, r3, #4
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	009a      	lsls	r2, r3, #2
 80025a4:	441a      	add	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <UART_SetConfig+0x118>)
 80025b2:	fba3 0302 	umull	r0, r3, r3, r2
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2064      	movs	r0, #100	; 0x64
 80025ba:	fb00 f303 	mul.w	r3, r0, r3
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	3332      	adds	r3, #50	; 0x32
 80025c4:	4a15      	ldr	r2, [pc, #84]	; (800261c <UART_SetConfig+0x118>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d0:	4419      	add	r1, r3
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	441a      	add	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <UART_SetConfig+0x118>)
 80025ea:	fba3 0302 	umull	r0, r3, r3, r2
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2064      	movs	r0, #100	; 0x64
 80025f2:	fb00 f303 	mul.w	r3, r0, r3
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	3332      	adds	r3, #50	; 0x32
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <UART_SetConfig+0x118>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	f003 020f 	and.w	r2, r3, #15
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	440a      	add	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40013800 	.word	0x40013800
 800261c:	51eb851f 	.word	0x51eb851f

08002620 <__libc_init_array>:
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	2600      	movs	r6, #0
 8002624:	4d0c      	ldr	r5, [pc, #48]	; (8002658 <__libc_init_array+0x38>)
 8002626:	4c0d      	ldr	r4, [pc, #52]	; (800265c <__libc_init_array+0x3c>)
 8002628:	1b64      	subs	r4, r4, r5
 800262a:	10a4      	asrs	r4, r4, #2
 800262c:	42a6      	cmp	r6, r4
 800262e:	d109      	bne.n	8002644 <__libc_init_array+0x24>
 8002630:	f000 f822 	bl	8002678 <_init>
 8002634:	2600      	movs	r6, #0
 8002636:	4d0a      	ldr	r5, [pc, #40]	; (8002660 <__libc_init_array+0x40>)
 8002638:	4c0a      	ldr	r4, [pc, #40]	; (8002664 <__libc_init_array+0x44>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	42a6      	cmp	r6, r4
 8002640:	d105      	bne.n	800264e <__libc_init_array+0x2e>
 8002642:	bd70      	pop	{r4, r5, r6, pc}
 8002644:	f855 3b04 	ldr.w	r3, [r5], #4
 8002648:	4798      	blx	r3
 800264a:	3601      	adds	r6, #1
 800264c:	e7ee      	b.n	800262c <__libc_init_array+0xc>
 800264e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002652:	4798      	blx	r3
 8002654:	3601      	adds	r6, #1
 8002656:	e7f2      	b.n	800263e <__libc_init_array+0x1e>
 8002658:	080026bc 	.word	0x080026bc
 800265c:	080026bc 	.word	0x080026bc
 8002660:	080026bc 	.word	0x080026bc
 8002664:	080026c0 	.word	0x080026c0

08002668 <memset>:
 8002668:	4603      	mov	r3, r0
 800266a:	4402      	add	r2, r0
 800266c:	4293      	cmp	r3, r2
 800266e:	d100      	bne.n	8002672 <memset+0xa>
 8002670:	4770      	bx	lr
 8002672:	f803 1b01 	strb.w	r1, [r3], #1
 8002676:	e7f9      	b.n	800266c <memset+0x4>

08002678 <_init>:
 8002678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267a:	bf00      	nop
 800267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267e:	bc08      	pop	{r3}
 8002680:	469e      	mov	lr, r3
 8002682:	4770      	bx	lr

08002684 <_fini>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	bf00      	nop
 8002688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268a:	bc08      	pop	{r3}
 800268c:	469e      	mov	lr, r3
 800268e:	4770      	bx	lr
