
imu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003fb0  08003fb0  00013fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004050  08004050  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08004050  08004050  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004050  08004050  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08004058  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000100  08004158  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004158  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006cf5  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001530  00000000  00000000  00026e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00028350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  00028a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cd1  00000000  00000000  000290b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000969b  00000000  00000000  00041d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feba  00000000  00000000  0004b41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db2d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee8  00000000  00000000  000db328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000100 	.word	0x20000100
 8000204:	00000000 	.word	0x00000000
 8000208:	08003f94 	.word	0x08003f94

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000104 	.word	0x20000104
 8000224:	08003f94 	.word	0x08003f94

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_frsub>:
 8000b00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b04:	e002      	b.n	8000b0c <__addsf3>
 8000b06:	bf00      	nop

08000b08 <__aeabi_fsub>:
 8000b08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b0c <__addsf3>:
 8000b0c:	0042      	lsls	r2, r0, #1
 8000b0e:	bf1f      	itttt	ne
 8000b10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b14:	ea92 0f03 	teqne	r2, r3
 8000b18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b20:	d06a      	beq.n	8000bf8 <__addsf3+0xec>
 8000b22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2a:	bfc1      	itttt	gt
 8000b2c:	18d2      	addgt	r2, r2, r3
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	4048      	eorgt	r0, r1
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	2b19      	cmp	r3, #25
 8000b3a:	bf88      	it	hi
 8000b3c:	4770      	bxhi	lr
 8000b3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4249      	negne	r1, r1
 8000b5e:	ea92 0f03 	teq	r2, r3
 8000b62:	d03f      	beq.n	8000be4 <__addsf3+0xd8>
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	fa41 fc03 	asr.w	ip, r1, r3
 8000b6c:	eb10 000c 	adds.w	r0, r0, ip
 8000b70:	f1c3 0320 	rsb	r3, r3, #32
 8000b74:	fa01 f103 	lsl.w	r1, r1, r3
 8000b78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	d502      	bpl.n	8000b84 <__addsf3+0x78>
 8000b7e:	4249      	negs	r1, r1
 8000b80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b88:	d313      	bcc.n	8000bb2 <__addsf3+0xa6>
 8000b8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8e:	d306      	bcc.n	8000b9e <__addsf3+0x92>
 8000b90:	0840      	lsrs	r0, r0, #1
 8000b92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b96:	f102 0201 	add.w	r2, r2, #1
 8000b9a:	2afe      	cmp	r2, #254	; 0xfe
 8000b9c:	d251      	bcs.n	8000c42 <__addsf3+0x136>
 8000b9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	ea40 0003 	orr.w	r0, r0, r3
 8000bb0:	4770      	bx	lr
 8000bb2:	0049      	lsls	r1, r1, #1
 8000bb4:	eb40 0000 	adc.w	r0, r0, r0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc0:	d2ed      	bcs.n	8000b9e <__addsf3+0x92>
 8000bc2:	fab0 fc80 	clz	ip, r0
 8000bc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bca:	ebb2 020c 	subs.w	r2, r2, ip
 8000bce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd2:	bfaa      	itet	ge
 8000bd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd8:	4252      	neglt	r2, r2
 8000bda:	4318      	orrge	r0, r3
 8000bdc:	bfbc      	itt	lt
 8000bde:	40d0      	lsrlt	r0, r2
 8000be0:	4318      	orrlt	r0, r3
 8000be2:	4770      	bx	lr
 8000be4:	f092 0f00 	teq	r2, #0
 8000be8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bec:	bf06      	itte	eq
 8000bee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bf2:	3201      	addeq	r2, #1
 8000bf4:	3b01      	subne	r3, #1
 8000bf6:	e7b5      	b.n	8000b64 <__addsf3+0x58>
 8000bf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c00:	bf18      	it	ne
 8000c02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c06:	d021      	beq.n	8000c4c <__addsf3+0x140>
 8000c08:	ea92 0f03 	teq	r2, r3
 8000c0c:	d004      	beq.n	8000c18 <__addsf3+0x10c>
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	bf08      	it	eq
 8000c14:	4608      	moveq	r0, r1
 8000c16:	4770      	bx	lr
 8000c18:	ea90 0f01 	teq	r0, r1
 8000c1c:	bf1c      	itt	ne
 8000c1e:	2000      	movne	r0, #0
 8000c20:	4770      	bxne	lr
 8000c22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c26:	d104      	bne.n	8000c32 <__addsf3+0x126>
 8000c28:	0040      	lsls	r0, r0, #1
 8000c2a:	bf28      	it	cs
 8000c2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c36:	bf3c      	itt	cc
 8000c38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bxcc	lr
 8000c3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	4770      	bx	lr
 8000c4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c50:	bf16      	itet	ne
 8000c52:	4608      	movne	r0, r1
 8000c54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c58:	4601      	movne	r1, r0
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	bf06      	itte	eq
 8000c5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c62:	ea90 0f01 	teqeq	r0, r1
 8000c66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_ui2f>:
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e004      	b.n	8000c7c <__aeabi_i2f+0x8>
 8000c72:	bf00      	nop

08000c74 <__aeabi_i2f>:
 8000c74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c78:	bf48      	it	mi
 8000c7a:	4240      	negmi	r0, r0
 8000c7c:	ea5f 0c00 	movs.w	ip, r0
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c88:	4601      	mov	r1, r0
 8000c8a:	f04f 0000 	mov.w	r0, #0
 8000c8e:	e01c      	b.n	8000cca <__aeabi_l2f+0x2a>

08000c90 <__aeabi_ul2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e00a      	b.n	8000cb4 <__aeabi_l2f+0x14>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_l2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_l2f+0x14>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	ea5f 0c01 	movs.w	ip, r1
 8000cb8:	bf02      	ittt	eq
 8000cba:	4684      	moveq	ip, r0
 8000cbc:	4601      	moveq	r1, r0
 8000cbe:	2000      	moveq	r0, #0
 8000cc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc4:	bf08      	it	eq
 8000cc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cce:	fabc f28c 	clz	r2, ip
 8000cd2:	3a08      	subs	r2, #8
 8000cd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd8:	db10      	blt.n	8000cfc <__aeabi_l2f+0x5c>
 8000cda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cde:	4463      	add	r3, ip
 8000ce0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce4:	f1c2 0220 	rsb	r2, r2, #32
 8000ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	eb43 0002 	adc.w	r0, r3, r2
 8000cf4:	bf08      	it	eq
 8000cf6:	f020 0001 	biceq.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	f102 0220 	add.w	r2, r2, #32
 8000d00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fmul>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d06f      	beq.n	8000e14 <__aeabi_fmul+0xf8>
 8000d34:	441a      	add	r2, r3
 8000d36:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3a:	0240      	lsls	r0, r0, #9
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d42:	d01e      	beq.n	8000d82 <__aeabi_fmul+0x66>
 8000d44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d50:	fba0 3101 	umull	r3, r1, r0, r1
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d5c:	bf3e      	ittt	cc
 8000d5e:	0049      	lslcc	r1, r1, #1
 8000d60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d64:	005b      	lslcc	r3, r3, #1
 8000d66:	ea40 0001 	orr.w	r0, r0, r1
 8000d6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6e:	2afd      	cmp	r2, #253	; 0xfd
 8000d70:	d81d      	bhi.n	8000dae <__aeabi_fmul+0x92>
 8000d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7a:	bf08      	it	eq
 8000d7c:	f020 0001 	biceq.w	r0, r0, #1
 8000d80:	4770      	bx	lr
 8000d82:	f090 0f00 	teq	r0, #0
 8000d86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d8a:	bf08      	it	eq
 8000d8c:	0249      	lsleq	r1, r1, #9
 8000d8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d96:	3a7f      	subs	r2, #127	; 0x7f
 8000d98:	bfc2      	ittt	gt
 8000d9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000da2:	4770      	bxgt	lr
 8000da4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	3a01      	subs	r2, #1
 8000dae:	dc5d      	bgt.n	8000e6c <__aeabi_fmul+0x150>
 8000db0:	f112 0f19 	cmn.w	r2, #25
 8000db4:	bfdc      	itt	le
 8000db6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dba:	4770      	bxle	lr
 8000dbc:	f1c2 0200 	rsb	r2, r2, #0
 8000dc0:	0041      	lsls	r1, r0, #1
 8000dc2:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc6:	f1c2 0220 	rsb	r2, r2, #32
 8000dca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dce:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dd2:	f140 0000 	adc.w	r0, r0, #0
 8000dd6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dda:	bf08      	it	eq
 8000ddc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de0:	4770      	bx	lr
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0040      	lsleq	r0, r0, #1
 8000dee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df2:	3a01      	subeq	r2, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xce>
 8000df6:	ea40 000c 	orr.w	r0, r0, ip
 8000dfa:	f093 0f00 	teq	r3, #0
 8000dfe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0049      	lsleq	r1, r1, #1
 8000e06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0a:	3b01      	subeq	r3, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xe6>
 8000e0e:	ea41 010c 	orr.w	r1, r1, ip
 8000e12:	e78f      	b.n	8000d34 <__aeabi_fmul+0x18>
 8000e14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	bf18      	it	ne
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d00a      	beq.n	8000e3a <__aeabi_fmul+0x11e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1d8      	bne.n	8000de2 <__aeabi_fmul+0xc6>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	4770      	bx	lr
 8000e3a:	f090 0f00 	teq	r0, #0
 8000e3e:	bf17      	itett	ne
 8000e40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e44:	4608      	moveq	r0, r1
 8000e46:	f091 0f00 	teqne	r1, #0
 8000e4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4e:	d014      	beq.n	8000e7a <__aeabi_fmul+0x15e>
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d101      	bne.n	8000e5a <__aeabi_fmul+0x13e>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	d10f      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e5a:	ea93 0f0c 	teq	r3, ip
 8000e5e:	d103      	bne.n	8000e68 <__aeabi_fmul+0x14c>
 8000e60:	024b      	lsls	r3, r1, #9
 8000e62:	bf18      	it	ne
 8000e64:	4608      	movne	r0, r1
 8000e66:	d108      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e78:	4770      	bx	lr
 8000e7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_fdiv>:
 8000e84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e8c:	bf1e      	ittt	ne
 8000e8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e92:	ea92 0f0c 	teqne	r2, ip
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d069      	beq.n	8000f70 <__aeabi_fdiv+0xec>
 8000e9c:	eba2 0203 	sub.w	r2, r2, r3
 8000ea0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea4:	0249      	lsls	r1, r1, #9
 8000ea6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eaa:	d037      	beq.n	8000f1c <__aeabi_fdiv+0x98>
 8000eac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	bf38      	it	cc
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	bf24      	itt	cs
 8000ece:	1a5b      	subcs	r3, r3, r1
 8000ed0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed8:	bf24      	itt	cs
 8000eda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ede:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ee2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee6:	bf24      	itt	cs
 8000ee8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef4:	bf24      	itt	cs
 8000ef6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000efa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	bf18      	it	ne
 8000f02:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f06:	d1e0      	bne.n	8000eca <__aeabi_fdiv+0x46>
 8000f08:	2afd      	cmp	r2, #253	; 0xfd
 8000f0a:	f63f af50 	bhi.w	8000dae <__aeabi_fmul+0x92>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f14:	bf08      	it	eq
 8000f16:	f020 0001 	biceq.w	r0, r0, #1
 8000f1a:	4770      	bx	lr
 8000f1c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f20:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f24:	327f      	adds	r2, #127	; 0x7f
 8000f26:	bfc2      	ittt	gt
 8000f28:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f2c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f30:	4770      	bxgt	lr
 8000f32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	3a01      	subs	r2, #1
 8000f3c:	e737      	b.n	8000dae <__aeabi_fmul+0x92>
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xc2>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xda>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e795      	b.n	8000e9c <__aeabi_fdiv+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	d108      	bne.n	8000f8c <__aeabi_fdiv+0x108>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	f47f af7d 	bne.w	8000e7a <__aeabi_fmul+0x15e>
 8000f80:	ea93 0f0c 	teq	r3, ip
 8000f84:	f47f af70 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e776      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f8c:	ea93 0f0c 	teq	r3, ip
 8000f90:	d104      	bne.n	8000f9c <__aeabi_fdiv+0x118>
 8000f92:	024b      	lsls	r3, r1, #9
 8000f94:	f43f af4c 	beq.w	8000e30 <__aeabi_fmul+0x114>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e76e      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa0:	bf18      	it	ne
 8000fa2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa6:	d1ca      	bne.n	8000f3e <__aeabi_fdiv+0xba>
 8000fa8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fac:	f47f af5c 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000fb0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb4:	f47f af3c 	bne.w	8000e30 <__aeabi_fmul+0x114>
 8000fb8:	e75f      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000fba:	bf00      	nop

08000fbc <MPU6050_Init>:
};



uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t data;

	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read(I2Cx, DEVADDR, MPU6050_WHO_AM_I, 1, &check, 1, i2c_timeout);
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	f107 030f 	add.w	r3, r7, #15
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2275      	movs	r2, #117	; 0x75
 8000fd6:	21d0      	movs	r1, #208	; 0xd0
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f001 fa5b 	bl	8002494 <HAL_I2C_Mem_Read>
	// 0x68 will be returned by the sensor if everything goes well
	if(check == 104)
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b68      	cmp	r3, #104	; 0x68
 8000fe2:	d13d      	bne.n	8001060 <MPU6050_Init+0xa4>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		data = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, DEVADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, i2c_timeout);
 8000fe8:	2364      	movs	r3, #100	; 0x64
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2301      	movs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	f107 030e 	add.w	r3, r7, #14
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	226b      	movs	r2, #107	; 0x6b
 8000ffa:	21d0      	movs	r1, #208	; 0xd0
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f001 f94f 	bl	80022a0 <HAL_I2C_Mem_Write>

		// Set data rate of 1khz by writing SMPLRT_DIV register
		data = 0x07;
 8001002:	2307      	movs	r3, #7
 8001004:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, DEVADDR, MPU6050_SMPLRT_DIV, 1, &data, 1, i2c_timeout);
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	f107 030e 	add.w	r3, r7, #14
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	2219      	movs	r2, #25
 8001018:	21d0      	movs	r1, #208	; 0xd0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f001 f940 	bl	80022a0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG register
		// XA_ST=0, YA_ST=0, ZA_ST=0, FS_SEL=0 -> +- 2g
		data = 0x00;
 8001020:	2300      	movs	r3, #0
 8001022:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, DEVADDR, MPU6050_ACCEL_CONFIG, 1, &data, 1, i2c_timeout);
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030e 	add.w	r3, r7, #14
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	221c      	movs	r2, #28
 8001036:	21d0      	movs	r1, #208	; 0xd0
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f001 f931 	bl	80022a0 <HAL_I2C_Mem_Write>

		// Set gyroscope configuration in GYRO_CONFIG register
		// XA_ST=0, YA_ST=0, ZA_ST=0, FS_SEL=0 -> +- 250 deg/s
		data = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, DEVADDR, MPU6050_GYRO_CONFIG, 1 , &data, 1, i2c_timeout);
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 030e 	add.w	r3, r7, #14
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	221b      	movs	r2, #27
 8001054:	21d0      	movs	r1, #208	; 0xd0
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f001 f922 	bl	80022a0 <HAL_I2C_Mem_Write>
		return 0;
 800105c:	2300      	movs	r3, #0
 800105e:	e000      	b.n	8001062 <MPU6050_Init+0xa6>
	}
	return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	0000      	movs	r0, r0
 800106c:	0000      	movs	r0, r0
	...

08001070 <MPU6050_Read_All>:
	temp = (int16_t)(Rec_data[0] << 8 | Rec_data[1]);
	DataStruct->temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001074:	b094      	sub	sp, #80	; 0x50
 8001076:	af04      	add	r7, sp, #16
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 bytes of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, DEVADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 14, i2c_timeout);
 800107c:	2364      	movs	r3, #100	; 0x64
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	230e      	movs	r3, #14
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	223b      	movs	r2, #59	; 0x3b
 800108e:	21d0      	movs	r1, #208	; 0xd0
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f001 f9ff 	bl	8002494 <HAL_I2C_Mem_Read>

	DataStruct->accel_x_raw = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001096:	7a3b      	ldrb	r3, [r7, #8]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7a7b      	ldrb	r3, [r7, #9]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	801a      	strh	r2, [r3, #0]
	DataStruct->accel_y_raw = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80010a8:	7abb      	ldrb	r3, [r7, #10]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	805a      	strh	r2, [r3, #2]
	DataStruct->accel_z_raw = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80010ba:	7b3b      	ldrb	r3, [r7, #12]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7b7b      	ldrb	r3, [r7, #13]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	809a      	strh	r2, [r3, #4]
	temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	86fb      	strh	r3, [r7, #54]	; 0x36
	DataStruct->gyro_x_raw = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80010da:	7c3b      	ldrb	r3, [r7, #16]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	7c7b      	ldrb	r3, [r7, #17]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	841a      	strh	r2, [r3, #32]
	DataStruct->gyro_y_raw = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80010ec:	7cbb      	ldrb	r3, [r7, #18]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7cfb      	ldrb	r3, [r7, #19]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->gyro_z_raw = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80010fe:	7d3b      	ldrb	r3, [r7, #20]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	7d7b      	ldrb	r3, [r7, #21]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21a      	sxth	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	849a      	strh	r2, [r3, #36]	; 0x24

	DataStruct->ax = DataStruct->accel_x_raw / 16384.0;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f9d8 	bl	80004cc <__aeabi_i2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b95      	ldr	r3, [pc, #596]	; (8001378 <MPU6050_Read_All+0x308>)
 8001122:	f7ff fb67 	bl	80007f4 <__aeabi_ddiv>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	6839      	ldr	r1, [r7, #0]
 800112c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->ay = DataStruct->accel_y_raw / 16384.0;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9c8 	bl	80004cc <__aeabi_i2d>
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b8d      	ldr	r3, [pc, #564]	; (8001378 <MPU6050_Read_All+0x308>)
 8001142:	f7ff fb57 	bl	80007f4 <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->az = DataStruct->accel_z_raw / accel_z_corrector;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9b8 	bl	80004cc <__aeabi_i2d>
 800115c:	a380      	add	r3, pc, #512	; (adr r3, 8001360 <MPU6050_Read_All+0x2f0>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fb47 	bl	80007f4 <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataStruct->temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001170:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fd7d 	bl	8000c74 <__aeabi_i2f>
 800117a:	4603      	mov	r3, r0
 800117c:	497f      	ldr	r1, [pc, #508]	; (800137c <MPU6050_Read_All+0x30c>)
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fe80 	bl	8000e84 <__aeabi_fdiv>
 8001184:	4603      	mov	r3, r0
 8001186:	497e      	ldr	r1, [pc, #504]	; (8001380 <MPU6050_Read_All+0x310>)
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fcbf 	bl	8000b0c <__addsf3>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
	DataStruct->gx = DataStruct->gyro_x_raw / 131.0;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f995 	bl	80004cc <__aeabi_i2d>
 80011a2:	a371      	add	r3, pc, #452	; (adr r3, 8001368 <MPU6050_Read_All+0x2f8>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fb24 	bl	80007f4 <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	6839      	ldr	r1, [r7, #0]
 80011b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->gy = DataStruct->gyro_y_raw / 131.0;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f985 	bl	80004cc <__aeabi_i2d>
 80011c2:	a369      	add	r3, pc, #420	; (adr r3, 8001368 <MPU6050_Read_All+0x2f8>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fb14 	bl	80007f4 <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	6839      	ldr	r1, [r7, #0]
 80011d2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->gz = DataStruct->gyro_z_raw / 131.0;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f975 	bl	80004cc <__aeabi_i2d>
 80011e2:	a361      	add	r3, pc, #388	; (adr r3, 8001368 <MPU6050_Read_All+0x2f8>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff fb04 	bl	80007f4 <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Kalman angle solve
	double dt = (double)(HAL_GetTick() - timer) / 1000;
 80011f6:	f000 fc69 	bl	8001acc <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b61      	ldr	r3, [pc, #388]	; (8001384 <MPU6050_Read_All+0x314>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f952 	bl	80004ac <__aeabi_ui2d>
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b5e      	ldr	r3, [pc, #376]	; (8001388 <MPU6050_Read_All+0x318>)
 800120e:	f7ff faf1 	bl	80007f4 <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer = HAL_GetTick();
 800121a:	f000 fc57 	bl	8001acc <HAL_GetTick>
 800121e:	4603      	mov	r3, r0
 8001220:	4a58      	ldr	r2, [pc, #352]	; (8001384 <MPU6050_Read_All+0x314>)
 8001222:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
			DataStruct->accel_x_raw * DataStruct->accel_x_raw + DataStruct->accel_z_raw * DataStruct->accel_z_raw);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122a:	461a      	mov	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	fb03 f202 	mul.w	r2, r3, r2
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800123c:	4619      	mov	r1, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f93e 	bl	80004cc <__aeabi_i2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f002 fcf5 	bl	8003c46 <sqrt>
 800125c:	e9c7 0108 	strd	r0, r1, [r7, #32]
	if(roll_sqrt != 0.0)
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800126c:	f7ff fc00 	bl	8000a70 <__aeabi_dcmpeq>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <MPU6050_Read_All+0x23a>
	{
		roll = atan(DataStruct->accel_y_raw / roll_sqrt) * RAD_TO_DEG;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f925 	bl	80004cc <__aeabi_i2d>
 8001282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001286:	f7ff fab5 	bl	80007f4 <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f002 fb49 	bl	8003928 <atan>
 8001296:	a336      	add	r3, pc, #216	; (adr r3, 8001370 <MPU6050_Read_All+0x300>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f980 	bl	80005a0 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80012a8:	e005      	b.n	80012b6 <MPU6050_Read_All+0x246>
	}
	else
	{
		roll = 0.0;
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}

	double pitch = atan2(-DataStruct->accel_x_raw, DataStruct->accel_z_raw) * RAD_TO_DEG;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012bc:	425b      	negs	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f904 	bl	80004cc <__aeabi_i2d>
 80012c4:	4682      	mov	sl, r0
 80012c6:	468b      	mov	fp, r1
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8fc 	bl	80004cc <__aeabi_i2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4650      	mov	r0, sl
 80012da:	4659      	mov	r1, fp
 80012dc:	f002 fcb1 	bl	8003c42 <atan2>
 80012e0:	a323      	add	r3, pc, #140	; (adr r3, 8001370 <MPU6050_Read_All+0x300>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f95b 	bl	80005a0 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if((pitch < -90 && DataStruct->kalman_ang_y > 90) || (pitch > 90 && DataStruct->kalman_ang_y < -90))
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MPU6050_Read_All+0x31c>)
 80012f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012fc:	f7ff fbc2 	bl	8000a84 <__aeabi_dcmplt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00a      	beq.n	800131c <MPU6050_Read_All+0x2ac>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MPU6050_Read_All+0x320>)
 8001312:	f7ff fbd5 	bl	8000ac0 <__aeabi_dcmpgt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d114      	bne.n	8001346 <MPU6050_Read_All+0x2d6>
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MPU6050_Read_All+0x320>)
 8001322:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001326:	f7ff fbcb 	bl	8000ac0 <__aeabi_dcmpgt>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d033      	beq.n	8001398 <MPU6050_Read_All+0x328>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MPU6050_Read_All+0x31c>)
 800133c:	f7ff fba2 	bl	8000a84 <__aeabi_dcmplt>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d028      	beq.n	8001398 <MPU6050_Read_All+0x328>
	{
		KalmanY.angle = pitch;
 8001346:	4913      	ldr	r1, [pc, #76]	; (8001394 <MPU6050_Read_All+0x324>)
 8001348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800134c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->kalman_ang_y = pitch;
 8001350:	6839      	ldr	r1, [r7, #0]
 8001352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001356:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800135a:	e030      	b.n	80013be <MPU6050_Read_All+0x34e>
 800135c:	f3af 8000 	nop.w
 8001360:	00000000 	.word	0x00000000
 8001364:	40cc2900 	.word	0x40cc2900
 8001368:	00000000 	.word	0x00000000
 800136c:	40606000 	.word	0x40606000
 8001370:	1a63c1f8 	.word	0x1a63c1f8
 8001374:	404ca5dc 	.word	0x404ca5dc
 8001378:	40d00000 	.word	0x40d00000
 800137c:	43aa0000 	.word	0x43aa0000
 8001380:	42121eb8 	.word	0x42121eb8
 8001384:	2000011c 	.word	0x2000011c
 8001388:	408f4000 	.word	0x408f4000
 800138c:	c0568000 	.word	0xc0568000
 8001390:	40568000 	.word	0x40568000
 8001394:	20000048 	.word	0x20000048
	}
	else
	{
		DataStruct->kalman_ang_y = Kalman_Get_Angle(&KalmanY, pitch, DataStruct->gy, dt);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800139e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013a6:	e9cd 2300 	strd	r2, r3, [sp]
 80013aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ae:	4827      	ldr	r0, [pc, #156]	; (800144c <MPU6050_Read_All+0x3dc>)
 80013b0:	f000 f852 	bl	8001458 <Kalman_Get_Angle>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	6839      	ldr	r1, [r7, #0]
 80013ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}

	if (fabs(DataStruct->kalman_ang_y)>90)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80013c4:	4690      	mov	r8, r2
 80013c6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <MPU6050_Read_All+0x3e0>)
 80013d0:	4640      	mov	r0, r8
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7ff fb74 	bl	8000ac0 <__aeabi_dcmpgt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <MPU6050_Read_All+0x380>
		DataStruct->gx = -DataStruct->gx;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80013e4:	4614      	mov	r4, r2
 80013e6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	DataStruct->kalman_ang_x = Kalman_Get_Angle(&KalmanX, roll, DataStruct->gx, dt);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80013f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001402:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001406:	4813      	ldr	r0, [pc, #76]	; (8001454 <MPU6050_Read_All+0x3e4>)
 8001408:	f000 f826 	bl	8001458 <Kalman_Get_Angle>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	6839      	ldr	r1, [r7, #0]
 8001412:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	// Calculate yaw with complementary filter
	DataStruct->ang_z += DataStruct->gz * dt;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001426:	f7ff f8bb 	bl	80005a0 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4620      	mov	r0, r4
 8001430:	4629      	mov	r1, r5
 8001432:	f7fe feff 	bl	8000234 <__adddf3>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	6839      	ldr	r1, [r7, #0]
 800143c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
}
 8001440:	bf00      	nop
 8001442:	3740      	adds	r7, #64	; 0x40
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800144a:	bf00      	nop
 800144c:	20000048 	.word	0x20000048
 8001450:	40568000 	.word	0x40568000
 8001454:	20000000 	.word	0x20000000

08001458 <Kalman_Get_Angle>:

double Kalman_Get_Angle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b092      	sub	sp, #72	; 0x48
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	e9c7 2300 	strd	r2, r3, [r7]
	double rate = newRate - Kalman->bias;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800146a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800146e:	f7fe fedf 	bl	8000230 <__aeabi_dsub>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += dt * rate;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001480:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001484:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001488:	f7ff f88a 	bl	80005a0 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7fe fece 	bl	8000234 <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014b2:	f7ff f875 	bl	80005a0 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80014c4:	f7fe feb4 	bl	8000230 <__aeabi_dsub>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80014d6:	f7fe feab 	bl	8000230 <__aeabi_dsub>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7fe fea4 	bl	8000234 <__adddf3>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014f8:	f7ff f852 	bl	80005a0 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7fe fe96 	bl	8000234 <__adddf3>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001522:	f7ff f83d 	bl	80005a0 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7fe fe7f 	bl	8000230 <__aeabi_dsub>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001548:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800154c:	f7ff f828 	bl	80005a0 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7fe fe6a 	bl	8000230 <__aeabi_dsub>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	68f9      	ldr	r1, [r7, #12]
 8001562:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001572:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001576:	f7ff f813 	bl	80005a0 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f7fe fe57 	bl	8000234 <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	68f9      	ldr	r1, [r7, #12]
 800158c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800159c:	f7fe fe4a 	bl	8000234 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80015ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015b2:	f7ff f91f 	bl	80007f4 <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80015c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015c8:	f7ff f914 	bl	80007f4 <__aeabi_ddiv>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double y = newAngle - Kalman->angle;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015de:	f7fe fe27 	bl	8000230 <__aeabi_dsub>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Kalman->angle += K[0] * y;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015f8:	f7fe ffd2 	bl	80005a0 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4620      	mov	r0, r4
 8001602:	4629      	mov	r1, r5
 8001604:	f7fe fe16 	bl	8000234 <__adddf3>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	68f9      	ldr	r1, [r7, #12]
 800160e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001618:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800161c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001620:	f7fe ffbe 	bl	80005a0 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe fe02 	bl	8000234 <__adddf3>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001640:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double P01_temp = Kalman->P[0][1];
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800164a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001654:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800165c:	f7fe ffa0 	bl	80005a0 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4620      	mov	r0, r4
 8001666:	4629      	mov	r1, r5
 8001668:	f7fe fde2 	bl	8000230 <__aeabi_dsub>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	68f9      	ldr	r1, [r7, #12]
 8001672:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800167c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001680:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001684:	f7fe ff8c 	bl	80005a0 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fdce 	bl	8000230 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80016a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016ac:	f7fe ff78 	bl	80005a0 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7fe fdba 	bl	8000230 <__aeabi_dsub>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80016cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016d4:	f7fe ff64 	bl	80005a0 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fda6 	bl	8000230 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	68f9      	ldr	r1, [r7, #12]
 80016ea:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	3748      	adds	r7, #72	; 0x48
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_GPIO_Init+0x58>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MX_GPIO_Init+0x58>)
 800170c:	f043 0320 	orr.w	r3, r3, #32
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_GPIO_Init+0x58>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_GPIO_Init+0x58>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <MX_GPIO_Init+0x58>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_GPIO_Init+0x58>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_GPIO_Init+0x58>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <MX_GPIO_Init+0x58>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <MX_GPIO_Init+0x58>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000

0800175c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_I2C2_Init+0x58>)
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <MX_I2C2_Init+0x5c>)
 8001764:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_I2C2_Init+0x58>)
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <MX_I2C2_Init+0x60>)
 800176a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_I2C2_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_I2C2_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_I2C2_Init+0x58>)
 800177a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_I2C2_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_I2C2_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_I2C2_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_I2C2_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_I2C2_Init+0x58>)
 800179a:	f000 fc3d 	bl	8002018 <HAL_I2C_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017a4:	f000 f8af 	bl	8001906 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  HAL_I2C_MspInit(&hi2c2);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <MX_I2C2_Init+0x58>)
 80017aa:	f000 f809 	bl	80017c0 <HAL_I2C_MspInit>
  /* USER CODE END I2C2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000120 	.word	0x20000120
 80017b8:	40005800 	.word	0x40005800
 80017bc:	00061a80 	.word	0x00061a80

080017c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a16      	ldr	r2, [pc, #88]	; (8001834 <HAL_I2C_MspInit+0x74>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d124      	bne.n	800182a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_I2C_MspInit+0x78>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_I2C_MspInit+0x78>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_I2C_MspInit+0x78>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fe:	2312      	movs	r3, #18
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	4619      	mov	r1, r3
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <HAL_I2C_MspInit+0x7c>)
 800180e:	f000 fa6f 	bl	8001cf0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_I2C_MspInit+0x78>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_I2C_MspInit+0x78>)
 8001818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_I2C_MspInit+0x78>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40005800 	.word	0x40005800
 8001838:	40021000 	.word	0x40021000
 800183c:	40010c00 	.word	0x40010c00

08001840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001844:	f000 f8ea 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001848:	f000 f818 	bl	800187c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800184c:	f7ff ff58 	bl	8001700 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001850:	f7ff ff84 	bl	800175c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  while(MPU6050_Init(&hi2c2) == 1);
 8001854:	bf00      	nop
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <main+0x34>)
 8001858:	f7ff fbb0 	bl	8000fbc <MPU6050_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d0f9      	beq.n	8001856 <main+0x16>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c2, &MPU6050);
 8001862:	4905      	ldr	r1, [pc, #20]	; (8001878 <main+0x38>)
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <main+0x34>)
 8001866:	f7ff fc03 	bl	8001070 <MPU6050_Read_All>
	  HAL_Delay(100);
 800186a:	2064      	movs	r0, #100	; 0x64
 800186c:	f000 f938 	bl	8001ae0 <HAL_Delay>
	  MPU6050_Read_All(&hi2c2, &MPU6050);
 8001870:	e7f7      	b.n	8001862 <main+0x22>
 8001872:	bf00      	nop
 8001874:	20000120 	.word	0x20000120
 8001878:	20000178 	.word	0x20000178

0800187c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b090      	sub	sp, #64	; 0x40
 8001880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001882:	f107 0318 	add.w	r3, r7, #24
 8001886:	2228      	movs	r2, #40	; 0x28
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f002 f844 	bl	8003918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ac:	2301      	movs	r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b0:	2302      	movs	r3, #2
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	4618      	mov	r0, r3
 80018c6:	f001 fc01 	bl	80030cc <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80018d0:	f000 f819 	bl	8001906 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d8:	2302      	movs	r3, #2
 80018da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2102      	movs	r1, #2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fe6e 	bl	80035d0 <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018fa:	f000 f804 	bl	8001906 <Error_Handler>
  }
}
 80018fe:	bf00      	nop
 8001900:	3740      	adds	r7, #64	; 0x40
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190a:	b672      	cpsid	i
}
 800190c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190e:	e7fe      	b.n	800190e <Error_Handler+0x8>

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_MspInit+0x5c>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_MspInit+0x5c>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6193      	str	r3, [r2, #24]
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_MspInit+0x5c>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_MspInit+0x5c>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_MspInit+0x5c>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_MspInit+0x5c>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_MspInit+0x60>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <HAL_MspInit+0x60>)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ba:	f000 f875 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
	...

080019d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d0:	f7ff fff7 	bl	80019c2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019d6:	490c      	ldr	r1, [pc, #48]	; (8001a08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <LoopFillZerobss+0x16>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019ec:	4c09      	ldr	r4, [pc, #36]	; (8001a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fa:	f001 ff69 	bl	80038d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019fe:	f7ff ff1f 	bl	8001840 <main>
  bx lr
 8001a02:	4770      	bx	lr
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001a0c:	08004058 	.word	0x08004058
  ldr r2, =_sbss
 8001a10:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001a14:	200001dc 	.word	0x200001dc

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x28>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x28>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f92b 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff ff6a 	bl	8001910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f935 	bl	8001cd6 <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a84:	f000 f90b 	bl	8001c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000090 	.word	0x20000090
 8001aa0:	20000098 	.word	0x20000098
 8001aa4:	20000094 	.word	0x20000094

08001aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_IncTick+0x1c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_IncTick+0x20>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000098 	.word	0x20000098
 8001ac8:	200001d8 	.word	0x200001d8

08001acc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b02      	ldr	r3, [pc, #8]	; (8001adc <HAL_GetTick+0x10>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	200001d8 	.word	0x200001d8

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff fff0 	bl	8001acc <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffe0 	bl	8001acc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000098 	.word	0x20000098

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	; (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c68:	f7ff ff90 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff49 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff5e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff90 	bl	8001be0 <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5f 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffb0 	bl	8001c44 <SysTick_Config>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	e179      	b.n	8001ff8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d04:	2201      	movs	r2, #1
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	f040 8168 	bne.w	8001ff2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4a96      	ldr	r2, [pc, #600]	; (8001f80 <HAL_GPIO_Init+0x290>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d05e      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d2c:	4a94      	ldr	r2, [pc, #592]	; (8001f80 <HAL_GPIO_Init+0x290>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d875      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d32:	4a94      	ldr	r2, [pc, #592]	; (8001f84 <HAL_GPIO_Init+0x294>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d058      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d38:	4a92      	ldr	r2, [pc, #584]	; (8001f84 <HAL_GPIO_Init+0x294>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d86f      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d3e:	4a92      	ldr	r2, [pc, #584]	; (8001f88 <HAL_GPIO_Init+0x298>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d052      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d44:	4a90      	ldr	r2, [pc, #576]	; (8001f88 <HAL_GPIO_Init+0x298>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d869      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d4a:	4a90      	ldr	r2, [pc, #576]	; (8001f8c <HAL_GPIO_Init+0x29c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d04c      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d50:	4a8e      	ldr	r2, [pc, #568]	; (8001f8c <HAL_GPIO_Init+0x29c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d863      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d56:	4a8e      	ldr	r2, [pc, #568]	; (8001f90 <HAL_GPIO_Init+0x2a0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d046      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
 8001d5c:	4a8c      	ldr	r2, [pc, #560]	; (8001f90 <HAL_GPIO_Init+0x2a0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d85d      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d62:	2b12      	cmp	r3, #18
 8001d64:	d82a      	bhi.n	8001dbc <HAL_GPIO_Init+0xcc>
 8001d66:	2b12      	cmp	r3, #18
 8001d68:	d859      	bhi.n	8001e1e <HAL_GPIO_Init+0x12e>
 8001d6a:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <HAL_GPIO_Init+0x80>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001deb 	.word	0x08001deb
 8001d74:	08001dc5 	.word	0x08001dc5
 8001d78:	08001dd7 	.word	0x08001dd7
 8001d7c:	08001e19 	.word	0x08001e19
 8001d80:	08001e1f 	.word	0x08001e1f
 8001d84:	08001e1f 	.word	0x08001e1f
 8001d88:	08001e1f 	.word	0x08001e1f
 8001d8c:	08001e1f 	.word	0x08001e1f
 8001d90:	08001e1f 	.word	0x08001e1f
 8001d94:	08001e1f 	.word	0x08001e1f
 8001d98:	08001e1f 	.word	0x08001e1f
 8001d9c:	08001e1f 	.word	0x08001e1f
 8001da0:	08001e1f 	.word	0x08001e1f
 8001da4:	08001e1f 	.word	0x08001e1f
 8001da8:	08001e1f 	.word	0x08001e1f
 8001dac:	08001e1f 	.word	0x08001e1f
 8001db0:	08001e1f 	.word	0x08001e1f
 8001db4:	08001dcd 	.word	0x08001dcd
 8001db8:	08001de1 	.word	0x08001de1
 8001dbc:	4a75      	ldr	r2, [pc, #468]	; (8001f94 <HAL_GPIO_Init+0x2a4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dc2:	e02c      	b.n	8001e1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e029      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e024      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	3308      	adds	r3, #8
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e01f      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	330c      	adds	r3, #12
 8001de6:	623b      	str	r3, [r7, #32]
          break;
 8001de8:	e01a      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001df2:	2304      	movs	r3, #4
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e013      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e00:	2308      	movs	r3, #8
 8001e02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	611a      	str	r2, [r3, #16]
          break;
 8001e0a:	e009      	b.n	8001e20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	615a      	str	r2, [r3, #20]
          break;
 8001e16:	e003      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x130>
          break;
 8001e1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d801      	bhi.n	8001e2a <HAL_GPIO_Init+0x13a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	e001      	b.n	8001e2e <HAL_GPIO_Init+0x13e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2bff      	cmp	r3, #255	; 0xff
 8001e34:	d802      	bhi.n	8001e3c <HAL_GPIO_Init+0x14c>
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x152>
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	3b08      	subs	r3, #8
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	210f      	movs	r1, #15
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	401a      	ands	r2, r3
 8001e54:	6a39      	ldr	r1, [r7, #32]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80c1 	beq.w	8001ff2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e70:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_GPIO_Init+0x2a8>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <HAL_GPIO_Init+0x2a8>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_GPIO_Init+0x2a8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e88:	4a44      	ldr	r2, [pc, #272]	; (8001f9c <HAL_GPIO_Init+0x2ac>)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3c      	ldr	r2, [pc, #240]	; (8001fa0 <HAL_GPIO_Init+0x2b0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d01f      	beq.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3b      	ldr	r2, [pc, #236]	; (8001fa4 <HAL_GPIO_Init+0x2b4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d019      	beq.n	8001ef0 <HAL_GPIO_Init+0x200>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3a      	ldr	r2, [pc, #232]	; (8001fa8 <HAL_GPIO_Init+0x2b8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d013      	beq.n	8001eec <HAL_GPIO_Init+0x1fc>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a39      	ldr	r2, [pc, #228]	; (8001fac <HAL_GPIO_Init+0x2bc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_GPIO_Init+0x1f8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a38      	ldr	r2, [pc, #224]	; (8001fb0 <HAL_GPIO_Init+0x2c0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_GPIO_Init+0x1f4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a37      	ldr	r2, [pc, #220]	; (8001fb4 <HAL_GPIO_Init+0x2c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_GPIO_Init+0x1f0>
 8001edc:	2305      	movs	r3, #5
 8001ede:	e00a      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ee0:	2306      	movs	r3, #6
 8001ee2:	e008      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	e006      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e004      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f06:	4925      	ldr	r1, [pc, #148]	; (8001f9c <HAL_GPIO_Init+0x2ac>)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	4924      	ldr	r1, [pc, #144]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4920      	ldr	r1, [pc, #128]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	491a      	ldr	r1, [pc, #104]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4916      	ldr	r1, [pc, #88]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d025      	beq.n	8001fbc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4910      	ldr	r1, [pc, #64]	; (8001fb8 <HAL_GPIO_Init+0x2c8>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e025      	b.n	8001fca <HAL_GPIO_Init+0x2da>
 8001f7e:	bf00      	nop
 8001f80:	10320000 	.word	0x10320000
 8001f84:	10310000 	.word	0x10310000
 8001f88:	10220000 	.word	0x10220000
 8001f8c:	10210000 	.word	0x10210000
 8001f90:	10120000 	.word	0x10120000
 8001f94:	10110000 	.word	0x10110000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	40010c00 	.word	0x40010c00
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40011400 	.word	0x40011400
 8001fb0:	40011800 	.word	0x40011800
 8001fb4:	40011c00 	.word	0x40011c00
 8001fb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_GPIO_Init+0x324>)
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	4913      	ldr	r1, [pc, #76]	; (8002014 <HAL_GPIO_Init+0x324>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_GPIO_Init+0x324>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_GPIO_Init+0x324>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_GPIO_Init+0x324>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <HAL_GPIO_Init+0x324>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae7e 	bne.w	8001d04 <HAL_GPIO_Init+0x14>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	372c      	adds	r7, #44	; 0x2c
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e12b      	b.n	8002282 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fbbe 	bl	80017c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800206a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800207c:	f001 fbf0 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 8002080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a81      	ldr	r2, [pc, #516]	; (800228c <HAL_I2C_Init+0x274>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d807      	bhi.n	800209c <HAL_I2C_Init+0x84>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a80      	ldr	r2, [pc, #512]	; (8002290 <HAL_I2C_Init+0x278>)
 8002090:	4293      	cmp	r3, r2
 8002092:	bf94      	ite	ls
 8002094:	2301      	movls	r3, #1
 8002096:	2300      	movhi	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e006      	b.n	80020aa <HAL_I2C_Init+0x92>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a7d      	ldr	r2, [pc, #500]	; (8002294 <HAL_I2C_Init+0x27c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bf94      	ite	ls
 80020a4:	2301      	movls	r3, #1
 80020a6:	2300      	movhi	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0e7      	b.n	8002282 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4a78      	ldr	r2, [pc, #480]	; (8002298 <HAL_I2C_Init+0x280>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9b      	lsrs	r3, r3, #18
 80020bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a6a      	ldr	r2, [pc, #424]	; (800228c <HAL_I2C_Init+0x274>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d802      	bhi.n	80020ec <HAL_I2C_Init+0xd4>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	3301      	adds	r3, #1
 80020ea:	e009      	b.n	8002100 <HAL_I2C_Init+0xe8>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	4a69      	ldr	r2, [pc, #420]	; (800229c <HAL_I2C_Init+0x284>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	3301      	adds	r3, #1
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	430b      	orrs	r3, r1
 8002106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	495c      	ldr	r1, [pc, #368]	; (800228c <HAL_I2C_Init+0x274>)
 800211c:	428b      	cmp	r3, r1
 800211e:	d819      	bhi.n	8002154 <HAL_I2C_Init+0x13c>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e59      	subs	r1, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fbb1 f3f3 	udiv	r3, r1, r3
 800212e:	1c59      	adds	r1, r3, #1
 8002130:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002134:	400b      	ands	r3, r1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_I2C_Init+0x138>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1e59      	subs	r1, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fbb1 f3f3 	udiv	r3, r1, r3
 8002148:	3301      	adds	r3, #1
 800214a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214e:	e051      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 8002150:	2304      	movs	r3, #4
 8002152:	e04f      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d111      	bne.n	8002180 <HAL_I2C_Init+0x168>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1e58      	subs	r0, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	440b      	add	r3, r1
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	e012      	b.n	80021a6 <HAL_I2C_Init+0x18e>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1e58      	subs	r0, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	0099      	lsls	r1, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	fbb0 f3f3 	udiv	r3, r0, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Init+0x196>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e022      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10e      	bne.n	80021d4 <HAL_I2C_Init+0x1bc>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1e58      	subs	r0, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	440b      	add	r3, r1
 80021c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c8:	3301      	adds	r3, #1
 80021ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d2:	e00f      	b.n	80021f4 <HAL_I2C_Init+0x1dc>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e58      	subs	r0, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	0099      	lsls	r1, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ea:	3301      	adds	r3, #1
 80021ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	6809      	ldr	r1, [r1, #0]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6911      	ldr	r1, [r2, #16]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68d2      	ldr	r2, [r2, #12]
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	430b      	orrs	r3, r1
 8002236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	000186a0 	.word	0x000186a0
 8002290:	001e847f 	.word	0x001e847f
 8002294:	003d08ff 	.word	0x003d08ff
 8002298:	431bde83 	.word	0x431bde83
 800229c:	10624dd3 	.word	0x10624dd3

080022a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	4608      	mov	r0, r1
 80022aa:	4611      	mov	r1, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	817b      	strh	r3, [r7, #10]
 80022b2:	460b      	mov	r3, r1
 80022b4:	813b      	strh	r3, [r7, #8]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ba:	f7ff fc07 	bl	8001acc <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	f040 80d9 	bne.w	8002480 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2319      	movs	r3, #25
 80022d4:	2201      	movs	r2, #1
 80022d6:	496d      	ldr	r1, [pc, #436]	; (800248c <HAL_I2C_Mem_Write+0x1ec>)
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fcc1 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
 80022e6:	e0cc      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_I2C_Mem_Write+0x56>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0c5      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d007      	beq.n	800231c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2221      	movs	r2, #33	; 0x21
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2240      	movs	r2, #64	; 0x40
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a3a      	ldr	r2, [r7, #32]
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <HAL_I2C_Mem_Write+0x1f0>)
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800235e:	88f8      	ldrh	r0, [r7, #6]
 8002360:	893a      	ldrh	r2, [r7, #8]
 8002362:	8979      	ldrh	r1, [r7, #10]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4603      	mov	r3, r0
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 faf8 	bl	8002964 <I2C_RequestMemoryWrite>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d052      	beq.n	8002420 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e081      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fd86 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b04      	cmp	r3, #4
 8002394:	d107      	bne.n	80023a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06b      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d11b      	bne.n	8002420 <HAL_I2C_Mem_Write+0x180>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d017      	beq.n	8002420 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1aa      	bne.n	800237e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fd79 	bl	8002f24 <I2C_WaitOnBTFFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b04      	cmp	r3, #4
 800243e:	d107      	bne.n	8002450 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e016      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	e000      	b.n	8002482 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	00100002 	.word	0x00100002
 8002490:	ffff0000 	.word	0xffff0000

08002494 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	817b      	strh	r3, [r7, #10]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024b2:	f7ff fb0b 	bl	8001acc <HAL_GetTick>
 80024b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	f040 8244 	bne.w	800294e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2319      	movs	r3, #25
 80024cc:	2201      	movs	r2, #1
 80024ce:	4982      	ldr	r1, [pc, #520]	; (80026d8 <HAL_I2C_Mem_Read+0x244>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fbc5 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
 80024de:	e237      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_I2C_Mem_Read+0x5a>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e230      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d007      	beq.n	8002514 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2222      	movs	r2, #34	; 0x22
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a62      	ldr	r2, [pc, #392]	; (80026dc <HAL_I2C_Mem_Read+0x248>)
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002556:	88f8      	ldrh	r0, [r7, #6]
 8002558:	893a      	ldrh	r2, [r7, #8]
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	4603      	mov	r3, r0
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fa92 	bl	8002a90 <I2C_RequestMemoryRead>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1ec      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d113      	bne.n	80025a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e1c0      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d11e      	bne.n	80025ec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025be:	b672      	cpsid	i
}
 80025c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025e8:	b662      	cpsie	i
}
 80025ea:	e035      	b.n	8002658 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d11e      	bne.n	8002632 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002602:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002604:	b672      	cpsid	i
}
 8002606:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800262e:	b662      	cpsie	i
}
 8002630:	e012      	b.n	8002658 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002640:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002658:	e166      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	2b03      	cmp	r3, #3
 8002660:	f200 811f 	bhi.w	80028a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	2b01      	cmp	r3, #1
 800266a:	d123      	bne.n	80026b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fc9f 	bl	8002fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e167      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026b2:	e139      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d152      	bne.n	8002762 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	2200      	movs	r2, #0
 80026c4:	4906      	ldr	r1, [pc, #24]	; (80026e0 <HAL_I2C_Mem_Read+0x24c>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 faca 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e13c      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
 80026d6:	bf00      	nop
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000
 80026e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026e4:	b672      	cpsid	i
}
 80026e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800272a:	b662      	cpsie	i
}
 800272c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002760:	e0e2      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	2200      	movs	r2, #0
 800276a:	497b      	ldr	r1, [pc, #492]	; (8002958 <HAL_I2C_Mem_Read+0x4c4>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fa77 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0e9      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800278c:	b672      	cpsid	i
}
 800278e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027c2:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_I2C_Mem_Read+0x4c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	08db      	lsrs	r3, r3, #3
 80027c8:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_I2C_Mem_Read+0x4cc>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0a1a      	lsrs	r2, r3, #8
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00da      	lsls	r2, r3, #3
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	3b01      	subs	r3, #1
 80027e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d118      	bne.n	800281a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800280a:	b662      	cpsie	i
}
 800280c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e09a      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b04      	cmp	r3, #4
 8002826:	d1d9      	bne.n	80027dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800286a:	b662      	cpsie	i
}
 800286c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a0:	e042      	b.n	8002928 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fb84 	bl	8002fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e04c      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d118      	bne.n	8002928 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	f47f ae94 	bne.w	800265a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800294e:	2302      	movs	r3, #2
  }
}
 8002950:	4618      	mov	r0, r3
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	00010004 	.word	0x00010004
 800295c:	20000090 	.word	0x20000090
 8002960:	14f8b589 	.word	0x14f8b589

08002964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4603      	mov	r3, r0
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	460b      	mov	r3, r1
 8002978:	813b      	strh	r3, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2200      	movs	r2, #0
 8002996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f960 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b4:	d103      	bne.n	80029be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e05f      	b.n	8002a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	492d      	ldr	r1, [pc, #180]	; (8002a8c <I2C_RequestMemoryWrite+0x128>)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f9bb 	bl	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e04c      	b.n	8002a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	6a39      	ldr	r1, [r7, #32]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fa46 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d107      	bne.n	8002a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e02b      	b.n	8002a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a30:	893b      	ldrh	r3, [r7, #8]
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]
 8002a3a:	e021      	b.n	8002a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a3c:	893b      	ldrh	r3, [r7, #8]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	6a39      	ldr	r1, [r7, #32]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fa20 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d107      	bne.n	8002a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e005      	b.n	8002a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a76:	893b      	ldrh	r3, [r7, #8]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	00010002 	.word	0x00010002

08002a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	817b      	strh	r3, [r7, #10]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	813b      	strh	r3, [r7, #8]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f8c2 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af0:	d103      	bne.n	8002afa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0aa      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	4952      	ldr	r1, [pc, #328]	; (8002c5c <I2C_RequestMemoryRead+0x1cc>)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f91d 	bl	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e097      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	6a39      	ldr	r1, [r7, #32]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f9a8 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d107      	bne.n	8002b62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e076      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6c:	893b      	ldrh	r3, [r7, #8]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e021      	b.n	8002bbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	6a39      	ldr	r1, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f982 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d107      	bne.n	8002bae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e050      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb2:	893b      	ldrh	r3, [r7, #8]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	6a39      	ldr	r1, [r7, #32]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f967 	bl	8002e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d107      	bne.n	8002be4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e035      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f82b 	bl	8002c60 <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1e:	d103      	bne.n	8002c28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e013      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	6a3a      	ldr	r2, [r7, #32]
 8002c40:	4906      	ldr	r1, [pc, #24]	; (8002c5c <I2C_RequestMemoryRead+0x1cc>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f886 	bl	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	00010002 	.word	0x00010002

08002c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c70:	e048      	b.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c78:	d044      	beq.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7fe ff27 	bl	8001acc <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d139      	bne.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d10d      	bne.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	e00c      	b.n	8002cd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d116      	bne.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e023      	b.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10d      	bne.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	43da      	mvns	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	e00c      	b.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d093      	beq.n	8002c72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d62:	e071      	b.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d72:	d123      	bne.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f043 0204 	orr.w	r2, r3, #4
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e067      	b.n	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc2:	d041      	beq.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7fe fe82 	bl	8001acc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d302      	bcc.n	8002dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d136      	bne.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10c      	bne.n	8002dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	e00b      	b.n	8002e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	43da      	mvns	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d016      	beq.n	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e021      	b.n	8002e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10c      	bne.n	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e00b      	b.n	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f47f af6d 	bne.w	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea0:	e034      	b.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f8e3 	bl	800306e <I2C_IsAcknowledgeFailed>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e034      	b.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb8:	d028      	beq.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fe fe07 	bl	8001acc <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d11d      	bne.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d016      	beq.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e007      	b.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b80      	cmp	r3, #128	; 0x80
 8002f18:	d1c3      	bne.n	8002ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f30:	e034      	b.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f89b 	bl	800306e <I2C_IsAcknowledgeFailed>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e034      	b.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f48:	d028      	beq.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fe fdbf 	bl	8001acc <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11d      	bne.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d016      	beq.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e007      	b.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d1c3      	bne.n	8002f32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fc0:	e049      	b.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d119      	bne.n	8003004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0210 	mvn.w	r2, #16
 8002fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e030      	b.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003004:	f7fe fd62 	bl	8001acc <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	429a      	cmp	r2, r3
 8003012:	d302      	bcc.n	800301a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d11d      	bne.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d016      	beq.n	8003056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e007      	b.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d1ae      	bne.n	8002fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003084:	d11b      	bne.n	80030be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800308e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f043 0204 	orr.w	r2, r3, #4
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e272      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8087 	beq.w	80031fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ec:	4b92      	ldr	r3, [pc, #584]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d00c      	beq.n	8003112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030f8:	4b8f      	ldr	r3, [pc, #572]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b08      	cmp	r3, #8
 8003102:	d112      	bne.n	800312a <HAL_RCC_OscConfig+0x5e>
 8003104:	4b8c      	ldr	r3, [pc, #560]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003110:	d10b      	bne.n	800312a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003112:	4b89      	ldr	r3, [pc, #548]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d06c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x12c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d168      	bne.n	80031f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e24c      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x76>
 8003134:	4b80      	ldr	r3, [pc, #512]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a7f      	ldr	r2, [pc, #508]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800313a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	e02e      	b.n	80031a0 <HAL_RCC_OscConfig+0xd4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x98>
 800314a:	4b7b      	ldr	r3, [pc, #492]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a7a      	ldr	r2, [pc, #488]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b78      	ldr	r3, [pc, #480]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a77      	ldr	r2, [pc, #476]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e01d      	b.n	80031a0 <HAL_RCC_OscConfig+0xd4>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0xbc>
 800316e:	4b72      	ldr	r3, [pc, #456]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a71      	ldr	r2, [pc, #452]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b6f      	ldr	r3, [pc, #444]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6e      	ldr	r2, [pc, #440]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0xd4>
 8003188:	4b6b      	ldr	r3, [pc, #428]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6a      	ldr	r2, [pc, #424]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800318e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b68      	ldr	r3, [pc, #416]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a67      	ldr	r2, [pc, #412]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fc90 	bl	8001acc <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fe fc8c 	bl	8001acc <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e200      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe4>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7fe fc7c 	bl	8001acc <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d8:	f7fe fc78 	bl	8001acc <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1ec      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x10c>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d063      	beq.n	80032ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003206:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003212:	4b49      	ldr	r3, [pc, #292]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b08      	cmp	r3, #8
 800321c:	d11c      	bne.n	8003258 <HAL_RCC_OscConfig+0x18c>
 800321e:	4b46      	ldr	r3, [pc, #280]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	4b43      	ldr	r3, [pc, #268]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x176>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e1c0      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b3d      	ldr	r3, [pc, #244]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4939      	ldr	r1, [pc, #228]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	e03a      	b.n	80032ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_RCC_OscConfig+0x270>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe fc31 	bl	8001acc <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326e:	f7fe fc2d 	bl	8001acc <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1a1      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4927      	ldr	r1, [pc, #156]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
 80032a0:	e015      	b.n	80032ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <HAL_RCC_OscConfig+0x270>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fc10 	bl	8001acc <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b0:	f7fe fc0c 	bl	8001acc <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e180      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d03a      	beq.n	8003350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d019      	beq.n	8003316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e8:	f7fe fbf0 	bl	8001acc <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f0:	f7fe fbec 	bl	8001acc <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e160      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800330e:	2001      	movs	r0, #1
 8003310:	f000 faba 	bl	8003888 <RCC_Delay>
 8003314:	e01c      	b.n	8003350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_RCC_OscConfig+0x274>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331c:	f7fe fbd6 	bl	8001acc <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003322:	e00f      	b.n	8003344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003324:	f7fe fbd2 	bl	8001acc <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d908      	bls.n	8003344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e146      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	42420000 	.word	0x42420000
 8003340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003344:	4b92      	ldr	r3, [pc, #584]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e9      	bne.n	8003324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a6 	beq.w	80034aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003362:	4b8b      	ldr	r3, [pc, #556]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10d      	bne.n	800338a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a87      	ldr	r2, [pc, #540]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338a:	4b82      	ldr	r3, [pc, #520]	; (8003594 <HAL_RCC_OscConfig+0x4c8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d118      	bne.n	80033c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003396:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <HAL_RCC_OscConfig+0x4c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7e      	ldr	r2, [pc, #504]	; (8003594 <HAL_RCC_OscConfig+0x4c8>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a2:	f7fe fb93 	bl	8001acc <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033aa:	f7fe fb8f 	bl	8001acc <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b64      	cmp	r3, #100	; 0x64
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e103      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	4b75      	ldr	r3, [pc, #468]	; (8003594 <HAL_RCC_OscConfig+0x4c8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d106      	bne.n	80033de <HAL_RCC_OscConfig+0x312>
 80033d0:	4b6f      	ldr	r3, [pc, #444]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4a6e      	ldr	r2, [pc, #440]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6213      	str	r3, [r2, #32]
 80033dc:	e02d      	b.n	800343a <HAL_RCC_OscConfig+0x36e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x334>
 80033e6:	4b6a      	ldr	r3, [pc, #424]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a69      	ldr	r2, [pc, #420]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	4b67      	ldr	r3, [pc, #412]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a66      	ldr	r2, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	e01c      	b.n	800343a <HAL_RCC_OscConfig+0x36e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d10c      	bne.n	8003422 <HAL_RCC_OscConfig+0x356>
 8003408:	4b61      	ldr	r3, [pc, #388]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a60      	ldr	r2, [pc, #384]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	e00b      	b.n	800343a <HAL_RCC_OscConfig+0x36e>
 8003422:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a5a      	ldr	r2, [pc, #360]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	4b58      	ldr	r3, [pc, #352]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a57      	ldr	r2, [pc, #348]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d015      	beq.n	800346e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003442:	f7fe fb43 	bl	8001acc <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	e00a      	b.n	8003460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f7fe fb3f 	bl	8001acc <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f241 3288 	movw	r2, #5000	; 0x1388
 8003458:	4293      	cmp	r3, r2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e0b1      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	4b4b      	ldr	r3, [pc, #300]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ee      	beq.n	800344a <HAL_RCC_OscConfig+0x37e>
 800346c:	e014      	b.n	8003498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fe fb2d 	bl	8001acc <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003474:	e00a      	b.n	800348c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7fe fb29 	bl	8001acc <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	; 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e09b      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	4b40      	ldr	r3, [pc, #256]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ee      	bne.n	8003476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d105      	bne.n	80034aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349e:	4b3c      	ldr	r3, [pc, #240]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	4a3b      	ldr	r2, [pc, #236]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8087 	beq.w	80035c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d061      	beq.n	8003584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d146      	bne.n	8003556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c8:	4b33      	ldr	r3, [pc, #204]	; (8003598 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fe fafd 	bl	8001acc <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fe faf9 	bl	8001acc <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e06d      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d108      	bne.n	8003510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4921      	ldr	r1, [pc, #132]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003510:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a19      	ldr	r1, [r3, #32]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	430b      	orrs	r3, r1
 8003522:	491b      	ldr	r1, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x4cc>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fe facd 	bl	8001acc <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fe fac9 	bl	8001acc <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e03d      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x46a>
 8003554:	e035      	b.n	80035c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b10      	ldr	r3, [pc, #64]	; (8003598 <HAL_RCC_OscConfig+0x4cc>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe fab6 	bl	8001acc <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fab2 	bl	8001acc <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e026      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x498>
 8003582:	e01e      	b.n	80035c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e019      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
 8003590:	40021000 	.word	0x40021000
 8003594:	40007000 	.word	0x40007000
 8003598:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x500>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0d0      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d910      	bls.n	8003614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b67      	ldr	r3, [pc, #412]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4965      	ldr	r1, [pc, #404]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0b8      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a58      	ldr	r2, [pc, #352]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003644:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4a52      	ldr	r2, [pc, #328]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800364e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	494d      	ldr	r1, [pc, #308]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d040      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d115      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e07f      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e073      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e06b      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4936      	ldr	r1, [pc, #216]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fe fa04 	bl	8001acc <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fe fa00 	bl	8001acc <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e053      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b27      	ldr	r3, [pc, #156]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d210      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 0207 	bic.w	r2, r3, #7
 8003706:	4922      	ldr	r1, [pc, #136]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e032      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4916      	ldr	r1, [pc, #88]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	490e      	ldr	r1, [pc, #56]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800375e:	f000 f821 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003762:	4602      	mov	r2, r0
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	490a      	ldr	r1, [pc, #40]	; (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	5ccb      	ldrb	r3, [r1, r3]
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	4a09      	ldr	r2, [pc, #36]	; (800379c <HAL_RCC_ClockConfig+0x1cc>)
 8003778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_ClockConfig+0x1d0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe f962 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40022000 	.word	0x40022000
 8003794:	40021000 	.word	0x40021000
 8003798:	08003fb0 	.word	0x08003fb0
 800379c:	20000090 	.word	0x20000090
 80037a0:	20000094 	.word	0x20000094

080037a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	2300      	movs	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_RCC_GetSysClockFreq+0x94>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d002      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x30>
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d003      	beq.n	80037da <HAL_RCC_GetSysClockFreq+0x36>
 80037d2:	e027      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_RCC_GetSysClockFreq+0x98>)
 80037d6:	613b      	str	r3, [r7, #16]
      break;
 80037d8:	e027      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	0c9b      	lsrs	r3, r3, #18
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	4a17      	ldr	r2, [pc, #92]	; (8003840 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037e4:	5cd3      	ldrb	r3, [r2, r3]
 80037e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d010      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_GetSysClockFreq+0x94>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	0c5b      	lsrs	r3, r3, #17
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	4a11      	ldr	r2, [pc, #68]	; (8003844 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a0d      	ldr	r2, [pc, #52]	; (800383c <HAL_RCC_GetSysClockFreq+0x98>)
 8003806:	fb03 f202 	mul.w	r2, r3, r2
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e004      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	613b      	str	r3, [r7, #16]
      break;
 8003822:	e002      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetSysClockFreq+0x98>)
 8003826:	613b      	str	r3, [r7, #16]
      break;
 8003828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382a:	693b      	ldr	r3, [r7, #16]
}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	007a1200 	.word	0x007a1200
 8003840:	08003fc8 	.word	0x08003fc8
 8003844:	08003fd8 	.word	0x08003fd8
 8003848:	003d0900 	.word	0x003d0900

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b02      	ldr	r3, [pc, #8]	; (800385c <HAL_RCC_GetHCLKFreq+0x10>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	20000090 	.word	0x20000090

08003860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003864:	f7ff fff2 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4903      	ldr	r1, [pc, #12]	; (8003884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000
 8003884:	08003fc0 	.word	0x08003fc0

08003888 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <RCC_Delay+0x34>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <RCC_Delay+0x38>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0a5b      	lsrs	r3, r3, #9
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038a4:	bf00      	nop
  }
  while (Delay --);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1e5a      	subs	r2, r3, #1
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f9      	bne.n	80038a4 <RCC_Delay+0x1c>
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	20000090 	.word	0x20000090
 80038c0:	10624dd3 	.word	0x10624dd3

080038c4 <__errno>:
 80038c4:	4b01      	ldr	r3, [pc, #4]	; (80038cc <__errno+0x8>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	2000009c 	.word	0x2000009c

080038d0 <__libc_init_array>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	2600      	movs	r6, #0
 80038d4:	4d0c      	ldr	r5, [pc, #48]	; (8003908 <__libc_init_array+0x38>)
 80038d6:	4c0d      	ldr	r4, [pc, #52]	; (800390c <__libc_init_array+0x3c>)
 80038d8:	1b64      	subs	r4, r4, r5
 80038da:	10a4      	asrs	r4, r4, #2
 80038dc:	42a6      	cmp	r6, r4
 80038de:	d109      	bne.n	80038f4 <__libc_init_array+0x24>
 80038e0:	f000 fb58 	bl	8003f94 <_init>
 80038e4:	2600      	movs	r6, #0
 80038e6:	4d0a      	ldr	r5, [pc, #40]	; (8003910 <__libc_init_array+0x40>)
 80038e8:	4c0a      	ldr	r4, [pc, #40]	; (8003914 <__libc_init_array+0x44>)
 80038ea:	1b64      	subs	r4, r4, r5
 80038ec:	10a4      	asrs	r4, r4, #2
 80038ee:	42a6      	cmp	r6, r4
 80038f0:	d105      	bne.n	80038fe <__libc_init_array+0x2e>
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f8:	4798      	blx	r3
 80038fa:	3601      	adds	r6, #1
 80038fc:	e7ee      	b.n	80038dc <__libc_init_array+0xc>
 80038fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003902:	4798      	blx	r3
 8003904:	3601      	adds	r6, #1
 8003906:	e7f2      	b.n	80038ee <__libc_init_array+0x1e>
 8003908:	08004050 	.word	0x08004050
 800390c:	08004050 	.word	0x08004050
 8003910:	08004050 	.word	0x08004050
 8003914:	08004054 	.word	0x08004054

08003918 <memset>:
 8003918:	4603      	mov	r3, r0
 800391a:	4402      	add	r2, r0
 800391c:	4293      	cmp	r3, r2
 800391e:	d100      	bne.n	8003922 <memset+0xa>
 8003920:	4770      	bx	lr
 8003922:	f803 1b01 	strb.w	r1, [r3], #1
 8003926:	e7f9      	b.n	800391c <memset+0x4>

08003928 <atan>:
 8003928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392c:	4bb6      	ldr	r3, [pc, #728]	; (8003c08 <atan+0x2e0>)
 800392e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003932:	429e      	cmp	r6, r3
 8003934:	4604      	mov	r4, r0
 8003936:	460d      	mov	r5, r1
 8003938:	468b      	mov	fp, r1
 800393a:	dd17      	ble.n	800396c <atan+0x44>
 800393c:	4bb3      	ldr	r3, [pc, #716]	; (8003c0c <atan+0x2e4>)
 800393e:	429e      	cmp	r6, r3
 8003940:	dc01      	bgt.n	8003946 <atan+0x1e>
 8003942:	d109      	bne.n	8003958 <atan+0x30>
 8003944:	b140      	cbz	r0, 8003958 <atan+0x30>
 8003946:	4622      	mov	r2, r4
 8003948:	462b      	mov	r3, r5
 800394a:	4620      	mov	r0, r4
 800394c:	4629      	mov	r1, r5
 800394e:	f7fc fc71 	bl	8000234 <__adddf3>
 8003952:	4604      	mov	r4, r0
 8003954:	460d      	mov	r5, r1
 8003956:	e005      	b.n	8003964 <atan+0x3c>
 8003958:	f1bb 0f00 	cmp.w	fp, #0
 800395c:	4cac      	ldr	r4, [pc, #688]	; (8003c10 <atan+0x2e8>)
 800395e:	f300 8121 	bgt.w	8003ba4 <atan+0x27c>
 8003962:	4dac      	ldr	r5, [pc, #688]	; (8003c14 <atan+0x2ec>)
 8003964:	4620      	mov	r0, r4
 8003966:	4629      	mov	r1, r5
 8003968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396c:	4baa      	ldr	r3, [pc, #680]	; (8003c18 <atan+0x2f0>)
 800396e:	429e      	cmp	r6, r3
 8003970:	dc11      	bgt.n	8003996 <atan+0x6e>
 8003972:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003976:	429e      	cmp	r6, r3
 8003978:	dc0a      	bgt.n	8003990 <atan+0x68>
 800397a:	a38b      	add	r3, pc, #556	; (adr r3, 8003ba8 <atan+0x280>)
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f7fc fc58 	bl	8000234 <__adddf3>
 8003984:	2200      	movs	r2, #0
 8003986:	4ba5      	ldr	r3, [pc, #660]	; (8003c1c <atan+0x2f4>)
 8003988:	f7fd f89a 	bl	8000ac0 <__aeabi_dcmpgt>
 800398c:	2800      	cmp	r0, #0
 800398e:	d1e9      	bne.n	8003964 <atan+0x3c>
 8003990:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003994:	e027      	b.n	80039e6 <atan+0xbe>
 8003996:	f000 f951 	bl	8003c3c <fabs>
 800399a:	4ba1      	ldr	r3, [pc, #644]	; (8003c20 <atan+0x2f8>)
 800399c:	4604      	mov	r4, r0
 800399e:	429e      	cmp	r6, r3
 80039a0:	460d      	mov	r5, r1
 80039a2:	f300 80b8 	bgt.w	8003b16 <atan+0x1ee>
 80039a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80039aa:	429e      	cmp	r6, r3
 80039ac:	f300 809c 	bgt.w	8003ae8 <atan+0x1c0>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	f7fc fc3e 	bl	8000234 <__adddf3>
 80039b8:	2200      	movs	r2, #0
 80039ba:	4b98      	ldr	r3, [pc, #608]	; (8003c1c <atan+0x2f4>)
 80039bc:	f7fc fc38 	bl	8000230 <__aeabi_dsub>
 80039c0:	2200      	movs	r2, #0
 80039c2:	4606      	mov	r6, r0
 80039c4:	460f      	mov	r7, r1
 80039c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039ca:	4620      	mov	r0, r4
 80039cc:	4629      	mov	r1, r5
 80039ce:	f7fc fc31 	bl	8000234 <__adddf3>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4630      	mov	r0, r6
 80039d8:	4639      	mov	r1, r7
 80039da:	f7fc ff0b 	bl	80007f4 <__aeabi_ddiv>
 80039de:	f04f 0a00 	mov.w	sl, #0
 80039e2:	4604      	mov	r4, r0
 80039e4:	460d      	mov	r5, r1
 80039e6:	4622      	mov	r2, r4
 80039e8:	462b      	mov	r3, r5
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	f7fc fdd7 	bl	80005a0 <__aeabi_dmul>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4680      	mov	r8, r0
 80039f8:	4689      	mov	r9, r1
 80039fa:	f7fc fdd1 	bl	80005a0 <__aeabi_dmul>
 80039fe:	a36c      	add	r3, pc, #432	; (adr r3, 8003bb0 <atan+0x288>)
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	4606      	mov	r6, r0
 8003a06:	460f      	mov	r7, r1
 8003a08:	f7fc fdca 	bl	80005a0 <__aeabi_dmul>
 8003a0c:	a36a      	add	r3, pc, #424	; (adr r3, 8003bb8 <atan+0x290>)
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	f7fc fc0f 	bl	8000234 <__adddf3>
 8003a16:	4632      	mov	r2, r6
 8003a18:	463b      	mov	r3, r7
 8003a1a:	f7fc fdc1 	bl	80005a0 <__aeabi_dmul>
 8003a1e:	a368      	add	r3, pc, #416	; (adr r3, 8003bc0 <atan+0x298>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f7fc fc06 	bl	8000234 <__adddf3>
 8003a28:	4632      	mov	r2, r6
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	f7fc fdb8 	bl	80005a0 <__aeabi_dmul>
 8003a30:	a365      	add	r3, pc, #404	; (adr r3, 8003bc8 <atan+0x2a0>)
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	f7fc fbfd 	bl	8000234 <__adddf3>
 8003a3a:	4632      	mov	r2, r6
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	f7fc fdaf 	bl	80005a0 <__aeabi_dmul>
 8003a42:	a363      	add	r3, pc, #396	; (adr r3, 8003bd0 <atan+0x2a8>)
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	f7fc fbf4 	bl	8000234 <__adddf3>
 8003a4c:	4632      	mov	r2, r6
 8003a4e:	463b      	mov	r3, r7
 8003a50:	f7fc fda6 	bl	80005a0 <__aeabi_dmul>
 8003a54:	a360      	add	r3, pc, #384	; (adr r3, 8003bd8 <atan+0x2b0>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f7fc fbeb 	bl	8000234 <__adddf3>
 8003a5e:	4642      	mov	r2, r8
 8003a60:	464b      	mov	r3, r9
 8003a62:	f7fc fd9d 	bl	80005a0 <__aeabi_dmul>
 8003a66:	a35e      	add	r3, pc, #376	; (adr r3, 8003be0 <atan+0x2b8>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	4680      	mov	r8, r0
 8003a6e:	4689      	mov	r9, r1
 8003a70:	4630      	mov	r0, r6
 8003a72:	4639      	mov	r1, r7
 8003a74:	f7fc fd94 	bl	80005a0 <__aeabi_dmul>
 8003a78:	a35b      	add	r3, pc, #364	; (adr r3, 8003be8 <atan+0x2c0>)
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f7fc fbd7 	bl	8000230 <__aeabi_dsub>
 8003a82:	4632      	mov	r2, r6
 8003a84:	463b      	mov	r3, r7
 8003a86:	f7fc fd8b 	bl	80005a0 <__aeabi_dmul>
 8003a8a:	a359      	add	r3, pc, #356	; (adr r3, 8003bf0 <atan+0x2c8>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f7fc fbce 	bl	8000230 <__aeabi_dsub>
 8003a94:	4632      	mov	r2, r6
 8003a96:	463b      	mov	r3, r7
 8003a98:	f7fc fd82 	bl	80005a0 <__aeabi_dmul>
 8003a9c:	a356      	add	r3, pc, #344	; (adr r3, 8003bf8 <atan+0x2d0>)
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f7fc fbc5 	bl	8000230 <__aeabi_dsub>
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	f7fc fd79 	bl	80005a0 <__aeabi_dmul>
 8003aae:	a354      	add	r3, pc, #336	; (adr r3, 8003c00 <atan+0x2d8>)
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f7fc fbbc 	bl	8000230 <__aeabi_dsub>
 8003ab8:	4632      	mov	r2, r6
 8003aba:	463b      	mov	r3, r7
 8003abc:	f7fc fd70 	bl	80005a0 <__aeabi_dmul>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	f7fc fbb4 	bl	8000234 <__adddf3>
 8003acc:	4622      	mov	r2, r4
 8003ace:	462b      	mov	r3, r5
 8003ad0:	f7fc fd66 	bl	80005a0 <__aeabi_dmul>
 8003ad4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	d144      	bne.n	8003b68 <atan+0x240>
 8003ade:	4620      	mov	r0, r4
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f7fc fba5 	bl	8000230 <__aeabi_dsub>
 8003ae6:	e734      	b.n	8003952 <atan+0x2a>
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <atan+0x2f4>)
 8003aec:	f7fc fba0 	bl	8000230 <__aeabi_dsub>
 8003af0:	2200      	movs	r2, #0
 8003af2:	4606      	mov	r6, r0
 8003af4:	460f      	mov	r7, r1
 8003af6:	4620      	mov	r0, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	4b48      	ldr	r3, [pc, #288]	; (8003c1c <atan+0x2f4>)
 8003afc:	f7fc fb9a 	bl	8000234 <__adddf3>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4630      	mov	r0, r6
 8003b06:	4639      	mov	r1, r7
 8003b08:	f7fc fe74 	bl	80007f4 <__aeabi_ddiv>
 8003b0c:	f04f 0a01 	mov.w	sl, #1
 8003b10:	4604      	mov	r4, r0
 8003b12:	460d      	mov	r5, r1
 8003b14:	e767      	b.n	80039e6 <atan+0xbe>
 8003b16:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <atan+0x2fc>)
 8003b18:	429e      	cmp	r6, r3
 8003b1a:	da1a      	bge.n	8003b52 <atan+0x22a>
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4b42      	ldr	r3, [pc, #264]	; (8003c28 <atan+0x300>)
 8003b20:	f7fc fb86 	bl	8000230 <__aeabi_dsub>
 8003b24:	2200      	movs	r2, #0
 8003b26:	4606      	mov	r6, r0
 8003b28:	460f      	mov	r7, r1
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <atan+0x300>)
 8003b30:	f7fc fd36 	bl	80005a0 <__aeabi_dmul>
 8003b34:	2200      	movs	r2, #0
 8003b36:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <atan+0x2f4>)
 8003b38:	f7fc fb7c 	bl	8000234 <__adddf3>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4630      	mov	r0, r6
 8003b42:	4639      	mov	r1, r7
 8003b44:	f7fc fe56 	bl	80007f4 <__aeabi_ddiv>
 8003b48:	f04f 0a02 	mov.w	sl, #2
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	460d      	mov	r5, r1
 8003b50:	e749      	b.n	80039e6 <atan+0xbe>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	2000      	movs	r0, #0
 8003b58:	4934      	ldr	r1, [pc, #208]	; (8003c2c <atan+0x304>)
 8003b5a:	f7fc fe4b 	bl	80007f4 <__aeabi_ddiv>
 8003b5e:	f04f 0a03 	mov.w	sl, #3
 8003b62:	4604      	mov	r4, r0
 8003b64:	460d      	mov	r5, r1
 8003b66:	e73e      	b.n	80039e6 <atan+0xbe>
 8003b68:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <atan+0x308>)
 8003b6a:	4e32      	ldr	r6, [pc, #200]	; (8003c34 <atan+0x30c>)
 8003b6c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8003b70:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8003b74:	e9da 2300 	ldrd	r2, r3, [sl]
 8003b78:	f7fc fb5a 	bl	8000230 <__aeabi_dsub>
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	462b      	mov	r3, r5
 8003b80:	f7fc fb56 	bl	8000230 <__aeabi_dsub>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003b8c:	f7fc fb50 	bl	8000230 <__aeabi_dsub>
 8003b90:	f1bb 0f00 	cmp.w	fp, #0
 8003b94:	4604      	mov	r4, r0
 8003b96:	460d      	mov	r5, r1
 8003b98:	f6bf aee4 	bge.w	8003964 <atan+0x3c>
 8003b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ba0:	461d      	mov	r5, r3
 8003ba2:	e6df      	b.n	8003964 <atan+0x3c>
 8003ba4:	4d24      	ldr	r5, [pc, #144]	; (8003c38 <atan+0x310>)
 8003ba6:	e6dd      	b.n	8003964 <atan+0x3c>
 8003ba8:	8800759c 	.word	0x8800759c
 8003bac:	7e37e43c 	.word	0x7e37e43c
 8003bb0:	e322da11 	.word	0xe322da11
 8003bb4:	3f90ad3a 	.word	0x3f90ad3a
 8003bb8:	24760deb 	.word	0x24760deb
 8003bbc:	3fa97b4b 	.word	0x3fa97b4b
 8003bc0:	a0d03d51 	.word	0xa0d03d51
 8003bc4:	3fb10d66 	.word	0x3fb10d66
 8003bc8:	c54c206e 	.word	0xc54c206e
 8003bcc:	3fb745cd 	.word	0x3fb745cd
 8003bd0:	920083ff 	.word	0x920083ff
 8003bd4:	3fc24924 	.word	0x3fc24924
 8003bd8:	5555550d 	.word	0x5555550d
 8003bdc:	3fd55555 	.word	0x3fd55555
 8003be0:	2c6a6c2f 	.word	0x2c6a6c2f
 8003be4:	bfa2b444 	.word	0xbfa2b444
 8003be8:	52defd9a 	.word	0x52defd9a
 8003bec:	3fadde2d 	.word	0x3fadde2d
 8003bf0:	af749a6d 	.word	0xaf749a6d
 8003bf4:	3fb3b0f2 	.word	0x3fb3b0f2
 8003bf8:	fe231671 	.word	0xfe231671
 8003bfc:	3fbc71c6 	.word	0x3fbc71c6
 8003c00:	9998ebc4 	.word	0x9998ebc4
 8003c04:	3fc99999 	.word	0x3fc99999
 8003c08:	440fffff 	.word	0x440fffff
 8003c0c:	7ff00000 	.word	0x7ff00000
 8003c10:	54442d18 	.word	0x54442d18
 8003c14:	bff921fb 	.word	0xbff921fb
 8003c18:	3fdbffff 	.word	0x3fdbffff
 8003c1c:	3ff00000 	.word	0x3ff00000
 8003c20:	3ff2ffff 	.word	0x3ff2ffff
 8003c24:	40038000 	.word	0x40038000
 8003c28:	3ff80000 	.word	0x3ff80000
 8003c2c:	bff00000 	.word	0xbff00000
 8003c30:	08004000 	.word	0x08004000
 8003c34:	08003fe0 	.word	0x08003fe0
 8003c38:	3ff921fb 	.word	0x3ff921fb

08003c3c <fabs>:
 8003c3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003c40:	4770      	bx	lr

08003c42 <atan2>:
 8003c42:	f000 b825 	b.w	8003c90 <__ieee754_atan2>

08003c46 <sqrt>:
 8003c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c48:	4606      	mov	r6, r0
 8003c4a:	460f      	mov	r7, r1
 8003c4c:	f000 f8f2 	bl	8003e34 <__ieee754_sqrt>
 8003c50:	4632      	mov	r2, r6
 8003c52:	4604      	mov	r4, r0
 8003c54:	460d      	mov	r5, r1
 8003c56:	463b      	mov	r3, r7
 8003c58:	4630      	mov	r0, r6
 8003c5a:	4639      	mov	r1, r7
 8003c5c:	f7fc ff3a 	bl	8000ad4 <__aeabi_dcmpun>
 8003c60:	b990      	cbnz	r0, 8003c88 <sqrt+0x42>
 8003c62:	2200      	movs	r2, #0
 8003c64:	2300      	movs	r3, #0
 8003c66:	4630      	mov	r0, r6
 8003c68:	4639      	mov	r1, r7
 8003c6a:	f7fc ff0b 	bl	8000a84 <__aeabi_dcmplt>
 8003c6e:	b158      	cbz	r0, 8003c88 <sqrt+0x42>
 8003c70:	f7ff fe28 	bl	80038c4 <__errno>
 8003c74:	2321      	movs	r3, #33	; 0x21
 8003c76:	2200      	movs	r2, #0
 8003c78:	6003      	str	r3, [r0, #0]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f7fc fdb8 	bl	80007f4 <__aeabi_ddiv>
 8003c84:	4604      	mov	r4, r0
 8003c86:	460d      	mov	r5, r1
 8003c88:	4620      	mov	r0, r4
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c90 <__ieee754_atan2>:
 8003c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c94:	4692      	mov	sl, r2
 8003c96:	4699      	mov	r9, r3
 8003c98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c9c:	461f      	mov	r7, r3
 8003c9e:	f1ca 0300 	rsb	r3, sl, #0
 8003ca2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8003e28 <__ieee754_atan2+0x198>
 8003ca6:	ea43 030a 	orr.w	r3, r3, sl
 8003caa:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003cae:	4573      	cmp	r3, lr
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	460d      	mov	r5, r1
 8003cb4:	d808      	bhi.n	8003cc8 <__ieee754_atan2+0x38>
 8003cb6:	4246      	negs	r6, r0
 8003cb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003cbc:	4306      	orrs	r6, r0
 8003cbe:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8003cc2:	4576      	cmp	r6, lr
 8003cc4:	468c      	mov	ip, r1
 8003cc6:	d908      	bls.n	8003cda <__ieee754_atan2+0x4a>
 8003cc8:	4652      	mov	r2, sl
 8003cca:	464b      	mov	r3, r9
 8003ccc:	4620      	mov	r0, r4
 8003cce:	4629      	mov	r1, r5
 8003cd0:	f7fc fab0 	bl	8000234 <__adddf3>
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	e019      	b.n	8003d0e <__ieee754_atan2+0x7e>
 8003cda:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8003cde:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8003ce2:	ea56 060a 	orrs.w	r6, r6, sl
 8003ce6:	d103      	bne.n	8003cf0 <__ieee754_atan2+0x60>
 8003ce8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cec:	f7ff be1c 	b.w	8003928 <atan>
 8003cf0:	17be      	asrs	r6, r7, #30
 8003cf2:	f006 0602 	and.w	r6, r6, #2
 8003cf6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8003cfa:	ea53 0100 	orrs.w	r1, r3, r0
 8003cfe:	d10a      	bne.n	8003d16 <__ieee754_atan2+0x86>
 8003d00:	2e02      	cmp	r6, #2
 8003d02:	d067      	beq.n	8003dd4 <__ieee754_atan2+0x144>
 8003d04:	2e03      	cmp	r6, #3
 8003d06:	d102      	bne.n	8003d0e <__ieee754_atan2+0x7e>
 8003d08:	a53b      	add	r5, pc, #236	; (adr r5, 8003df8 <__ieee754_atan2+0x168>)
 8003d0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	4629      	mov	r1, r5
 8003d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d16:	ea52 010a 	orrs.w	r1, r2, sl
 8003d1a:	d106      	bne.n	8003d2a <__ieee754_atan2+0x9a>
 8003d1c:	f1bc 0f00 	cmp.w	ip, #0
 8003d20:	da63      	bge.n	8003dea <__ieee754_atan2+0x15a>
 8003d22:	a537      	add	r5, pc, #220	; (adr r5, 8003e00 <__ieee754_atan2+0x170>)
 8003d24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003d28:	e7f1      	b.n	8003d0e <__ieee754_atan2+0x7e>
 8003d2a:	4572      	cmp	r2, lr
 8003d2c:	d10f      	bne.n	8003d4e <__ieee754_atan2+0xbe>
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8003d34:	d107      	bne.n	8003d46 <__ieee754_atan2+0xb6>
 8003d36:	2e02      	cmp	r6, #2
 8003d38:	d850      	bhi.n	8003ddc <__ieee754_atan2+0x14c>
 8003d3a:	4b3c      	ldr	r3, [pc, #240]	; (8003e2c <__ieee754_atan2+0x19c>)
 8003d3c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003d40:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003d44:	e7e3      	b.n	8003d0e <__ieee754_atan2+0x7e>
 8003d46:	2e02      	cmp	r6, #2
 8003d48:	d84c      	bhi.n	8003de4 <__ieee754_atan2+0x154>
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <__ieee754_atan2+0x1a0>)
 8003d4c:	e7f6      	b.n	8003d3c <__ieee754_atan2+0xac>
 8003d4e:	4573      	cmp	r3, lr
 8003d50:	d0e4      	beq.n	8003d1c <__ieee754_atan2+0x8c>
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8003d58:	ea4f 5223 	mov.w	r2, r3, asr #20
 8003d5c:	da20      	bge.n	8003da0 <__ieee754_atan2+0x110>
 8003d5e:	2f00      	cmp	r7, #0
 8003d60:	da01      	bge.n	8003d66 <__ieee754_atan2+0xd6>
 8003d62:	323c      	adds	r2, #60	; 0x3c
 8003d64:	db20      	blt.n	8003da8 <__ieee754_atan2+0x118>
 8003d66:	4652      	mov	r2, sl
 8003d68:	464b      	mov	r3, r9
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	f7fc fd41 	bl	80007f4 <__aeabi_ddiv>
 8003d72:	f7ff ff63 	bl	8003c3c <fabs>
 8003d76:	f7ff fdd7 	bl	8003928 <atan>
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	460d      	mov	r5, r1
 8003d7e:	2e01      	cmp	r6, #1
 8003d80:	d015      	beq.n	8003dae <__ieee754_atan2+0x11e>
 8003d82:	2e02      	cmp	r6, #2
 8003d84:	d017      	beq.n	8003db6 <__ieee754_atan2+0x126>
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	d0c1      	beq.n	8003d0e <__ieee754_atan2+0x7e>
 8003d8a:	a31f      	add	r3, pc, #124	; (adr r3, 8003e08 <__ieee754_atan2+0x178>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7fc fa4c 	bl	8000230 <__aeabi_dsub>
 8003d98:	a31d      	add	r3, pc, #116	; (adr r3, 8003e10 <__ieee754_atan2+0x180>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	e016      	b.n	8003dce <__ieee754_atan2+0x13e>
 8003da0:	a51d      	add	r5, pc, #116	; (adr r5, 8003e18 <__ieee754_atan2+0x188>)
 8003da2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003da6:	e7ea      	b.n	8003d7e <__ieee754_atan2+0xee>
 8003da8:	2400      	movs	r4, #0
 8003daa:	2500      	movs	r5, #0
 8003dac:	e7e7      	b.n	8003d7e <__ieee754_atan2+0xee>
 8003dae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003db2:	461d      	mov	r5, r3
 8003db4:	e7ab      	b.n	8003d0e <__ieee754_atan2+0x7e>
 8003db6:	a314      	add	r3, pc, #80	; (adr r3, 8003e08 <__ieee754_atan2+0x178>)
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	f7fc fa36 	bl	8000230 <__aeabi_dsub>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	a111      	add	r1, pc, #68	; (adr r1, 8003e10 <__ieee754_atan2+0x180>)
 8003dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dce:	f7fc fa2f 	bl	8000230 <__aeabi_dsub>
 8003dd2:	e77f      	b.n	8003cd4 <__ieee754_atan2+0x44>
 8003dd4:	a50e      	add	r5, pc, #56	; (adr r5, 8003e10 <__ieee754_atan2+0x180>)
 8003dd6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003dda:	e798      	b.n	8003d0e <__ieee754_atan2+0x7e>
 8003ddc:	a510      	add	r5, pc, #64	; (adr r5, 8003e20 <__ieee754_atan2+0x190>)
 8003dde:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003de2:	e794      	b.n	8003d0e <__ieee754_atan2+0x7e>
 8003de4:	2400      	movs	r4, #0
 8003de6:	2500      	movs	r5, #0
 8003de8:	e791      	b.n	8003d0e <__ieee754_atan2+0x7e>
 8003dea:	a50b      	add	r5, pc, #44	; (adr r5, 8003e18 <__ieee754_atan2+0x188>)
 8003dec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003df0:	e78d      	b.n	8003d0e <__ieee754_atan2+0x7e>
 8003df2:	bf00      	nop
 8003df4:	f3af 8000 	nop.w
 8003df8:	54442d18 	.word	0x54442d18
 8003dfc:	c00921fb 	.word	0xc00921fb
 8003e00:	54442d18 	.word	0x54442d18
 8003e04:	bff921fb 	.word	0xbff921fb
 8003e08:	33145c07 	.word	0x33145c07
 8003e0c:	3ca1a626 	.word	0x3ca1a626
 8003e10:	54442d18 	.word	0x54442d18
 8003e14:	400921fb 	.word	0x400921fb
 8003e18:	54442d18 	.word	0x54442d18
 8003e1c:	3ff921fb 	.word	0x3ff921fb
 8003e20:	54442d18 	.word	0x54442d18
 8003e24:	3fe921fb 	.word	0x3fe921fb
 8003e28:	7ff00000 	.word	0x7ff00000
 8003e2c:	08004020 	.word	0x08004020
 8003e30:	08004038 	.word	0x08004038

08003e34 <__ieee754_sqrt>:
 8003e34:	f8df c158 	ldr.w	ip, [pc, #344]	; 8003f90 <__ieee754_sqrt+0x15c>
 8003e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3c:	ea3c 0c01 	bics.w	ip, ip, r1
 8003e40:	4606      	mov	r6, r0
 8003e42:	460d      	mov	r5, r1
 8003e44:	460c      	mov	r4, r1
 8003e46:	460a      	mov	r2, r1
 8003e48:	4607      	mov	r7, r0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	d10f      	bne.n	8003e6e <__ieee754_sqrt+0x3a>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	f7fc fba5 	bl	80005a0 <__aeabi_dmul>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f7fc f9e9 	bl	8000234 <__adddf3>
 8003e62:	4606      	mov	r6, r0
 8003e64:	460d      	mov	r5, r1
 8003e66:	4630      	mov	r0, r6
 8003e68:	4629      	mov	r1, r5
 8003e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e6e:	2900      	cmp	r1, #0
 8003e70:	dc0e      	bgt.n	8003e90 <__ieee754_sqrt+0x5c>
 8003e72:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003e76:	ea5c 0707 	orrs.w	r7, ip, r7
 8003e7a:	d0f4      	beq.n	8003e66 <__ieee754_sqrt+0x32>
 8003e7c:	b141      	cbz	r1, 8003e90 <__ieee754_sqrt+0x5c>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	f7fc f9d5 	bl	8000230 <__aeabi_dsub>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	f7fc fcb3 	bl	80007f4 <__aeabi_ddiv>
 8003e8e:	e7e8      	b.n	8003e62 <__ieee754_sqrt+0x2e>
 8003e90:	1521      	asrs	r1, r4, #20
 8003e92:	d075      	beq.n	8003f80 <__ieee754_sqrt+0x14c>
 8003e94:	07cc      	lsls	r4, r1, #31
 8003e96:	f04f 0400 	mov.w	r4, #0
 8003e9a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003e9e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8003ea2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ea6:	bf5e      	ittt	pl
 8003ea8:	0fd9      	lsrpl	r1, r3, #31
 8003eaa:	005b      	lslpl	r3, r3, #1
 8003eac:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8003eb0:	0fd9      	lsrs	r1, r3, #31
 8003eb2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003eb6:	2516      	movs	r5, #22
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ebe:	107f      	asrs	r7, r7, #1
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	1846      	adds	r6, r0, r1
 8003ec4:	4296      	cmp	r6, r2
 8003ec6:	bfde      	ittt	le
 8003ec8:	1b92      	suble	r2, r2, r6
 8003eca:	1870      	addle	r0, r6, r1
 8003ecc:	1864      	addle	r4, r4, r1
 8003ece:	0052      	lsls	r2, r2, #1
 8003ed0:	3d01      	subs	r5, #1
 8003ed2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003ed6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003eda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003ede:	d1f0      	bne.n	8003ec2 <__ieee754_sqrt+0x8e>
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	f04f 0e20 	mov.w	lr, #32
 8003ee6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003eea:	4282      	cmp	r2, r0
 8003eec:	eb06 0c05 	add.w	ip, r6, r5
 8003ef0:	dc02      	bgt.n	8003ef8 <__ieee754_sqrt+0xc4>
 8003ef2:	d113      	bne.n	8003f1c <__ieee754_sqrt+0xe8>
 8003ef4:	459c      	cmp	ip, r3
 8003ef6:	d811      	bhi.n	8003f1c <__ieee754_sqrt+0xe8>
 8003ef8:	f1bc 0f00 	cmp.w	ip, #0
 8003efc:	eb0c 0506 	add.w	r5, ip, r6
 8003f00:	da43      	bge.n	8003f8a <__ieee754_sqrt+0x156>
 8003f02:	2d00      	cmp	r5, #0
 8003f04:	db41      	blt.n	8003f8a <__ieee754_sqrt+0x156>
 8003f06:	f100 0801 	add.w	r8, r0, #1
 8003f0a:	1a12      	subs	r2, r2, r0
 8003f0c:	4640      	mov	r0, r8
 8003f0e:	459c      	cmp	ip, r3
 8003f10:	bf88      	it	hi
 8003f12:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8003f16:	eba3 030c 	sub.w	r3, r3, ip
 8003f1a:	4431      	add	r1, r6
 8003f1c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003f20:	f1be 0e01 	subs.w	lr, lr, #1
 8003f24:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8003f28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f2c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003f30:	d1db      	bne.n	8003eea <__ieee754_sqrt+0xb6>
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d006      	beq.n	8003f44 <__ieee754_sqrt+0x110>
 8003f36:	1c48      	adds	r0, r1, #1
 8003f38:	bf0b      	itete	eq
 8003f3a:	4671      	moveq	r1, lr
 8003f3c:	3101      	addne	r1, #1
 8003f3e:	3401      	addeq	r4, #1
 8003f40:	f021 0101 	bicne.w	r1, r1, #1
 8003f44:	1063      	asrs	r3, r4, #1
 8003f46:	0849      	lsrs	r1, r1, #1
 8003f48:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003f4c:	07e2      	lsls	r2, r4, #31
 8003f4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003f52:	bf48      	it	mi
 8003f54:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003f58:	460e      	mov	r6, r1
 8003f5a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003f5e:	e782      	b.n	8003e66 <__ieee754_sqrt+0x32>
 8003f60:	0ada      	lsrs	r2, r3, #11
 8003f62:	3815      	subs	r0, #21
 8003f64:	055b      	lsls	r3, r3, #21
 8003f66:	2a00      	cmp	r2, #0
 8003f68:	d0fa      	beq.n	8003f60 <__ieee754_sqrt+0x12c>
 8003f6a:	02d5      	lsls	r5, r2, #11
 8003f6c:	d50a      	bpl.n	8003f84 <__ieee754_sqrt+0x150>
 8003f6e:	f1c1 0420 	rsb	r4, r1, #32
 8003f72:	fa23 f404 	lsr.w	r4, r3, r4
 8003f76:	1e4d      	subs	r5, r1, #1
 8003f78:	408b      	lsls	r3, r1
 8003f7a:	4322      	orrs	r2, r4
 8003f7c:	1b41      	subs	r1, r0, r5
 8003f7e:	e789      	b.n	8003e94 <__ieee754_sqrt+0x60>
 8003f80:	4608      	mov	r0, r1
 8003f82:	e7f0      	b.n	8003f66 <__ieee754_sqrt+0x132>
 8003f84:	0052      	lsls	r2, r2, #1
 8003f86:	3101      	adds	r1, #1
 8003f88:	e7ef      	b.n	8003f6a <__ieee754_sqrt+0x136>
 8003f8a:	4680      	mov	r8, r0
 8003f8c:	e7bd      	b.n	8003f0a <__ieee754_sqrt+0xd6>
 8003f8e:	bf00      	nop
 8003f90:	7ff00000 	.word	0x7ff00000

08003f94 <_init>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr

08003fa0 <_fini>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	bf00      	nop
 8003fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	469e      	mov	lr, r3
 8003faa:	4770      	bx	lr
